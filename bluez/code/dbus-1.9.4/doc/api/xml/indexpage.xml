<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>D-Bus</title>
    <detaileddescription>
<para>This manual documents the <emphasis>low-level</emphasis> D-Bus C API. <bold>If you use this low-level API directly, you&apos;re signing up for some pain.</bold></para><para>Caveats aside, you might get started learning the low-level API by reading about <ref refid="group__DBusConnection" kindref="compound">DBusConnection</ref> and <ref refid="group__DBusMessage" kindref="compound">DBusMessage</ref>.</para><para>There are several other places to look for D-Bus information, such as the tutorial and the specification; those can be found at <ulink url="http://www.freedesktop.org/wiki/Software/dbus">the D-Bus website</ulink>. If you&apos;re interested in a sysadmin or package maintainer&apos;s perspective on the dbus-daemon itself and its configuration, be sure to check out the man pages as well.</para><para>The low-level API documented in this manual deliberately lacks most convenience functions - those are left up to higher-level libraries based on frameworks such as GLib, Qt, Python, Mono, Java, etc. These higher-level libraries (often called &quot;D-Bus bindings&quot;) have features such as object systems and main loops that allow a <emphasis>much</emphasis> more convenient API.</para><para>The low-level API also contains plenty of clutter to support integration with arbitrary object systems, languages, main loops, and so forth. These features add a lot of noise to the API that you probably don&apos;t care about unless you&apos;re coding a binding.</para><para>This manual also contains docs for <ref refid="group__DBusInternals" kindref="compound">D-Bus internals</ref>, so you can use it to get oriented to the D-Bus source code if you&apos;re interested in patching the code. You should also read the file HACKING which comes with the source code if you plan to contribute to D-Bus.</para><para>As you read the code, you can identify internal D-Bus functions because they start with an underscore (&apos;_&apos;) character. Also, any identifier or macro that lacks a DBus, dbus_, or DBUS_ namepace prefix is internal, with a couple of exceptions such as <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>, <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>, and <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>. </para>    </detaileddescription>
  </compounddef>
</doxygen>
