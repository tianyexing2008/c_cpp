<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="dbus-connection_8h" kind="file" language="C++">
    <compoundname>dbus-connection.h</compoundname>
    <includes refid="dbus-errors_8h" local="no">dbus/dbus-errors.h</includes>
    <includes refid="dbus-memory_8h" local="no">dbus/dbus-memory.h</includes>
    <includes refid="dbus-message_8h" local="no">dbus/dbus-message.h</includes>
    <includes refid="dbus-shared_8h" local="no">dbus/dbus-shared.h</includes>
    <includedby refid="dbus-bus_8h" local="no">dbus-bus.h</includedby>
    <includedby refid="dbus_8h" local="no">dbus.h</includedby>
    <includedby refid="dbus-pending-call_8h" local="no">dbus-pending-call.h</includedby>
    <includedby refid="dbus-server_8h" local="no">dbus-server.h</includedby>
    <includedby refid="dbus-connection-internal_8h" local="no">dbus-connection-internal.h</includedby>
    <includedby refid="dbus-transport_8h" local="no">dbus-transport.h</includedby>
    <includedby refid="dbus-resources_8h" local="no">dbus-resources.h</includedby>
    <includedby refid="dbus-timeout_8h" local="no">dbus-timeout.h</includedby>
    <includedby refid="dbus-connection_8c" local="yes">dbus-connection.c</includedby>
    <includedby refid="dbus-watch_8h" local="no">dbus-watch.h</includedby>
    <includedby refid="dbus-pending-call-internal_8h" local="no">dbus-pending-call-internal.h</includedby>
    <includedby refid="dbus-object-tree_8h" local="no">dbus-object-tree.h</includedby>
    <incdepgraph>
      <node id="486">
        <label>stdarg.h</label>
      </node>
      <node id="477">
        <label>dbus-connection.h</label>
        <link refid="dbus-connection.h"/>
        <childnode refid="478" relation="include">
        </childnode>
        <childnode refid="484" relation="include">
        </childnode>
        <childnode refid="485" relation="include">
        </childnode>
        <childnode refid="487" relation="include">
        </childnode>
      </node>
      <node id="483">
        <label>dbus/dbus-protocol.h</label>
        <link refid="dbus-protocol_8h_source"/>
      </node>
      <node id="479">
        <label>dbus/dbus-macros.h</label>
        <link refid="dbus-macros_8h_source"/>
      </node>
      <node id="487">
        <label>dbus/dbus-shared.h</label>
        <link refid="dbus-shared_8h_source"/>
      </node>
      <node id="481">
        <label>stddef.h</label>
      </node>
      <node id="482">
        <label>dbus/dbus-arch-deps.h</label>
        <link refid="dbus-arch-deps_8h_source"/>
        <childnode refid="479" relation="include">
        </childnode>
      </node>
      <node id="485">
        <label>dbus/dbus-message.h</label>
        <link refid="dbus-message_8h_source"/>
        <childnode refid="479" relation="include">
        </childnode>
        <childnode refid="480" relation="include">
        </childnode>
        <childnode refid="482" relation="include">
        </childnode>
        <childnode refid="484" relation="include">
        </childnode>
        <childnode refid="478" relation="include">
        </childnode>
        <childnode refid="486" relation="include">
        </childnode>
      </node>
      <node id="478">
        <label>dbus/dbus-errors.h</label>
        <link refid="dbus-errors_8h_source"/>
        <childnode refid="479" relation="include">
        </childnode>
        <childnode refid="480" relation="include">
        </childnode>
        <childnode refid="483" relation="include">
        </childnode>
      </node>
      <node id="480">
        <label>dbus/dbus-types.h</label>
        <link refid="dbus-types_8h_source"/>
        <childnode refid="481" relation="include">
        </childnode>
        <childnode refid="482" relation="include">
        </childnode>
      </node>
      <node id="484">
        <label>dbus/dbus-memory.h</label>
        <link refid="dbus-memory_8h_source"/>
        <childnode refid="479" relation="include">
        </childnode>
        <childnode refid="481" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="524">
        <label>dbus-message-util.c</label>
        <link refid="dbus-message-util_8c_source"/>
      </node>
      <node id="509">
        <label>dbus-connection-internal.h</label>
        <link refid="dbus-connection-internal_8h_source"/>
        <childnode refid="492" relation="include">
        </childnode>
        <childnode refid="493" relation="include">
        </childnode>
        <childnode refid="510" relation="include">
        </childnode>
        <childnode refid="495" relation="include">
        </childnode>
        <childnode refid="499" relation="include">
        </childnode>
        <childnode refid="504" relation="include">
        </childnode>
        <childnode refid="502" relation="include">
        </childnode>
        <childnode refid="511" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
        <childnode refid="513" relation="include">
        </childnode>
        <childnode refid="514" relation="include">
        </childnode>
      </node>
      <node id="505">
        <label>dbus-server-win.c</label>
        <link refid="dbus-server-win_8c_source"/>
      </node>
      <node id="508">
        <label>dbus-server-win.h</label>
        <link refid="dbus-server-win_8h_source"/>
        <childnode refid="505" relation="include">
        </childnode>
      </node>
      <node id="493">
        <label>dbus-connection.c</label>
        <link refid="dbus-connection_8c_source"/>
      </node>
      <node id="488">
        <label>dbus-connection.h</label>
        <link refid="dbus-connection.h"/>
        <childnode refid="489" relation="include">
        </childnode>
        <childnode refid="490" relation="include">
        </childnode>
        <childnode refid="494" relation="include">
        </childnode>
        <childnode refid="496" relation="include">
        </childnode>
        <childnode refid="509" relation="include">
        </childnode>
        <childnode refid="515" relation="include">
        </childnode>
        <childnode refid="521" relation="include">
        </childnode>
        <childnode refid="527" relation="include">
        </childnode>
        <childnode refid="493" relation="include">
        </childnode>
        <childnode refid="529" relation="include">
        </childnode>
        <childnode refid="535" relation="include">
        </childnode>
        <childnode refid="536" relation="include">
        </childnode>
      </node>
      <node id="501">
        <label>dbus-server-launchd.c</label>
        <link refid="dbus-server-launchd_8c_source"/>
      </node>
      <node id="500">
        <label>dbus-server-launchd.h</label>
        <link refid="dbus-server-launchd_8h_source"/>
        <childnode refid="501" relation="include">
        </childnode>
        <childnode refid="502" relation="include">
        </childnode>
      </node>
      <node id="526">
        <label>dbus-resources.c</label>
        <link refid="dbus-resources_8c_source"/>
      </node>
      <node id="521">
        <label>dbus-resources.h</label>
        <link refid="dbus-resources_8h_source"/>
        <childnode refid="509" relation="include">
        </childnode>
        <childnode refid="522" relation="include">
        </childnode>
        <childnode refid="526" relation="include">
        </childnode>
        <childnode refid="497" relation="include">
        </childnode>
        <childnode refid="516" relation="include">
        </childnode>
      </node>
      <node id="491">
        <label>dbus-asv-util.c</label>
        <link refid="dbus-asv-util_8c_source"/>
      </node>
      <node id="490">
        <label>dbus.h</label>
        <link refid="dbus_8h_source"/>
        <childnode refid="491" relation="include">
        </childnode>
      </node>
      <node id="502">
        <label>dbus-server-unix.c</label>
        <link refid="dbus-server-unix_8c_source"/>
      </node>
      <node id="507">
        <label>dbus-server-unix.h</label>
        <link refid="dbus-server-unix_8h_source"/>
        <childnode refid="502" relation="include">
        </childnode>
        <childnode refid="506" relation="include">
        </childnode>
      </node>
      <node id="528">
        <label>dbus-timeout.c</label>
        <link refid="dbus-timeout_8c_source"/>
      </node>
      <node id="527">
        <label>dbus-timeout.h</label>
        <link refid="dbus-timeout_8h_source"/>
        <childnode refid="509" relation="include">
        </childnode>
        <childnode refid="493" relation="include">
        </childnode>
        <childnode refid="497" relation="include">
        </childnode>
        <childnode refid="528" relation="include">
        </childnode>
      </node>
      <node id="513">
        <label>dbus-transport-win.c</label>
        <link refid="dbus-transport-win_8c_source"/>
      </node>
      <node id="520">
        <label>dbus-transport-win.h</label>
        <link refid="dbus-transport-win_8h_source"/>
      </node>
      <node id="519">
        <label>dbus-sysdeps-unix.c</label>
        <link refid="dbus-sysdeps-unix_8c_source"/>
      </node>
      <node id="535">
        <label>dbus-pending-call-internal.h</label>
        <link refid="dbus-pending-call-internal_8h_source"/>
        <childnode refid="493" relation="include">
        </childnode>
        <childnode refid="495" relation="include">
        </childnode>
      </node>
      <node id="506">
        <label>dbus-server.c</label>
        <link refid="dbus-server_8c_source"/>
      </node>
      <node id="496">
        <label>dbus-server.h</label>
        <link refid="dbus-server_8h_source"/>
        <childnode refid="490" relation="include">
        </childnode>
        <childnode refid="497" relation="include">
        </childnode>
        <childnode refid="506" relation="include">
        </childnode>
      </node>
      <node id="492">
        <label>dbus-bus.c</label>
        <link refid="dbus-bus_8c_source"/>
      </node>
      <node id="489">
        <label>dbus-bus.h</label>
        <link refid="dbus-bus_8h_source"/>
        <childnode refid="490" relation="include">
        </childnode>
        <childnode refid="492" relation="include">
        </childnode>
        <childnode refid="493" relation="include">
        </childnode>
      </node>
      <node id="516">
        <label>dbus-transport-protected.h</label>
        <link refid="dbus-transport-protected_8h_source"/>
        <childnode refid="498" relation="include">
        </childnode>
        <childnode refid="517" relation="include">
        </childnode>
        <childnode refid="511" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
        <childnode refid="513" relation="include">
        </childnode>
        <childnode refid="514" relation="include">
        </childnode>
      </node>
      <node id="522">
        <label>dbus-message-internal.h</label>
        <link refid="dbus-message-internal_8h_source"/>
        <childnode refid="493" relation="include">
        </childnode>
        <childnode refid="523" relation="include">
        </childnode>
        <childnode refid="495" relation="include">
        </childnode>
        <childnode refid="516" relation="include">
        </childnode>
      </node>
      <node id="510">
        <label>dbus-object-tree.c</label>
        <link refid="dbus-object-tree_8c_source"/>
      </node>
      <node id="504">
        <label>dbus-server-socket.c</label>
        <link refid="dbus-server-socket_8c_source"/>
      </node>
      <node id="536">
        <label>dbus-object-tree.h</label>
        <link refid="dbus-object-tree_8h_source"/>
        <childnode refid="493" relation="include">
        </childnode>
        <childnode refid="525" relation="include">
        </childnode>
        <childnode refid="510" relation="include">
        </childnode>
      </node>
      <node id="503">
        <label>dbus-server-socket.h</label>
        <link refid="dbus-server-socket_8h_source"/>
        <childnode refid="504" relation="include">
        </childnode>
        <childnode refid="502" relation="include">
        </childnode>
        <childnode refid="505" relation="include">
        </childnode>
        <childnode refid="506" relation="include">
        </childnode>
      </node>
      <node id="525">
        <label>dbus-message.c</label>
        <link refid="dbus-message_8c_source"/>
      </node>
      <node id="533">
        <label>dbus-spawn.c</label>
        <link refid="dbus-spawn_8c_source"/>
      </node>
      <node id="531">
        <label>dbus-spawn.h</label>
        <link refid="dbus-spawn_8h_source"/>
        <childnode refid="532" relation="include">
        </childnode>
        <childnode refid="533" relation="include">
        </childnode>
      </node>
      <node id="514">
        <label>dbus-transport.c</label>
        <link refid="dbus-transport_8c_source"/>
      </node>
      <node id="515">
        <label>dbus-transport.h</label>
        <link refid="dbus-transport_8h_source"/>
        <childnode refid="509" relation="include">
        </childnode>
        <childnode refid="493" relation="include">
        </childnode>
        <childnode refid="516" relation="include">
        </childnode>
        <childnode refid="518" relation="include">
        </childnode>
        <childnode refid="519" relation="include">
        </childnode>
        <childnode refid="520" relation="include">
        </childnode>
      </node>
      <node id="497">
        <label>dbus-server-protected.h</label>
        <link refid="dbus-server-protected_8h_source"/>
        <childnode refid="498" relation="include">
        </childnode>
        <childnode refid="500" relation="include">
        </childnode>
        <childnode refid="503" relation="include">
        </childnode>
        <childnode refid="507" relation="include">
        </childnode>
        <childnode refid="508" relation="include">
        </childnode>
      </node>
      <node id="512">
        <label>dbus-transport-unix.c</label>
        <link refid="dbus-transport-unix_8c_source"/>
      </node>
      <node id="518">
        <label>dbus-transport-unix.h</label>
        <link refid="dbus-transport-unix_8h_source"/>
        <childnode refid="502" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
        <childnode refid="514" relation="include">
        </childnode>
      </node>
      <node id="532">
        <label>dbus-spawn-win.c</label>
        <link refid="dbus-spawn-win_8c_source"/>
      </node>
      <node id="495">
        <label>dbus-pending-call.c</label>
        <link refid="dbus-pending-call_8c_source"/>
      </node>
      <node id="494">
        <label>dbus-pending-call.h</label>
        <link refid="dbus-pending-call_8h_source"/>
        <childnode refid="490" relation="include">
        </childnode>
        <childnode refid="493" relation="include">
        </childnode>
        <childnode refid="495" relation="include">
        </childnode>
      </node>
      <node id="511">
        <label>dbus-transport-socket.c</label>
        <link refid="dbus-transport-socket_8c_source"/>
      </node>
      <node id="517">
        <label>dbus-transport-socket.h</label>
        <link refid="dbus-transport-socket_8h_source"/>
        <childnode refid="499" relation="include">
        </childnode>
        <childnode refid="504" relation="include">
        </childnode>
        <childnode refid="511" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
        <childnode refid="513" relation="include">
        </childnode>
        <childnode refid="514" relation="include">
        </childnode>
      </node>
      <node id="499">
        <label>dbus-server-debug-pipe.c</label>
        <link refid="dbus-server-debug-pipe_8c_source"/>
      </node>
      <node id="534">
        <label>dbus-watch.c</label>
        <link refid="dbus-watch_8c_source"/>
      </node>
      <node id="530">
        <label>dbus-socket-set-poll.c</label>
        <link refid="dbus-socket-set-poll_8c_source"/>
      </node>
      <node id="498">
        <label>dbus-server-debug-pipe.h</label>
        <link refid="dbus-server-debug-pipe_8h_source"/>
        <childnode refid="499" relation="include">
        </childnode>
      </node>
      <node id="529">
        <label>dbus-watch.h</label>
        <link refid="dbus-watch_8h_source"/>
        <childnode refid="493" relation="include">
        </childnode>
        <childnode refid="497" relation="include">
        </childnode>
        <childnode refid="530" relation="include">
        </childnode>
        <childnode refid="531" relation="include">
        </childnode>
        <childnode refid="511" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
        <childnode refid="513" relation="include">
        </childnode>
        <childnode refid="514" relation="include">
        </childnode>
        <childnode refid="534" relation="include">
        </childnode>
      </node>
      <node id="523">
        <label>dbus-message-private.h</label>
        <link refid="dbus-message-private_8h_source"/>
        <childnode refid="493" relation="include">
        </childnode>
        <childnode refid="524" relation="include">
        </childnode>
        <childnode refid="525" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structDBusObjectPathVTable" prot="public">DBusObjectPathVTable</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__DBusConnection_1ga0556779e61aeb19eb9cf6b6466bd1b98" prot="public" static="no">
        <name>DBusWatchFlags</name>
        <enumvalue id="group__DBusConnection_1gga0556779e61aeb19eb9cf6b6466bd1b98a178bd7a88e9bfbb8505db76eb7e0ccc4" prot="public">
          <name>DBUS_WATCH_READABLE</name>
          <initializer>= 1 &lt;&lt; 0</initializer>
          <briefdescription>
<para>As in POLLIN. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusConnection_1gga0556779e61aeb19eb9cf6b6466bd1b98a62ddca29b06bfbbc08bb7f3dfd3d307f" prot="public">
          <name>DBUS_WATCH_WRITABLE</name>
          <initializer>= 1 &lt;&lt; 1</initializer>
          <briefdescription>
<para>As in POLLOUT. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusConnection_1gga0556779e61aeb19eb9cf6b6466bd1b98ab1474e26aa5be3d2876dd86bbe452156" prot="public">
          <name>DBUS_WATCH_ERROR</name>
          <initializer>= 1 &lt;&lt; 2</initializer>
          <briefdescription>
<para>As in POLLERR (can&apos;t watch for this, but can be present in current state passed to <ref refid="group__DBusWatch_1gac2acdb1794450ac01a43ec4c3e07ebf7" kindref="member">dbus_watch_handle()</ref>). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusConnection_1gga0556779e61aeb19eb9cf6b6466bd1b98a7a361a1a03f463c3c9e57f7368a0bfe4" prot="public">
          <name>DBUS_WATCH_HANGUP</name>
          <initializer>= 1 &lt;&lt; 3</initializer>
          <briefdescription>
<para>As in POLLHUP (can&apos;t watch for it, but can be present in current state passed to <ref refid="group__DBusWatch_1gac2acdb1794450ac01a43ec4c3e07ebf7" kindref="member">dbus_watch_handle()</ref>). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Indicates the status of a <ref refid="structDBusWatch" kindref="compound">DBusWatch</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="59" column="1" bodyfile="dbus/dbus-connection.h" bodystart="58" bodyend="73"/>
      </memberdef>
      <memberdef kind="enum" id="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" prot="public" static="no">
        <name>DBusDispatchStatus</name>
        <enumvalue id="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" prot="public">
          <name>DBUS_DISPATCH_DATA_REMAINS</name>
          <briefdescription>
<para>There is more data to potentially convert to messages. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2acb9bb9daa90f520d5fc9e84de3c5f017" prot="public">
          <name>DBUS_DISPATCH_COMPLETE</name>
          <briefdescription>
<para>All currently available data has been processed. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2a5af20a035f29cfa67fb8d69fb693b685" prot="public">
          <name>DBUS_DISPATCH_NEED_MEMORY</name>
          <briefdescription>
<para>More memory is needed to continue. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Indicates the status of incoming data on a <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>This determines whether <ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref> needs to be called. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="80" column="1" bodyfile="dbus/dbus-connection.h" bodystart="79" bodyend="84"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__DBusWatch_1gaa5aa1734b328af3a18116d4a8a157721" prot="public" static="no">
        <type>struct <ref refid="structDBusWatch" kindref="compound">DBusWatch</ref></type>
        <definition>DBusWatch</definition>
        <argsstring></argsstring>
        <name>DBusWatch</name>
        <briefdescription>
<para>Opaque object representing a file descriptor to be watched for changes in readability, writability, or hangup. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="330" column="1" bodyfile="dbus/dbus-connection.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusTimeout_1ga6f0a4887747250a5fc9daeeb32b2d6af" prot="public" static="no">
        <type>struct <ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref></type>
        <definition>DBusTimeout</definition>
        <argsstring></argsstring>
        <name>DBusTimeout</name>
        <briefdescription>
<para>Opaque object representing a timeout. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="330" column="1" bodyfile="dbus/dbus-connection.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnection_1gaadc8a802cfffb0719d394609d9cd2186" prot="public" static="no">
        <type>struct <ref refid="structDBusPreallocatedSend" kindref="compound">DBusPreallocatedSend</ref></type>
        <definition>typedef struct DBusPreallocatedSend DBusPreallocatedSend</definition>
        <argsstring></argsstring>
        <name>DBusPreallocatedSend</name>
        <briefdescription>
<para>Opaque type representing preallocated resources so a message can be sent without further memory allocation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="330" column="1" bodyfile="dbus/dbus-connection.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusPendingCall_1gad7fe26d49b2979777dd8d64bf2be0a71" prot="public" static="no">
        <type>struct <ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref></type>
        <definition>DBusPendingCall</definition>
        <argsstring></argsstring>
        <name>DBusPendingCall</name>
        <briefdescription>
<para>Opaque type representing a method call that has not yet received a reply. </para>        </briefdescription>
        <detaileddescription>
<para>Opaque data type representing a message pending.</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="330" column="1" bodyfile="dbus/dbus-connection.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnection_1ga168c25556d88c296ebc64f1d7b20f699" prot="public" static="no">
        <type>struct <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref></type>
        <definition>typedef struct DBusConnection DBusConnection</definition>
        <argsstring></argsstring>
        <name>DBusConnection</name>
        <briefdescription>
<para>Opaque type representing a connection to a remote application and associated incoming/outgoing message queues. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="330" column="1" bodyfile="dbus/dbus-connection.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnection_1ga4dd10016d1f17d1a2fbf0ad913c90427" prot="public" static="no">
        <type>struct <ref refid="structDBusObjectPathVTable" kindref="compound">DBusObjectPathVTable</ref></type>
        <definition>typedef struct DBusObjectPathVTable DBusObjectPathVTable</definition>
        <argsstring></argsstring>
        <name>DBusObjectPathVTable</name>
        <briefdescription>
<para>Set of functions that must be implemented to handle messages sent to a particular object path. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="330" column="1" bodyfile="dbus/dbus-connection.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnection_1ga285ce1f8bb94ef2f89f23db3de8cfe4b" prot="public" static="no">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref>(*</type>
        <definition>typedef dbus_bool_t(*  DBusAddWatchFunction) (DBusWatch *watch, void *data)</definition>
        <argsstring>)(DBusWatch *watch, void *data)</argsstring>
        <name>DBusAddWatchFunction</name>
        <briefdescription>
<para>Called when libdbus needs a new watch to be monitored by the main loop. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if it lacks enough memory to add the watch. Set by <ref refid="group__DBusConnection_1gaebf031eb444b4f847606aa27daa3d8e6" kindref="member">dbus_connection_set_watch_functions()</ref> or <ref refid="group__DBusServer_1gaa5723810ea52e9f1815062fd91395892" kindref="member">dbus_server_set_watch_functions()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="91" column="1" bodyfile="dbus/dbus-connection.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnection_1ga005459ba2ddd69ba2d89f0e04ef57b10" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusWatchToggledFunction) (DBusWatch *watch, void *data)</definition>
        <argsstring>)(DBusWatch *watch, void *data)</argsstring>
        <name>DBusWatchToggledFunction</name>
        <briefdescription>
<para>Called when <ref refid="group__DBusWatch_1gae7a91e6d4d1bc187419c47c522e33a8f" kindref="member">dbus_watch_get_enabled()</ref> may return a different value than it did before. </para>        </briefdescription>
        <detaileddescription>
<para>Set by <ref refid="group__DBusConnection_1gaebf031eb444b4f847606aa27daa3d8e6" kindref="member">dbus_connection_set_watch_functions()</ref> or <ref refid="group__DBusServer_1gaa5723810ea52e9f1815062fd91395892" kindref="member">dbus_server_set_watch_functions()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="97" column="1" bodyfile="dbus/dbus-connection.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnection_1ga487ca73e58570f302ba7159c81719243" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusRemoveWatchFunction) (DBusWatch *watch, void *data)</definition>
        <argsstring>)(DBusWatch *watch, void *data)</argsstring>
        <name>DBusRemoveWatchFunction</name>
        <briefdescription>
<para>Called when libdbus no longer needs a watch to be monitored by the main loop. </para>        </briefdescription>
        <detaileddescription>
<para>Set by <ref refid="group__DBusConnection_1gaebf031eb444b4f847606aa27daa3d8e6" kindref="member">dbus_connection_set_watch_functions()</ref> or <ref refid="group__DBusServer_1gaa5723810ea52e9f1815062fd91395892" kindref="member">dbus_server_set_watch_functions()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="103" column="1" bodyfile="dbus/dbus-connection.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnection_1ga91d796869e7fa9e96d843b2c0d480df1" prot="public" static="no">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref>(*</type>
        <definition>typedef dbus_bool_t(*  DBusAddTimeoutFunction) (DBusTimeout *timeout, void *data)</definition>
        <argsstring>)(DBusTimeout *timeout, void *data)</argsstring>
        <name>DBusAddTimeoutFunction</name>
        <briefdescription>
<para>Called when libdbus needs a new timeout to be monitored by the main loop. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if it lacks enough memory to add the watch. Set by <ref refid="group__DBusConnection_1gab3cbc68eec427e9ce1783b25d44fe93c" kindref="member">dbus_connection_set_timeout_functions()</ref> or <ref refid="group__DBusServer_1gacafa42ffc063a7386db40a975c32d530" kindref="member">dbus_server_set_timeout_functions()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="110" column="1" bodyfile="dbus/dbus-connection.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnection_1ga45c22fb4103827cd10f319cc90e286ae" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusTimeoutToggledFunction) (DBusTimeout *timeout, void *data)</definition>
        <argsstring>)(DBusTimeout *timeout, void *data)</argsstring>
        <name>DBusTimeoutToggledFunction</name>
        <briefdescription>
<para>Called when <ref refid="group__DBusTimeout_1ga58954b2edb45ec1632529d35525ea45c" kindref="member">dbus_timeout_get_enabled()</ref> may return a different value than it did before. </para>        </briefdescription>
        <detaileddescription>
<para>Set by <ref refid="group__DBusConnection_1gab3cbc68eec427e9ce1783b25d44fe93c" kindref="member">dbus_connection_set_timeout_functions()</ref> or <ref refid="group__DBusServer_1gacafa42ffc063a7386db40a975c32d530" kindref="member">dbus_server_set_timeout_functions()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="117" column="1" bodyfile="dbus/dbus-connection.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnection_1ga418f70c8dfaa15c45f1d51fb9569eab8" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusRemoveTimeoutFunction) (DBusTimeout *timeout, void *data)</definition>
        <argsstring>)(DBusTimeout *timeout, void *data)</argsstring>
        <name>DBusRemoveTimeoutFunction</name>
        <briefdescription>
<para>Called when libdbus no longer needs a timeout to be monitored by the main loop. </para>        </briefdescription>
        <detaileddescription>
<para>Set by <ref refid="group__DBusConnection_1gab3cbc68eec427e9ce1783b25d44fe93c" kindref="member">dbus_connection_set_timeout_functions()</ref> or <ref refid="group__DBusServer_1gacafa42ffc063a7386db40a975c32d530" kindref="member">dbus_server_set_timeout_functions()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="123" column="1" bodyfile="dbus/dbus-connection.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnection_1ga583ca2aff3cce66d68208abdfca5b547" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusDispatchStatusFunction) (DBusConnection *connection, DBusDispatchStatus new_status, void *data)</definition>
        <argsstring>)(DBusConnection *connection, DBusDispatchStatus new_status, void *data)</argsstring>
        <name>DBusDispatchStatusFunction</name>
        <briefdescription>
<para>Called when the return value of <ref refid="group__DBusConnection_1ga893d18d8b36ffb371f16d13645071289" kindref="member">dbus_connection_get_dispatch_status()</ref> may have changed. </para>        </briefdescription>
        <detaileddescription>
<para>Set with <ref refid="group__DBusConnection_1ga55ff88cd22c0672441c7deffbfb68fbf" kindref="member">dbus_connection_set_dispatch_status_function()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="128" column="1" bodyfile="dbus/dbus-connection.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnection_1ga509465111feb37d60d5e37037266c296" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusWakeupMainFunction) (void *data)</definition>
        <argsstring>)(void *data)</argsstring>
        <name>DBusWakeupMainFunction</name>
        <briefdescription>
<para>Called when the main loop&apos;s thread should be notified that there&apos;s now work to do. </para>        </briefdescription>
        <detaileddescription>
<para>Set with <ref refid="group__DBusConnection_1ga2b1df13251c7ec348bcba39c0924e881" kindref="member">dbus_connection_set_wakeup_main_function()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="135" column="1" bodyfile="dbus/dbus-connection.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnection_1ga5ab581cb4854a82655188e7c243e34fd" prot="public" static="no">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref>(*</type>
        <definition>typedef dbus_bool_t(*  DBusAllowUnixUserFunction) (DBusConnection *connection, unsigned long uid, void *data)</definition>
        <argsstring>)(DBusConnection *connection, unsigned long uid, void *data)</argsstring>
        <name>DBusAllowUnixUserFunction</name>
        <briefdescription>
<para>Called during authentication to check whether the given UNIX user ID is allowed to connect, if the client tried to auth as a UNIX user ID. </para>        </briefdescription>
        <detaileddescription>
<para>Normally on Windows this would never happen. Set with <ref refid="group__DBusConnection_1ga6b78379badb4c5804344f4f3d87a958a" kindref="member">dbus_connection_set_unix_user_function()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="143" column="1" bodyfile="dbus/dbus-connection.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnection_1gabbb2a3b00f680968683c7b1856811b60" prot="public" static="no">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref>(*</type>
        <definition>typedef dbus_bool_t(*  DBusAllowWindowsUserFunction) (DBusConnection *connection, const char *user_sid, void *data)</definition>
        <argsstring>)(DBusConnection *connection, const char *user_sid, void *data)</argsstring>
        <name>DBusAllowWindowsUserFunction</name>
        <briefdescription>
<para>Called during authentication to check whether the given Windows user ID is allowed to connect, if the client tried to auth as a Windows user ID. </para>        </briefdescription>
        <detaileddescription>
<para>Normally on UNIX this would never happen. Set with <ref refid="group__DBusConnection_1gaa35ced9ccd29d3366749ae383b120f9c" kindref="member">dbus_connection_set_windows_user_function()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="153" column="1" bodyfile="dbus/dbus-connection.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnection_1ga0934446fa9009211ca180fc1a01813b4" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusPendingCallNotifyFunction) (DBusPendingCall *pending, void *user_data)</definition>
        <argsstring>)(DBusPendingCall *pending, void *user_data)</argsstring>
        <name>DBusPendingCallNotifyFunction</name>
        <briefdescription>
<para>Called when a pending call now has a reply available. </para>        </briefdescription>
        <detaileddescription>
<para>Set with <ref refid="group__DBusPendingCall_1ga16b67b418b1dc27cfdda6b20f7447670" kindref="member">dbus_pending_call_set_notify()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="162" column="1" bodyfile="dbus/dbus-connection.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnection_1ga842a008b3f89a8de292af9d9f3c9dcd6" prot="public" static="no">
        <type><ref refid="group__DBusShared_1ga8244b29230187624c24986c24edab1de" kindref="member">DBusHandlerResult</ref>(*</type>
        <definition>typedef DBusHandlerResult(*  DBusHandleMessageFunction) (DBusConnection *connection, DBusMessage *message, void *user_data)</definition>
        <argsstring>)(DBusConnection *connection, DBusMessage *message, void *user_data)</argsstring>
        <name>DBusHandleMessageFunction</name>
        <briefdescription>
<para>Called when a message needs to be handled. </para>        </briefdescription>
        <detaileddescription>
<para>The result indicates whether or not more handlers should be run. Set with <ref refid="group__DBusConnection_1gae00f581e5487408cb294bf71826aff86" kindref="member">dbus_connection_add_filter()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="169" column="1" bodyfile="dbus/dbus-connection.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnection_1gaf0bbd7d22aa0ef4505c87f0753e696df" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusObjectPathUnregisterFunction) (DBusConnection *connection, void *user_data)</definition>
        <argsstring>)(DBusConnection *connection, void *user_data)</argsstring>
        <name>DBusObjectPathUnregisterFunction</name>
        <briefdescription>
<para>Called when a <ref refid="structDBusObjectPathVTable" kindref="compound">DBusObjectPathVTable</ref> is unregistered (or its connection is freed). </para>        </briefdescription>
        <detaileddescription>
<para>Found in <ref refid="structDBusObjectPathVTable" kindref="compound">DBusObjectPathVTable</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="367" column="1" bodyfile="dbus/dbus-connection.h" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnection_1ga85b92d819505a6b75c513cbb8e688a6a" prot="public" static="no">
        <type><ref refid="group__DBusShared_1ga8244b29230187624c24986c24edab1de" kindref="member">DBusHandlerResult</ref>(*</type>
        <definition>typedef DBusHandlerResult(*  DBusObjectPathMessageFunction) (DBusConnection *connection, DBusMessage *message, void *user_data)</definition>
        <argsstring>)(DBusConnection *connection, DBusMessage *message, void *user_data)</argsstring>
        <name>DBusObjectPathMessageFunction</name>
        <briefdescription>
<para>Called when a message is sent to a registered object path. </para>        </briefdescription>
        <detaileddescription>
<para>Found in <ref refid="structDBusObjectPathVTable" kindref="compound">DBusObjectPathVTable</ref> which is registered with <ref refid="group__DBusConnection_1ga24730ca6fd2e9132873962a32df7628c" kindref="member">dbus_connection_register_object_path()</ref> or <ref refid="group__DBusConnection_1gac4473b37bfa74ccf7459959d27e7bc59" kindref="member">dbus_connection_register_fallback()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="374" column="1" bodyfile="dbus/dbus-connection.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__DBusConnection_1gacd32f819820266598c6b6847dfddaf9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
        <definition>DBUS_EXPORT DBusConnection * dbus_connection_open</definition>
        <argsstring>(const char *address, DBusError *error)</argsstring>
        <name>dbus_connection_open</name>
        <param>
          <type>const char *</type>
          <declname>address</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Gets a connection to a remote address. </para>        </briefdescription>
        <detaileddescription>
<para>If a connection to the given address already exists, returns the existing connection with its reference count incremented. Otherwise, returns a new connection and saves the new connection for possible re-use if a future call to <ref refid="group__DBusConnection_1gacd32f819820266598c6b6847dfddaf9c" kindref="member">dbus_connection_open()</ref> asks to connect to the same server.</para><para>Use <ref refid="group__DBusConnection_1ga434e3fc7ee420fd30e2f05e57ff26b1d" kindref="member">dbus_connection_open_private()</ref> to get a dedicated connection not shared with other callers of <ref refid="group__DBusConnection_1gacd32f819820266598c6b6847dfddaf9c" kindref="member">dbus_connection_open()</ref>.</para><para>If the open fails, the function returns <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>, and provides a reason for the failure in the error parameter. Pass <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> for the error parameter if you aren&apos;t interested in the reason for failure.</para><para>Because this connection is shared, no user of the connection may call <ref refid="group__DBusConnection_1ga2522ac5075dfe0a1535471f6e045e1ee" kindref="member">dbus_connection_close()</ref>. However, when you are done with the connection you should call <ref refid="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" kindref="member">dbus_connection_unref()</ref>.</para><para><simplesect kind="note"><para>Prefer <ref refid="group__DBusConnection_1gacd32f819820266598c6b6847dfddaf9c" kindref="member">dbus_connection_open()</ref> to <ref refid="group__DBusConnection_1ga434e3fc7ee420fd30e2f05e57ff26b1d" kindref="member">dbus_connection_open_private()</ref> unless you have good reason; connections are expensive enough that it&apos;s wasteful to create lots of connections to the same server.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>the address. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>address where an error can be returned. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new connection, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="2616" column="1" bodyfile="dbus/dbus-connection.c" bodystart="2616" bodyend="2629"/>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusBusInternals_1ga0e7fe5d0dcaca7ecb4b5a7ace23d6286" compoundref="dbus-bus_8c" startline="387" endline="413">_dbus_bus_notify_shared_connection_disconnected_unlocked</referencedby>
        <referencedby refid="group__DBusTransportUnix_1gafd694944860033155276df9162bdf72e" compoundref="dbus-transport-unix_8c" startline="225" endline="411">_dbus_transport_open_platform_specific</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga434e3fc7ee420fd30e2f05e57ff26b1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
        <definition>DBUS_EXPORT DBusConnection * dbus_connection_open_private</definition>
        <argsstring>(const char *address, DBusError *error)</argsstring>
        <name>dbus_connection_open_private</name>
        <param>
          <type>const char *</type>
          <declname>address</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Opens a new, dedicated connection to a remote address. </para>        </briefdescription>
        <detaileddescription>
<para>Unlike <ref refid="group__DBusConnection_1gacd32f819820266598c6b6847dfddaf9c" kindref="member">dbus_connection_open()</ref>, always creates a new connection. This connection will not be saved or recycled by libdbus.</para><para>If the open fails, the function returns <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>, and provides a reason for the failure in the error parameter. Pass <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> for the error parameter if you aren&apos;t interested in the reason for failure.</para><para>When you are done with this connection, you must <ref refid="group__DBusConnection_1ga2522ac5075dfe0a1535471f6e045e1ee" kindref="member">dbus_connection_close()</ref> to disconnect it, and <ref refid="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" kindref="member">dbus_connection_unref()</ref> to free the connection object.</para><para>(The <ref refid="group__DBusConnection_1ga2522ac5075dfe0a1535471f6e045e1ee" kindref="member">dbus_connection_close()</ref> can be skipped if the connection is already known to be disconnected, for example if you are inside a handler for the Disconnected signal.)</para><para><simplesect kind="note"><para>Prefer <ref refid="group__DBusConnection_1gacd32f819820266598c6b6847dfddaf9c" kindref="member">dbus_connection_open()</ref> to <ref refid="group__DBusConnection_1ga434e3fc7ee420fd30e2f05e57ff26b1d" kindref="member">dbus_connection_open_private()</ref> unless you have good reason; connections are expensive enough that it&apos;s wasteful to create lots of connections to the same server.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>the address. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>address where an error can be returned. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new connection, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="2659" column="1" bodyfile="dbus/dbus-connection.c" bodystart="2659" bodyend="2672"/>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusBusInternals_1ga0e7fe5d0dcaca7ecb4b5a7ace23d6286" compoundref="dbus-bus_8c" startline="387" endline="413">_dbus_bus_notify_shared_connection_disconnected_unlocked</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gae34751e15f114217e5ad10c663e2ef2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
        <definition>DBUS_EXPORT DBusConnection * dbus_connection_ref</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_ref</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Increments the reference count of a <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the connection. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="2681" column="1" bodyfile="dbus/dbus-connection.c" bodystart="2681" bodyend="2692"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusSysdeps_1ga626c810359ba0e362367ce2ec6691aca" compoundref="dbus-sysdeps-unix_8c" startline="2609" endline="2623">_dbus_atomic_get</references>
        <references refid="group__DBusSysdeps_1gae74c3fcf12acaeccdb152ef907de951c" compoundref="dbus-sysdeps-unix_8c" startline="2562" endline="2576">_dbus_atomic_inc</references>
        <references refid="group__DBusThreadsInternals_1ga20ec8aeb88b1f65445a4d3c1c0bd0048" compoundref="dbus-threads_8c" startline="107" endline="114">_dbus_cmutex_free_at_location</references>
        <references refid="group__DBusThreadsInternals_1ga29444a34b569fca22fac48067832aacd" compoundref="dbus-threads_8c" startline="224" endline="231">_dbus_condvar_free_at_location</references>
        <references refid="group__DBusResources_1ga48d9b53d1a395ab3c4f1846ca569ef3f" compoundref="dbus-resources_8c" startline="124" endline="135">_dbus_counter_unref</references>
        <references refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" compoundref="dbus-memory_8c" startline="781">_dbus_current_generation</references>
        <references refid="group__DBusDataSlot_1gabc399733376c462c3010271a2d431e73" compoundref="dbus-dataslot_8c" startline="340" endline="347">_dbus_data_slot_list_free</references>
        <references refid="group__DBusHashTable_1ga96b777e00764b44e0f3216fd8478f5a9" compoundref="dbus-hash_8c" startline="361" endline="410">_dbus_hash_table_unref</references>
        <references refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" compoundref="dbus-list_8c" startline="542" endline="557">_dbus_list_clear</references>
        <references refid="group__DBusList_1ga8dd69084b53361803a765e6d53d5b9d1" compoundref="dbus-list_8c" startline="759" endline="774">_dbus_list_foreach</references>
        <references refid="group__DBusList_1ga6e824f717125ce40c549d5402e32610f" compoundref="dbus-list_8c" startline="254" endline="257">_dbus_list_free_link</references>
        <references refid="group__DBusList_1ga1e26ce4fb4acb50593bd5ed2f4eeb3ae" compoundref="dbus-list_8c" startline="567" endline="570">_dbus_list_get_first_link</references>
        <references refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" compoundref="dbus-list_8h" startline="90">_dbus_list_get_next_link</references>
        <references refid="group__DBusMessageInternals_1gac84be3fd98e49409c1245a87c7de6f7d" compoundref="dbus-message_8c" startline="352" endline="371">_dbus_message_remove_counter</references>
        <references refid="group__DBusObjectTree_1ga1c51e43233ce0f3855c128f2555317eb" compoundref="dbus-object-tree_8c" startline="718" endline="724">_dbus_object_tree_free_all_unlocked</references>
        <references refid="group__DBusObjectTree_1ga7639e273ab160c422a7cef0cda60ded5" compoundref="dbus-object-tree_8c" startline="143" endline="155">_dbus_object_tree_unref</references>
        <references refid="group__DBusThreadsInternals_1gae1c95a3f47bcc78d32fc0a5a8ed37c91" compoundref="dbus-threads_8c" startline="94" endline="101">_dbus_rmutex_free_at_location</references>
        <references refid="group__DBusTimeoutInternals_1ga1b399ef2d7f128e59bb32dbb5b590e1b" compoundref="dbus-timeout_8c" startline="211" endline="223">_dbus_timeout_list_free</references>
        <references refid="group__DBusTransport_1gaceee4b098b0177870ad934daad90a9c6" compoundref="dbus-transport_8c" startline="527" endline="530">_dbus_transport_get_is_connected</references>
        <references refid="group__DBusTransport_1gab7c53c32a2320c81aae8ce4345762e73" compoundref="dbus-transport_8c" startline="477" endline="491">_dbus_transport_unref</references>
        <references refid="group__DBusWatchInternals_1gac3f75c0da2c8c51e8708f45dd27f9e2d" compoundref="dbus-watch_8c" startline="249" endline="260">_dbus_watch_list_free</references>
        <references refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" compoundref="dbus-list_8h" startline="38">DBusList::data</references>
        <references refid="group__DBusConnection_1ga55ff88cd22c0672441c7deffbfb68fbf" compoundref="dbus-connection_8c" startline="5073" endline="5096">dbus_connection_set_dispatch_status_function</references>
        <references refid="group__DBusConnection_1ga6b78379badb4c5804344f4f3d87a958a" compoundref="dbus-connection_8c" startline="5305" endline="5323">dbus_connection_set_unix_user_function</references>
        <references refid="group__DBusConnection_1ga2b1df13251c7ec348bcba39c0924e881" compoundref="dbus-connection_8c" startline="5027" endline="5050">dbus_connection_set_wakeup_main_function</references>
        <references refid="group__DBusConnection_1gaa35ced9ccd29d3366749ae383b120f9c" compoundref="dbus-connection_8c" startline="5404" endline="5422">dbus_connection_set_windows_user_function</references>
        <references refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" compoundref="dbus-memory_8c" startline="701" endline="740">dbus_free</references>
        <references refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" compoundref="dbus-message_8c" startline="1690" endline="1709">dbus_message_unref</references>
        <references refid="structDBusConnection_1aa70afc41f6184604c027e7f71a314d7f" compoundref="dbus-connection_8c" startline="292">DBusConnection::disconnect_message_link</references>
        <references refid="structDBusConnection_1a201f92bbc0947b503a36eaff9ae0ede9" compoundref="dbus-connection_8c" startline="263">DBusConnection::dispatch_cond</references>
        <references refid="structDBusConnection_1ad9e7bf73a48f4951b24ce8eec7bb7ac5" compoundref="dbus-connection_8c" startline="262">DBusConnection::dispatch_mutex</references>
        <references refid="structDBusConnection_1a32d14cefcb4daea257544397755d45ed" compoundref="dbus-connection_8c" startline="284">DBusConnection::filter_list</references>
        <references refid="structDBusMessageFilter_1a56b3643122277ed5dc3d4f07793617fa" compoundref="dbus-connection_8c" startline="231">DBusMessageFilter::function</references>
        <references refid="structDBusConnection_1aacb3a29956aa7712db37916194fde869" compoundref="dbus-connection_8c" startline="268">DBusConnection::incoming_messages</references>
        <references refid="structDBusConnection_1a6d87e03eea7aaff53f5574efcfb8c3e4" compoundref="dbus-connection_8c" startline="265">DBusConnection::io_path_cond</references>
        <references refid="structDBusConnection_1aaad1c7d6e6ba3e049ef790f4f9aa35cd" compoundref="dbus-connection_8c" startline="264">DBusConnection::io_path_mutex</references>
        <references refid="structDBusConnection_1a98e26cfd09ddbf0238f90bf4965641bf" compoundref="dbus-connection_8c" startline="260">DBusConnection::mutex</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" compoundref="dbus-connection_8c" startline="304">DBusConnection::objects</references>
        <references refid="structDBusConnection_1a5dcb660883904035076579c6d2f46501" compoundref="dbus-connection_8c" startline="278">DBusConnection::outgoing_counter</references>
        <references refid="structDBusConnection_1a714fd51af8730c367b079594c7f756ae" compoundref="dbus-connection_8c" startline="267">DBusConnection::outgoing_messages</references>
        <references refid="structDBusConnection_1ad8fa077f91fe62d0c10862e2ff9e86ca" compoundref="dbus-connection_8c" startline="289">DBusConnection::pending_replies</references>
        <references refid="structDBusConnection_1a6fbf0227071fc20ffd5b0e79aef58e92" compoundref="dbus-connection_8c" startline="258">DBusConnection::refcount</references>
        <references refid="structDBusConnection_1ad1abb7ad98db87f32b4abda22df075bd" compoundref="dbus-connection_8c" startline="306">DBusConnection::server_guid</references>
        <references refid="structDBusConnection_1a0f805edcd9c09aaf45974510403dccbd" compoundref="dbus-connection_8c" startline="287">DBusConnection::slot_list</references>
        <references refid="structDBusConnection_1a773fb4ecd2738548dbbfbe6d1206da92" compoundref="dbus-connection_8c" startline="286">DBusConnection::slot_mutex</references>
        <references refid="structDBusConnection_1af3936ac5c968f2ac09bf05cf36025994" compoundref="dbus-connection_8c" startline="282">DBusConnection::timeouts</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
        <references refid="structDBusConnection_1abdb6a32972d924531fb2cd80c7fd6d37" compoundref="dbus-connection_8c" startline="281">DBusConnection::watches</references>
        <referencedby refid="group__DBusBusInternals_1ga0e7fe5d0dcaca7ecb4b5a7ace23d6286" compoundref="dbus-bus_8c" startline="387" endline="413">_dbus_bus_notify_shared_connection_disconnected_unlocked</referencedby>
        <referencedby refid="group__DBusConnectionInternals_1ga12756797bd5c1918aa065f9c37ed7bba" compoundref="dbus-connection_8c" startline="1486" endline="1525">_dbus_connection_handle_watch</referencedby>
        <referencedby refid="group__DBusConnection_1ga10e68d9d2f41d655a4151ddeb807ff54" compoundref="dbus-connection_8c" startline="3641" endline="3661">dbus_connection_flush</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_unref</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_unref</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Decrements the reference count of a <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref>, and finalizes it if the count reaches zero. </para>        </briefdescription>
        <detaileddescription>
<para>Note: it is a bug to drop the last reference to a connection that is still connected.</para><para>For shared connections, libdbus will own a reference as long as the connection is connected, so you can know that either you don&apos;t have the last reference, or it&apos;s OK to drop the last reference. Most connections are shared. <ref refid="group__DBusConnection_1gacd32f819820266598c6b6847dfddaf9c" kindref="member">dbus_connection_open()</ref> and <ref refid="group__DBusBus_1ga77ba5250adb84620f16007e1b023cf26" kindref="member">dbus_bus_get()</ref> return shared connections.</para><para>For private connections, the creator of the connection must arrange for <ref refid="group__DBusConnection_1ga2522ac5075dfe0a1535471f6e045e1ee" kindref="member">dbus_connection_close()</ref> to be called prior to dropping the last reference. Private connections come from <ref refid="group__DBusConnection_1ga434e3fc7ee420fd30e2f05e57ff26b1d" kindref="member">dbus_connection_open_private()</ref> or <ref refid="group__DBusBus_1ga9c62186f19cf3bd3c7c604bdcefb4e09" kindref="member">dbus_bus_get_private()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="2817" column="1" bodyfile="dbus/dbus-connection.c" bodystart="2817" bodyend="2843"/>
        <references refid="group__DBusSysdeps_1ga3c50a069f795dceeb9172fe2b517bbdc" compoundref="dbus-sysdeps-unix_8c" startline="2585" endline="2599">_dbus_atomic_dec</references>
        <references refid="group__DBusConnectionInternals_1ga7151f75b5d2308ec80cfe893aba72aa1" compoundref="dbus-connection_8c" startline="1419" endline="1433">_dbus_connection_ref_unlocked</references>
        <references refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" compoundref="dbus-memory_8c" startline="781">_dbus_current_generation</references>
        <references refid="group__DBusTransport_1ga78444dd8f6c6d6b429433ad81c3e318a" compoundref="dbus-transport_8c" startline="502" endline="516">_dbus_transport_disconnect</references>
        <references refid="group__DBusTransport_1gaceee4b098b0177870ad934daad90a9c6" compoundref="dbus-transport_8c" startline="527" endline="530">_dbus_transport_get_is_connected</references>
        <references refid="group__DBusInternalsUtils_1ga63f2f8a068454b781f214ba596e313b4" compoundref="dbus-internals_8c" startline="258" endline="277">_dbus_warn_check_failed</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a6fbf0227071fc20ffd5b0e79aef58e92" compoundref="dbus-connection_8c" startline="258">DBusConnection::refcount</references>
        <references refid="structDBusConnection_1aae47138b9b2494b65072ff300d631aa8" compoundref="dbus-connection_8c" startline="315">DBusConnection::shareable</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
        <referencedby refid="group__DBusBusInternals_1ga0e7fe5d0dcaca7ecb4b5a7ace23d6286" compoundref="dbus-bus_8c" startline="387" endline="413">_dbus_bus_notify_shared_connection_disconnected_unlocked</referencedby>
        <referencedby refid="group__DBusConnectionInternals_1ga12756797bd5c1918aa065f9c37ed7bba" compoundref="dbus-connection_8c" startline="1486" endline="1525">_dbus_connection_handle_watch</referencedby>
        <referencedby refid="group__DBusObjectTree_1ga3babe73ed342b6963997ef2efd73ef75" compoundref="dbus-object-tree_8c" startline="623" endline="677">_dbus_object_tree_unregister_and_unlock</referencedby>
        <referencedby refid="group__DBusPendingCallInternals_1ga9d8987da3747604d370ffec2c5e1e10a" compoundref="dbus-pending-call_8c" startline="394" endline="403">_dbus_pending_call_ref_unlocked</referencedby>
        <referencedby refid="group__DBusTransportUnix_1gafd694944860033155276df9162bdf72e" compoundref="dbus-transport-unix_8c" startline="225" endline="411">_dbus_transport_open_platform_specific</referencedby>
        <referencedby refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" compoundref="dbus-connection_8c" startline="4549" endline="4862">dbus_connection_dispatch</referencedby>
        <referencedby refid="group__DBusConnection_1ga10e68d9d2f41d655a4151ddeb807ff54" compoundref="dbus-connection_8c" startline="3641" endline="3661">dbus_connection_flush</referencedby>
        <referencedby refid="group__DBusConnection_1ga1e40d994ea162ce767e78de1c4988566" compoundref="dbus-connection_8c" startline="4091" endline="4119">dbus_connection_pop_message</referencedby>
        <referencedby refid="group__DBusConnection_1gae1cb64f4cf550949b23fd3a756b2f7d0" compoundref="dbus-connection_8c" startline="3302" endline="3328">dbus_connection_send</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga2522ac5075dfe0a1535471f6e045e1ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_close</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_close</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Closes a private connection, so no further data can be sent or received. </para>        </briefdescription>
        <detaileddescription>
<para>This disconnects the transport (such as a socket) underlying the connection.</para><para>Attempts to send messages after closing a connection are safe, but will result in error replies generated locally in libdbus.</para><para>This function does not affect the connection&apos;s reference count. It&apos;s safe to close a connection more than once; all calls after the first do nothing. It&apos;s impossible to &quot;reopen&quot; a connection, a new connection must be created. This function may result in a call to the DBusDispatchStatusFunction set with <ref refid="group__DBusConnection_1ga55ff88cd22c0672441c7deffbfb68fbf" kindref="member">dbus_connection_set_dispatch_status_function()</ref>, as the disconnect message it generates needs to be dispatched.</para><para>If a connection is dropped by the remote application, it will close itself.</para><para>You must close a connection prior to releasing the last reference to the connection. If you <ref refid="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" kindref="member">dbus_connection_unref()</ref> for the last time without closing the connection, the results are undefined; it is a bug in your program and libdbus will try to print a warning.</para><para>You may not close a shared connection. Connections created with <ref refid="group__DBusConnection_1gacd32f819820266598c6b6847dfddaf9c" kindref="member">dbus_connection_open()</ref> or <ref refid="group__DBusBus_1ga77ba5250adb84620f16007e1b023cf26" kindref="member">dbus_bus_get()</ref> are shared. These connections are owned by libdbus, and applications should only unref them, never close them. Applications can know it is safe to unref these connections because libdbus will be holding a reference as long as the connection is open. Thus, either the connection is closed and it is OK to drop the last reference, or the connection is open and the app knows it does not have the last reference.</para><para>Connections created with <ref refid="group__DBusConnection_1ga434e3fc7ee420fd30e2f05e57ff26b1d" kindref="member">dbus_connection_open_private()</ref> or <ref refid="group__DBusBus_1ga9c62186f19cf3bd3c7c604bdcefb4e09" kindref="member">dbus_bus_get_private()</ref> are not kept track of or referenced by libdbus. The creator of these connections is responsible for calling <ref refid="group__DBusConnection_1ga2522ac5075dfe0a1535471f6e045e1ee" kindref="member">dbus_connection_close()</ref> prior to releasing the last reference, if the connection is not already disconnected.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the private (unshared) connection to close </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="2932" column="1" bodyfile="dbus/dbus-connection.c" bodystart="2932" bodyend="2950"/>
        <references refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" compoundref="dbus-memory_8c" startline="781">_dbus_current_generation</references>
        <references refid="group__DBusTransport_1gaceee4b098b0177870ad934daad90a9c6" compoundref="dbus-transport_8c" startline="527" endline="530">_dbus_transport_get_is_connected</references>
        <references refid="group__DBusInternalsUtils_1ga63f2f8a068454b781f214ba596e313b4" compoundref="dbus-internals_8c" startline="258" endline="277">_dbus_warn_check_failed</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1aae47138b9b2494b65072ff300d631aa8" compoundref="dbus-connection_8c" startline="315">DBusConnection::shareable</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga611ae94556af36fe30bfb547366ca4e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_get_is_connected</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_get_is_connected</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Gets whether the connection is currently open. </para>        </briefdescription>
        <detaileddescription>
<para>A connection may become disconnected when the remote application closes its end, or exits; a connection may also be disconnected with <ref refid="group__DBusConnection_1ga2522ac5075dfe0a1535471f6e045e1ee" kindref="member">dbus_connection_close()</ref>.</para><para>There are not separate states for &quot;closed&quot; and &quot;disconnected,&quot; the two terms are synonymous. This function should really be called get_is_open() but for historical reasons is not.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the connection is still alive. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="2973" column="1" bodyfile="dbus/dbus-connection.c" bodystart="2973" bodyend="2984"/>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga2f1fa02c9897b6f07f4d33c862de4a1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_get_is_authenticated</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_get_is_authenticated</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Gets whether the connection was authenticated. </para>        </briefdescription>
        <detaileddescription>
<para>(Note that if the connection was authenticated then disconnected, this function still returns <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the connection was ever authenticated </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="2995" column="1" bodyfile="dbus/dbus-connection.c" bodystart="2995" bodyend="3006"/>
        <references refid="group__DBusTransport_1gabe774b134a4bf8c8fc09e6186470874f" compoundref="dbus-transport_8c" startline="724" endline="812">_dbus_transport_try_to_authenticate</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gaa6c5d523e16d8a5b9316c92d9ff1ac17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_get_is_anonymous</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_get_is_anonymous</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Gets whether the connection is not authenticated as a specific user. </para>        </briefdescription>
        <detaileddescription>
<para>If the connection is not authenticated, this function returns <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>, and if it is authenticated but as an anonymous user, it returns <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>. If it is authenticated as a specific user, then this returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>. (Note that if the connection was authenticated as anonymous then disconnected, this function still returns <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>.)</para><para>If the connection is not anonymous, you can use <ref refid="group__DBusConnection_1gaef670c3a8170ab9c719ec955252459d0" kindref="member">dbus_connection_get_unix_user()</ref> and <ref refid="group__DBusConnection_1ga2b3cb488f1922aeecdeafdcb110e91a8" kindref="member">dbus_connection_get_windows_user()</ref> to see who it&apos;s authorized as.</para><para>If you want to prevent non-anonymous authorization, use <ref refid="group__DBusServer_1ga309e5f1510c74c4b221d12d874d53341" kindref="member">dbus_server_set_auth_mechanisms()</ref> to remove the mechanisms that allow proving user identity (i.e. only allow the ANONYMOUS mechanism).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if not authenticated or authenticated as anonymous </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="3029" column="1" bodyfile="dbus/dbus-connection.c" bodystart="3029" bodyend="3040"/>
        <references refid="group__DBusTransport_1gaf0588dd4a6d1c556dd885d4c67622399" compoundref="dbus-transport_8c" startline="821" endline="834">_dbus_transport_get_is_anonymous</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gae6c19e146a37f9de6a06c1617874bed9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>DBUS_EXPORT char * dbus_connection_get_server_id</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_get_server_id</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Gets the ID of the server address we are authenticated to, if this connection is on the client side. </para>        </briefdescription>
        <detaileddescription>
<para>If the connection is on the server side, this will always return <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> - use <ref refid="group__DBusServer_1ga3b2920b3c65836113781d9dd00d1e139" kindref="member">dbus_server_get_id()</ref> to get the ID of your own server, if you are the server side.</para><para>If a client-side connection is not authenticated yet, the ID may be available if it was included in the server address, but may not be available. The only way to be sure the server ID is available is to wait for authentication to complete.</para><para>In general, each mode of connecting to a given server will have its own ID. So for example, if the session bus daemon is listening on UNIX domain sockets and on TCP, then each of those modalities will have its own server ID.</para><para>If you want an ID that identifies an entire session bus, look at <ref refid="group__DBusBus_1ga18314500e7f6890a79bddbeace5df5f9" kindref="member">dbus_bus_get_id()</ref> instead (which is just a convenience wrapper around the org.freedesktop.DBus.GetId method invoked on the bus).</para><para>You can also get a machine ID; see <ref refid="group__DBusMisc_1ga2b21c9a12fea5f92763441c65ccbfcf9" kindref="member">dbus_get_local_machine_id()</ref> to get the machine you are on. There isn&apos;t a convenience wrapper, but you can invoke org.freedesktop.DBus.Peer.GetMachineId on any peer to get the machine ID on the other end.</para><para>The D-Bus specification describes the server ID and other IDs in a bit more detail.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the server ID or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if no memory or the connection is server-side </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="3074" column="1" bodyfile="dbus/dbus-connection.c" bodystart="3074" bodyend="3085"/>
        <references refid="group__DBusInternalsUtils_1ga9d00d77f6595b9d7ac1baf59d44bf58c" compoundref="dbus-internals_8c" startline="527" endline="544">_dbus_strdup</references>
        <references refid="group__DBusTransport_1ga920abde00e77a970330fa3fc552fe7ea" compoundref="dbus-transport_8c" startline="869" endline="877">_dbus_transport_get_server_id</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga3e41509b3afdbc22872bacc5754e85c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_can_send_type</definition>
        <argsstring>(DBusConnection *connection, int type)</argsstring>
        <name>dbus_connection_can_send_type</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Tests whether a certain type can be send via the connection. </para>        </briefdescription>
        <detaileddescription>
<para>This will always return TRUE for all types, with the exception of DBUS_TYPE_UNIX_FD. The function will return TRUE for DBUS_TYPE_UNIX_FD only on systems that know Unix file descriptors and can send them via the chosen transport and when the remote side supports this.</para><para>This function can be used to do runtime checking for types that might be unknown to the specific D-Bus client implementation version, i.e. it will return FALSE for all types this implementation does not know, including invalid or reserved types.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type to check </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if the type may be send via the connection </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="3105" column="1" bodyfile="dbus/dbus-connection.c" bodystart="3105" bodyend="3129"/>
        <references refid="group__DBusTransport_1gab98dc7cad59472a4513489628f1393f1" compoundref="dbus-transport_8c" startline="843" endline="846">_dbus_transport_can_pass_unix_fd</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusSignature_1ga7093ae3b35eb073dab939dae69b8c689" compoundref="dbus-signature_8c" startline="383" endline="409">dbus_type_is_valid</references>
        <references refid="group__DBusProtocol_1ga59f8acaeb207b182982dfb97174b7f16" compoundref="dbus-protocol_8h" startline="114">DBUS_TYPE_UNIX_FD</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga19091beb74f1504b0e862a7ad10e71cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_set_exit_on_disconnect</definition>
        <argsstring>(DBusConnection *connection, dbus_bool_t exit_on_disconnect)</argsstring>
        <name>dbus_connection_set_exit_on_disconnect</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
          <declname>exit_on_disconnect</declname>
        </param>
        <briefdescription>
<para>Set whether _exit() should be called when the connection receives a disconnect signal. </para>        </briefdescription>
        <detaileddescription>
<para>The call to _exit() comes after any handlers for the disconnect signal run; handlers can cancel the exit by calling this function.</para><para>By default, exit_on_disconnect is <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>; but for message bus connections returned from <ref refid="group__DBusBus_1ga77ba5250adb84620f16007e1b023cf26" kindref="member">dbus_bus_get()</ref> it will be toggled on by default.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exit_on_disconnect</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if _exit() should be called after a disconnect signal </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="3145" column="1" bodyfile="dbus/dbus-connection.c" bodystart="3145" bodyend="3153"/>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="structDBusConnection_1a2a9f22339f90157f308a532462218404" compoundref="dbus-connection_8c" startline="317">DBusConnection::exit_on_disconnect</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusBusInternals_1ga0e7fe5d0dcaca7ecb4b5a7ace23d6286" compoundref="dbus-bus_8c" startline="387" endline="413">_dbus_bus_notify_shared_connection_disconnected_unlocked</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga10e68d9d2f41d655a4151ddeb807ff54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_flush</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_flush</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Blocks until the outgoing message queue is empty. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="3641" column="1" bodyfile="dbus/dbus-connection.c" bodystart="3641" bodyend="3661"/>
        <references refid="group__DBusConnectionInternals_1ga283f0254537c4bf4453dbed6fad2e21e" compoundref="dbus-connection_8c" startline="1198" endline="1237">_dbus_connection_do_iteration_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" compoundref="dbus-connection_8c" startline="4549" endline="4862">dbus_connection_dispatch</references>
        <references refid="group__DBusConnection_1ga893d18d8b36ffb371f16d13645071289" compoundref="dbus-connection_8c" startline="4378" endline="4393">dbus_connection_get_dispatch_status</references>
        <references refid="group__DBusConnection_1gae34751e15f114217e5ad10c663e2ef2e" compoundref="dbus-connection_8c" startline="2681" endline="2692">dbus_connection_ref</references>
        <references refid="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" compoundref="dbus-connection_8c" startline="2817" endline="2843">dbus_connection_unref</references>
        <references refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" compoundref="dbus-connection_8h" startline="81">DBUS_DISPATCH_DATA_REMAINS</references>
        <references refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2a5af20a035f29cfa67fb8d69fb693b685" compoundref="dbus-connection_8h" startline="83">DBUS_DISPATCH_NEED_MEMORY</references>
        <references refid="structDBusConnection_1aa70afc41f6184604c027e7f71a314d7f" compoundref="dbus-connection_8c" startline="292">DBusConnection::disconnect_message_link</references>
        <references refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" compoundref="dbus-connection_8c" startline="276">DBusConnection::n_incoming</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga580d8766c23fe5f49418bc7d87b67dc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_read_write_dispatch</definition>
        <argsstring>(DBusConnection *connection, int timeout_milliseconds)</argsstring>
        <name>dbus_connection_read_write_dispatch</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout_milliseconds</declname>
        </param>
        <briefdescription>
<para>This function is intended for use with applications that don&apos;t want to write a main loop and deal with <ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> and <ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>An example usage would be:</para><para><programlisting><codeline><highlight class="normal">while<sp/>(dbus_connection_read_write_dispatch<sp/>(connection,<sp/>-1))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>;<sp/>//<sp/>empty<sp/>loop<sp/>body</highlight></codeline>
</programlisting></para><para>In this usage you would normally have set up a filter function to look at each message as it is dispatched. The loop terminates when the last message from the connection (the disconnected signal) is processed.</para><para>If there are messages to dispatch, this function will <ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref> once, and return. If there are no messages to dispatch, this function will block until it can read or write, then read or write, then return.</para><para>The way to think of this function is that it either makes some sort of progress, or it blocks. Note that, while it is blocked on I/O, it cannot be interrupted (even by other threads), which makes this function unsuitable for applications that do more than just react to received messages.</para><para>The return value indicates whether the disconnect message has been processed, NOT whether the connection is connected. This is important because even after disconnecting, you want to process any messages you received prior to the disconnect.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_milliseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>max time to block or -1 for infinite </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the disconnect message has not been processed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="3769" column="1" bodyfile="dbus/dbus-connection.c" bodystart="3769" bodyend="3775"/>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga371163b4955a6e0bf0f1f70f38390c14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_read_write</definition>
        <argsstring>(DBusConnection *connection, int timeout_milliseconds)</argsstring>
        <name>dbus_connection_read_write</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout_milliseconds</declname>
        </param>
        <briefdescription>
<para>This function is intended for use with applications that don&apos;t want to write a main loop and deal with <ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> and <ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>See also <ref refid="group__DBusConnection_1ga580d8766c23fe5f49418bc7d87b67dc6" kindref="member">dbus_connection_read_write_dispatch()</ref>.</para><para>As long as the connection is open, this function will block until it can read or write, then read or write, then return <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>.</para><para>If the connection is closed, the function returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>.</para><para>The return value indicates whether reading or writing is still possible, i.e. whether the connection is connected.</para><para>Note that even after disconnection, messages may remain in the incoming queue that need to be processed. <ref refid="group__DBusConnection_1ga580d8766c23fe5f49418bc7d87b67dc6" kindref="member">dbus_connection_read_write_dispatch()</ref> dispatches incoming messages for you; with <ref refid="group__DBusConnection_1ga371163b4955a6e0bf0f1f70f38390c14" kindref="member">dbus_connection_read_write()</ref> you have to arrange to drain the incoming queue yourself.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_milliseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>max time to block or -1 for infinite </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if still connected </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="3801" column="1" bodyfile="dbus/dbus-connection.c" bodystart="3801" bodyend="3807"/>
        <references refid="group__DBusShared_1ga9ef6478aae637449ec0c5de1679f75ce" compoundref="dbus-shared_8h" startline="100">DBUS_INTERFACE_LOCAL</references>
        <references refid="group__DBusMessage_1gaed0e32329f142cc246662227c81d5d1f" compoundref="dbus-message_8c" startline="3630" endline="3644">dbus_message_is_signal</references>
        <references refid="structDBusConnection_1aa70afc41f6184604c027e7f71a314d7f" compoundref="dbus-connection_8c" startline="292">DBusConnection::disconnect_message_link</references>
        <references refid="structDBusConnection_1a48d141d4311211e921571043bdbaeefb" compoundref="dbus-connection_8c" startline="321">DBusConnection::disconnected_message_arrived</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga9d07083c520e291591a68adb78f64094" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
        <definition>DBUS_EXPORT DBusMessage * dbus_connection_borrow_message</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_borrow_message</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Returns the first-received message from the incoming message queue, leaving it in the queue. </para>        </briefdescription>
        <detaileddescription>
<para>If the queue is empty, returns <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>.</para><para>The caller does not own a reference to the returned message, and must either return it using <ref refid="group__DBusConnection_1ga0586da03a01c9c6f332fbea900ef55e3" kindref="member">dbus_connection_return_message()</ref> or keep it after calling <ref refid="group__DBusConnection_1ga7125d747575b2f596aceaf7be53eae68" kindref="member">dbus_connection_steal_borrowed_message()</ref>. No one can get at the message while its borrowed, so return it as quickly as possible and don&apos;t keep a reference to it after returning it. If you need to keep the message, make a copy of it.</para><para><ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref> will block if called while a borrowed message is outstanding; only one piece of code can be playing with the incoming queue at a time. This function will block if called during a <ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>next message in the incoming queue. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="3850" column="1" bodyfile="dbus/dbus-connection.c" bodystart="3850" bodyend="3890"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusList_1ga254e18f698f5fc518bde031e723e67c6" compoundref="dbus-list_8c" startline="612" endline="618">_dbus_list_get_first</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusConnection_1ga893d18d8b36ffb371f16d13645071289" compoundref="dbus-connection_8c" startline="4378" endline="4393">dbus_connection_get_dispatch_status</references>
        <references refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" compoundref="dbus-connection_8h" startline="81">DBUS_DISPATCH_DATA_REMAINS</references>
        <references refid="structDBusConnection_1aacb3a29956aa7712db37916194fde869" compoundref="dbus-connection_8c" startline="268">DBusConnection::incoming_messages</references>
        <references refid="structDBusConnection_1aef492b411cd2ebd214f8e4dd15e154af" compoundref="dbus-connection_8c" startline="271">DBusConnection::message_borrowed</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga0586da03a01c9c6f332fbea900ef55e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_return_message</definition>
        <argsstring>(DBusConnection *connection, DBusMessage *message)</argsstring>
        <name>dbus_connection_return_message</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Used to return a message after peeking at it using <ref refid="group__DBusConnection_1ga9d07083c520e291591a68adb78f64094" kindref="member">dbus_connection_borrow_message()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Only called if message from <ref refid="group__DBusConnection_1ga9d07083c520e291591a68adb78f64094" kindref="member">dbus_connection_borrow_message()</ref> was non-<ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the message from <ref refid="group__DBusConnection_1ga9d07083c520e291591a68adb78f64094" kindref="member">dbus_connection_borrow_message()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="3901" column="1" bodyfile="dbus/dbus-connection.c" bodystart="3901" bodyend="3923"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="structDBusConnection_1a11803a01d74d956ef37e6aa092f0cf17" compoundref="dbus-connection_8c" startline="312">DBusConnection::dispatch_acquired</references>
        <references refid="structDBusConnection_1aef492b411cd2ebd214f8e4dd15e154af" compoundref="dbus-connection_8c" startline="271">DBusConnection::message_borrowed</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga7125d747575b2f596aceaf7be53eae68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_steal_borrowed_message</definition>
        <argsstring>(DBusConnection *connection, DBusMessage *message)</argsstring>
        <name>dbus_connection_steal_borrowed_message</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Used to keep a message after peeking at it using <ref refid="group__DBusConnection_1ga9d07083c520e291591a68adb78f64094" kindref="member">dbus_connection_borrow_message()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Before using this function, see the caveats/warnings in the documentation for <ref refid="group__DBusConnection_1ga1e40d994ea162ce767e78de1c4988566" kindref="member">dbus_connection_pop_message()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the message from <ref refid="group__DBusConnection_1ga9d07083c520e291591a68adb78f64094" kindref="member">dbus_connection_borrow_message()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="3935" column="1" bodyfile="dbus/dbus-connection.c" bodystart="3935" bodyend="3967"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusList_1ga6e824f717125ce40c549d5402e32610f" compoundref="dbus-list_8c" startline="254" endline="257">_dbus_list_free_link</references>
        <references refid="group__DBusList_1gacb96c9d3e9a869e63b8db4f8913a5a60" compoundref="dbus-list_8c" startline="649" endline="662">_dbus_list_pop_first</references>
        <references refid="group__DBusList_1gaab9a957eca9bf5466bbf377a23b4b25c" compoundref="dbus-list_8c" startline="628" endline="639">_dbus_list_pop_first_link</references>
        <references refid="group__DBusList_1gab3dd068e3bd8a319c0d12150785050a7" compoundref="dbus-list_8c" startline="333" endline="337">_dbus_list_prepend_link</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" compoundref="dbus-list_8h" startline="38">DBusList::data</references>
        <references refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" compoundref="dbus-message_8c" startline="3227" endline="3239">dbus_message_get_interface</references>
        <references refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" compoundref="dbus-message_8c" startline="3313" endline="3325">dbus_message_get_member</references>
        <references refid="group__DBusMessage_1ga18adf731bb42d324fe2624407319e4af" compoundref="dbus-message_8c" startline="3096" endline="3108">dbus_message_get_path</references>
        <references refid="group__DBusMessage_1ga390710c25564c80025a006c376da2030" compoundref="dbus-message_8c" startline="1127" endline="1132">dbus_message_get_serial</references>
        <references refid="group__DBusMessage_1gaed63e4c2baaa50d782e8ebb7643def19" compoundref="dbus-message_8c" startline="3543" endline="3553">dbus_message_get_signature</references>
        <references refid="group__DBusMessage_1ga41cace31999105137772b6257ea540f9" compoundref="dbus-message_8c" startline="1722" endline="1727">dbus_message_get_type</references>
        <references refid="group__DBusMessageInternals_1ga75bcb613a291eb7e427f77f2f3635b8f" compoundref="dbus-message_8c" startline="4691" endline="4706">dbus_message_type_to_string</references>
        <references refid="structDBusConnection_1a11803a01d74d956ef37e6aa092f0cf17" compoundref="dbus-connection_8c" startline="312">DBusConnection::dispatch_acquired</references>
        <references refid="structDBusConnection_1aacb3a29956aa7712db37916194fde869" compoundref="dbus-connection_8c" startline="268">DBusConnection::incoming_messages</references>
        <references refid="structDBusConnection_1aef492b411cd2ebd214f8e4dd15e154af" compoundref="dbus-connection_8c" startline="271">DBusConnection::message_borrowed</references>
        <references refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" compoundref="dbus-connection_8c" startline="276">DBusConnection::n_incoming</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga1e40d994ea162ce767e78de1c4988566" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
        <definition>DBUS_EXPORT DBusMessage * dbus_connection_pop_message</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_pop_message</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Returns the first-received message from the incoming message queue, removing it from the queue. </para>        </briefdescription>
        <detaileddescription>
<para>The caller owns a reference to the returned message. If the queue is empty, returns <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>.</para><para>This function bypasses any message handlers that are registered, and so using it is usually wrong. Instead, let the main loop invoke <ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref>. Popping messages manually is only useful in very simple programs that don&apos;t share a <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> with any libraries or other modules.</para><para>There is a lock that covers all ways of accessing the incoming message queue, so <ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref>, <ref refid="group__DBusConnection_1ga1e40d994ea162ce767e78de1c4988566" kindref="member">dbus_connection_pop_message()</ref>, <ref refid="group__DBusConnection_1ga9d07083c520e291591a68adb78f64094" kindref="member">dbus_connection_borrow_message()</ref>, etc. will all block while one of the others in the group is running.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>next message in the incoming queue. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="4091" column="1" bodyfile="dbus/dbus-connection.c" bodystart="4091" bodyend="4119"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusInternalsUtils_1ga0c4961ec784874f1b1f3aeccea8d3da1" compoundref="dbus-internals_8h" startline="145">_dbus_assert_not_reached</references>
        <references refid="group__DBusBusInternals_1ga0e7fe5d0dcaca7ecb4b5a7ace23d6286" compoundref="dbus-bus_8c" startline="387" endline="413">_dbus_bus_notify_shared_connection_disconnected_unlocked</references>
        <references refid="group__DBusThreadsInternals_1gabea1bdc19c155bca909839090c05eee2" compoundref="dbus-threads_8c" startline="136" endline="142">_dbus_cmutex_lock</references>
        <references refid="group__DBusThreadsInternals_1gad199edcd1bb88cfd2e9dcfb47cbc732f" compoundref="dbus-threads_8c" startline="164" endline="170">_dbus_cmutex_unlock</references>
        <references refid="group__DBusThreadsInternals_1ga6938b8a4547ce48290615990f64bd3bb" compoundref="dbus-threads_8c" startline="240" endline="247">_dbus_condvar_wait</references>
        <references refid="group__DBusThreadsInternals_1ga8af2fd84773022e7e7ce1f21f0126203" compoundref="dbus-threads_8c" startline="278" endline="284">_dbus_condvar_wake_one</references>
        <references refid="group__DBusConnectionInternals_1gab93fd3666217ee339c4d2e8d4d33e63c" compoundref="dbus-connection_8c" startline="625" endline="667">_dbus_connection_message_sent_unlocked</references>
        <references refid="group__DBusConnectionInternals_1gadb7a525dc6b566b575ee4f9b20028b04" compoundref="dbus-connection_8c" startline="545" endline="561">_dbus_connection_queue_synthesized_message_link</references>
        <references refid="group__DBusConnectionInternals_1ga7151f75b5d2308ec80cfe893aba72aa1" compoundref="dbus-connection_8c" startline="1419" endline="1433">_dbus_connection_ref_unlocked</references>
        <references refid="group__DBusConnectionInternals_1ga9ffbd9aa4f07cb30d92887e956a9fd43" compoundref="dbus-connection_8c" startline="1442" endline="1457">_dbus_connection_unref_unlocked</references>
        <references refid="group__DBusSysdeps_1ga203e3257b50597a8fe7757c920474a20" compoundref="dbus-sysdeps-unix_8c" startline="2961" endline="2964">_dbus_exit</references>
        <references refid="group__DBusList_1ga42736fb02458bfffed948a509962c059" compoundref="dbus-list_8c" startline="580" endline="586">_dbus_list_get_last_link</references>
        <references refid="group__DBusList_1gab3dd068e3bd8a319c0d12150785050a7" compoundref="dbus-list_8c" startline="333" endline="337">_dbus_list_prepend_link</references>
        <references refid="group__DBusTransport_1ga32153a834758b5a88d7bde8f7a205c71" compoundref="dbus-transport_8c" startline="1101" endline="1129">_dbus_transport_get_dispatch_status</references>
        <references refid="group__DBusTransport_1gaceee4b098b0177870ad934daad90a9c6" compoundref="dbus-transport_8c" startline="527" endline="530">_dbus_transport_get_is_connected</references>
        <references refid="group__DBusTransport_1ga4046f36ecbdb75219f2b667f92e75a2b" compoundref="dbus-transport_8c" startline="1140" endline="1190">_dbus_transport_queue_messages</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" compoundref="dbus-list_8h" startline="38">DBusList::data</references>
        <references refid="group__DBusConnection_1ga893d18d8b36ffb371f16d13645071289" compoundref="dbus-connection_8c" startline="4378" endline="4393">dbus_connection_get_dispatch_status</references>
        <references refid="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" compoundref="dbus-connection_8c" startline="2817" endline="2843">dbus_connection_unref</references>
        <references refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2acb9bb9daa90f520d5fc9e84de3c5f017" compoundref="dbus-connection_8h" startline="82">DBUS_DISPATCH_COMPLETE</references>
        <references refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" compoundref="dbus-connection_8h" startline="81">DBUS_DISPATCH_DATA_REMAINS</references>
        <references refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2a5af20a035f29cfa67fb8d69fb693b685" compoundref="dbus-connection_8h" startline="83">DBUS_DISPATCH_NEED_MEMORY</references>
        <references refid="structDBusConnection_1aa70afc41f6184604c027e7f71a314d7f" compoundref="dbus-connection_8c" startline="292">DBusConnection::disconnect_message_link</references>
        <references refid="structDBusConnection_1a48d141d4311211e921571043bdbaeefb" compoundref="dbus-connection_8c" startline="321">DBusConnection::disconnected_message_arrived</references>
        <references refid="structDBusConnection_1a3b2707b9d10d0643f91a8e027ae118b5" compoundref="dbus-connection_8c" startline="325">DBusConnection::disconnected_message_processed</references>
        <references refid="structDBusConnection_1a11803a01d74d956ef37e6aa092f0cf17" compoundref="dbus-connection_8c" startline="312">DBusConnection::dispatch_acquired</references>
        <references refid="structDBusConnection_1a201f92bbc0947b503a36eaff9ae0ede9" compoundref="dbus-connection_8c" startline="263">DBusConnection::dispatch_cond</references>
        <references refid="structDBusConnection_1ad9e7bf73a48f4951b24ce8eec7bb7ac5" compoundref="dbus-connection_8c" startline="262">DBusConnection::dispatch_mutex</references>
        <references refid="structDBusConnection_1a0225f7934d1bd118ae2eeacf8a1c6f19" compoundref="dbus-connection_8c" startline="299">DBusConnection::dispatch_status_data</references>
        <references refid="structDBusConnection_1af6cbafdf80cd474c654fc226581900a2" compoundref="dbus-connection_8c" startline="298">DBusConnection::dispatch_status_function</references>
        <references refid="structDBusConnection_1a2a9f22339f90157f308a532462218404" compoundref="dbus-connection_8c" startline="317">DBusConnection::exit_on_disconnect</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusConnection_1aacb3a29956aa7712db37916194fde869" compoundref="dbus-connection_8c" startline="268">DBusConnection::incoming_messages</references>
        <references refid="structDBusConnection_1af3bbd2ecba171ebb8e952eaa030971d7" compoundref="dbus-connection_8c" startline="302">DBusConnection::last_dispatch_status</references>
        <references refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" compoundref="dbus-connection_8c" startline="276">DBusConnection::n_incoming</references>
        <references refid="structDBusConnection_1a07025e177949c5e65d5f983ac5f5e878" compoundref="dbus-connection_8c" startline="275">DBusConnection::n_outgoing</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a714fd51af8730c367b079594c7f756ae" compoundref="dbus-connection_8c" startline="267">DBusConnection::outgoing_messages</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusConnectionInternals_1ga12756797bd5c1918aa065f9c37ed7bba" compoundref="dbus-connection_8c" startline="1486" endline="1525">_dbus_connection_handle_watch</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga893d18d8b36ffb371f16d13645071289" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member">DBusDispatchStatus</ref></type>
        <definition>DBUS_EXPORT DBusDispatchStatus dbus_connection_get_dispatch_status</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_get_dispatch_status</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Gets the current state of the incoming message queue. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" kindref="member">DBUS_DISPATCH_DATA_REMAINS</ref> indicates that the message queue may contain messages. <ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2acb9bb9daa90f520d5fc9e84de3c5f017" kindref="member">DBUS_DISPATCH_COMPLETE</ref> indicates that the incoming queue is empty. <ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2a5af20a035f29cfa67fb8d69fb693b685" kindref="member">DBUS_DISPATCH_NEED_MEMORY</ref> indicates that there could be data, but we can&apos;t know for sure without more memory.</para><para>To process the incoming message queue, use <ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref> or (in rare cases) <ref refid="group__DBusConnection_1ga1e40d994ea162ce767e78de1c4988566" kindref="member">dbus_connection_pop_message()</ref>.</para><para>Note, <ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" kindref="member">DBUS_DISPATCH_DATA_REMAINS</ref> really means that either we have messages in the queue, or we have raw bytes buffered up that need to be parsed. When these bytes are parsed, they may not add up to an entire message. Thus, it&apos;s possible to see a status of <ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" kindref="member">DBUS_DISPATCH_DATA_REMAINS</ref> but not have a message yet.</para><para>In particular this happens on initial connection, because all sorts of authentication protocol stuff has to be parsed before the first message arrives.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>current dispatch status </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="4378" column="1" bodyfile="dbus/dbus-connection.c" bodystart="4378" bodyend="4393"/>
        <references refid="group__DBusInternalsUtils_1ga49ba67405d677af6cde9329ed87ea91f" compoundref="dbus-internals_8c" startline="854" endline="889">_dbus_get_local_machine_uuid_encoded</references>
        <references refid="group__DBusList_1gac20b9981531cef590d49a59240344cd8" compoundref="dbus-list_8c" startline="242" endline="245">_dbus_list_alloc_link</references>
        <references refid="group__DBusList_1ga6e824f717125ce40c549d5402e32610f" compoundref="dbus-list_8c" startline="254" endline="257">_dbus_list_free_link</references>
        <references refid="group__DBusList_1gab3dd068e3bd8a319c0d12150785050a7" compoundref="dbus-list_8c" startline="333" endline="337">_dbus_list_prepend_link</references>
        <references refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" compoundref="dbus-string_8c" startline="259" endline="277">_dbus_string_free</references>
        <references refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" compoundref="dbus-string_8c" startline="175" endline="178">_dbus_string_init</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" compoundref="dbus-list_8h" startline="38">DBusList::data</references>
        <references refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2acb9bb9daa90f520d5fc9e84de3c5f017" compoundref="dbus-connection_8h" startline="82">DBUS_DISPATCH_COMPLETE</references>
        <references refid="group__DBusProtocol_1ga46c7cbfa1806b0cccb56e9a7ca92f02b" compoundref="dbus-protocol_8h" startline="397">DBUS_ERROR_UNKNOWN_METHOD</references>
        <references refid="group__DBusShared_1gga8244b29230187624c24986c24edab1deab6df40880a8f322694f14cd2804d3f76" compoundref="dbus-shared_8h" startline="68">DBUS_HANDLER_RESULT_HANDLED</references>
        <references refid="group__DBusShared_1gga8244b29230187624c24986c24edab1dea01f00ce4578559c7b14b91256bfede7d" compoundref="dbus-shared_8h" startline="70">DBUS_HANDLER_RESULT_NEED_MEMORY</references>
        <references refid="group__DBusShared_1gga8244b29230187624c24986c24edab1deacb84b64c92055f2585fe9c29f1e5df68" compoundref="dbus-shared_8h" startline="69">DBUS_HANDLER_RESULT_NOT_YET_HANDLED</references>
        <references refid="group__DBusShared_1gaacbd4e8ccdef18c75edd0785fbcc70ef" compoundref="dbus-shared_8h" startline="94">DBUS_INTERFACE_PEER</references>
        <references refid="group__DBusMessage_1ga591f3aab5dd2c87e56e05423c2a671d9" compoundref="dbus-message_8c" startline="1792" endline="1808">dbus_message_append_args</references>
        <references refid="group__DBusMessage_1gaac65c926e6253e49aa689b4f032fad45" compoundref="dbus-message_8c" startline="3450" endline="3462">dbus_message_get_destination</references>
        <references refid="group__DBusMessage_1ga0d1debd1c101a80c386d6ec92cdb1d93" compoundref="dbus-message_8c" startline="3249" endline="3271">dbus_message_has_interface</references>
        <references refid="group__DBusMessage_1gad8bd4730941af47d8d0f9c9b00562a44" compoundref="dbus-message_8c" startline="3602" endline="3616">dbus_message_is_method_call</references>
        <references refid="group__DBusMessage_1ga2ab896965aec97fb21293affeed36232" compoundref="dbus-message_8c" startline="1470" endline="1523">dbus_message_new_error</references>
        <references refid="group__DBusMessage_1ga95142bd8288f397194ee0eefb1d27125" compoundref="dbus-message_8c" startline="1373" endline="1407">dbus_message_new_method_return</references>
        <references refid="group__DBusProtocol_1gaa9588da889743b2119dc6664712ae51e" compoundref="dbus-protocol_8h" startline="60">DBUS_TYPE_INVALID</references>
        <references refid="group__DBusProtocol_1ga7eb77066dadf5415896b44c56d93acce" compoundref="dbus-protocol_8h" startline="102">DBUS_TYPE_STRING</references>
        <references refid="structDBusConnection_1afc069c0dc7f29123d432650580aec036" compoundref="dbus-connection_8c" startline="269">DBusConnection::expired_messages</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1ab13bc36d7e6f91995768277ecbd5482c" compoundref="dbus-connection_8c" startline="319">DBusConnection::route_peer_messages</references>
        <referencedby refid="group__DBusConnection_1ga9d07083c520e291591a68adb78f64094" compoundref="dbus-connection_8c" startline="3850" endline="3890">dbus_connection_borrow_message</referencedby>
        <referencedby refid="group__DBusConnection_1ga10e68d9d2f41d655a4151ddeb807ff54" compoundref="dbus-connection_8c" startline="3641" endline="3661">dbus_connection_flush</referencedby>
        <referencedby refid="group__DBusConnection_1ga1e40d994ea162ce767e78de1c4988566" compoundref="dbus-connection_8c" startline="4091" endline="4119">dbus_connection_pop_message</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member">DBusDispatchStatus</ref></type>
        <definition>DBUS_EXPORT DBusDispatchStatus dbus_connection_dispatch</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_dispatch</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Processes any incoming data. </para>        </briefdescription>
        <detaileddescription>
<para>If there&apos;s incoming raw data that has not yet been parsed, it is parsed, which may or may not result in adding messages to the incoming queue.</para><para>The incoming data buffer is filled when the connection reads from its underlying transport (such as a socket). Reading usually happens in <ref refid="group__DBusWatch_1gac2acdb1794450ac01a43ec4c3e07ebf7" kindref="member">dbus_watch_handle()</ref> or <ref refid="group__DBusConnection_1ga371163b4955a6e0bf0f1f70f38390c14" kindref="member">dbus_connection_read_write()</ref>.</para><para>If there are complete messages in the incoming queue, <ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref> removes one message from the queue and processes it. Processing has three steps.</para><para>First, any method replies are passed to <ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> or <ref refid="group__DBusConnection_1ga8d6431f17a9e53c9446d87c2ba8409f0" kindref="member">dbus_connection_send_with_reply_and_block()</ref> in order to complete the pending method call.</para><para>Second, any filters registered with <ref refid="group__DBusConnection_1gae00f581e5487408cb294bf71826aff86" kindref="member">dbus_connection_add_filter()</ref> are run. If any filter returns <ref refid="group__DBusShared_1gga8244b29230187624c24986c24edab1deab6df40880a8f322694f14cd2804d3f76" kindref="member">DBUS_HANDLER_RESULT_HANDLED</ref> then processing stops after that filter.</para><para>Third, if the message is a method call it is forwarded to any registered object path handlers added with <ref refid="group__DBusConnection_1ga24730ca6fd2e9132873962a32df7628c" kindref="member">dbus_connection_register_object_path()</ref> or <ref refid="group__DBusConnection_1gac4473b37bfa74ccf7459959d27e7bc59" kindref="member">dbus_connection_register_fallback()</ref>.</para><para>A single call to <ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref> will process at most one message; it will not clear the entire message queue.</para><para>Be careful about calling <ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref> from inside a message handler, i.e. calling <ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref> recursively. If threads have been initialized with a recursive mutex function, then this will not deadlock; however, it can certainly confuse your application.</para><para><xrefsect id="todo_1_todo000009"><xreftitle>Todo</xreftitle><xrefdescription><para>some FIXME in here about handling DBUS_HANDLER_RESULT_NEED_MEMORY</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dispatch status, see <ref refid="group__DBusConnection_1ga893d18d8b36ffb371f16d13645071289" kindref="member">dbus_connection_get_dispatch_status()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="4549" column="1" bodyfile="dbus/dbus-connection.c" bodystart="4549" bodyend="4862"/>
        <references refid="group__DBusConnectionInternals_1ga7151f75b5d2308ec80cfe893aba72aa1" compoundref="dbus-connection_8c" startline="1419" endline="1433">_dbus_connection_ref_unlocked</references>
        <references refid="group__DBusHashTable_1ga36ff49c4c35599e6fcdadc7f6805c49e" compoundref="dbus-hash_8c" startline="1074" endline="1087">_dbus_hash_table_lookup_int</references>
        <references refid="group__DBusList_1gac20b9981531cef590d49a59240344cd8" compoundref="dbus-list_8c" startline="242" endline="245">_dbus_list_alloc_link</references>
        <references refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" compoundref="dbus-list_8c" startline="542" endline="557">_dbus_list_clear</references>
        <references refid="group__DBusList_1ga1a85785891866750c9438bc10ad0350a" compoundref="dbus-list_8c" startline="697" endline="720">_dbus_list_copy</references>
        <references refid="group__DBusList_1ga8dd69084b53361803a765e6d53d5b9d1" compoundref="dbus-list_8c" startline="759" endline="774">_dbus_list_foreach</references>
        <references refid="group__DBusList_1ga6e824f717125ce40c549d5402e32610f" compoundref="dbus-list_8c" startline="254" endline="257">_dbus_list_free_link</references>
        <references refid="group__DBusList_1ga1e26ce4fb4acb50593bd5ed2f4eeb3ae" compoundref="dbus-list_8c" startline="567" endline="570">_dbus_list_get_first_link</references>
        <references refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" compoundref="dbus-list_8h" startline="90">_dbus_list_get_next_link</references>
        <references refid="group__DBusList_1gab3dd068e3bd8a319c0d12150785050a7" compoundref="dbus-list_8c" startline="333" endline="337">_dbus_list_prepend_link</references>
        <references refid="group__DBusObjectTree_1gad660d78a12fa207d891838863dfc6ba7" compoundref="dbus-object-tree_8c" startline="903" endline="1064">_dbus_object_tree_dispatch_and_unlock</references>
        <references refid="group__DBusString_1gab0078cf7e0e5bd784ec6d6e0cc3923a2" compoundref="dbus-string_8c" startline="1113" endline="1125">_dbus_string_append_printf</references>
        <references refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" compoundref="dbus-string_8c" startline="259" endline="277">_dbus_string_free</references>
        <references refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" compoundref="dbus-string_8c" startline="175" endline="178">_dbus_string_init</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" compoundref="dbus-list_8h" startline="38">DBusList::data</references>
        <references refid="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" compoundref="dbus-connection_8c" startline="2817" endline="2843">dbus_connection_unref</references>
        <references refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2acb9bb9daa90f520d5fc9e84de3c5f017" compoundref="dbus-connection_8h" startline="82">DBUS_DISPATCH_COMPLETE</references>
        <references refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" compoundref="dbus-connection_8h" startline="81">DBUS_DISPATCH_DATA_REMAINS</references>
        <references refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2a5af20a035f29cfa67fb8d69fb693b685" compoundref="dbus-connection_8h" startline="83">DBUS_DISPATCH_NEED_MEMORY</references>
        <references refid="group__DBusProtocol_1ga46c7cbfa1806b0cccb56e9a7ca92f02b" compoundref="dbus-protocol_8h" startline="397">DBUS_ERROR_UNKNOWN_METHOD</references>
        <references refid="group__DBusProtocol_1gaa31b8b1f9226530bb41ff1b01a836f6a" compoundref="dbus-protocol_8h" startline="399">DBUS_ERROR_UNKNOWN_OBJECT</references>
        <references refid="group__DBusShared_1gga8244b29230187624c24986c24edab1deab6df40880a8f322694f14cd2804d3f76" compoundref="dbus-shared_8h" startline="68">DBUS_HANDLER_RESULT_HANDLED</references>
        <references refid="group__DBusShared_1gga8244b29230187624c24986c24edab1dea01f00ce4578559c7b14b91256bfede7d" compoundref="dbus-shared_8h" startline="70">DBUS_HANDLER_RESULT_NEED_MEMORY</references>
        <references refid="group__DBusShared_1gga8244b29230187624c24986c24edab1deacb84b64c92055f2585fe9c29f1e5df68" compoundref="dbus-shared_8h" startline="69">DBUS_HANDLER_RESULT_NOT_YET_HANDLED</references>
        <references refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" compoundref="dbus-message_8c" startline="3227" endline="3239">dbus_message_get_interface</references>
        <references refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" compoundref="dbus-message_8c" startline="3313" endline="3325">dbus_message_get_member</references>
        <references refid="group__DBusMessage_1ga94c43b2b237d842a6b91da6f94818d47" compoundref="dbus-message_8c" startline="1163" endline="1176">dbus_message_get_reply_serial</references>
        <references refid="group__DBusMessage_1gaed63e4c2baaa50d782e8ebb7643def19" compoundref="dbus-message_8c" startline="3543" endline="3553">dbus_message_get_signature</references>
        <references refid="group__DBusMessage_1ga41cace31999105137772b6257ea540f9" compoundref="dbus-message_8c" startline="1722" endline="1727">dbus_message_get_type</references>
        <references refid="group__DBusMessage_1ga2ab896965aec97fb21293affeed36232" compoundref="dbus-message_8c" startline="1470" endline="1523">dbus_message_new_error</references>
        <references refid="group__DBusProtocol_1ga09416afd76b65139eddd31e1085d9ebf" compoundref="dbus-protocol_8h" startline="234">DBUS_MESSAGE_TYPE_METHOD_CALL</references>
        <references refid="group__DBusMessageInternals_1ga75bcb613a291eb7e427f77f2f3635b8f" compoundref="dbus-message_8c" startline="4691" endline="4706">dbus_message_type_to_string</references>
        <references refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" compoundref="dbus-message_8c" startline="1690" endline="1709">dbus_message_unref</references>
        <references refid="structDBusConnection_1afc069c0dc7f29123d432650580aec036" compoundref="dbus-connection_8c" startline="269">DBusConnection::expired_messages</references>
        <references refid="structDBusConnection_1a32d14cefcb4daea257544397755d45ed" compoundref="dbus-connection_8c" startline="284">DBusConnection::filter_list</references>
        <references refid="structDBusMessageFilter_1a56b3643122277ed5dc3d4f07793617fa" compoundref="dbus-connection_8c" startline="231">DBusMessageFilter::function</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" compoundref="dbus-connection_8c" startline="304">DBusConnection::objects</references>
        <references refid="structDBusConnection_1ad8fa077f91fe62d0c10862e2ff9e86ca" compoundref="dbus-connection_8c" startline="289">DBusConnection::pending_replies</references>
        <references refid="structDBusMessageFilter_1a6cf5321325828e39da1cc8fa1b3d7153" compoundref="dbus-connection_8c" startline="232">DBusMessageFilter::user_data</references>
        <referencedby refid="group__DBusConnection_1ga10e68d9d2f41d655a4151ddeb807ff54" compoundref="dbus-connection_8c" startline="3641" endline="3661">dbus_connection_flush</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gac40563ec4c0e309d936daf3163ba9bb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DBUS_EXPORT <ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_has_messages_to_send</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_has_messages_to_send</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Checks whether there are messages in the outgoing message queue. </para>        </briefdescription>
        <detaileddescription>
<para>Use <ref refid="group__DBusConnection_1ga10e68d9d2f41d655a4151ddeb807ff54" kindref="member">dbus_connection_flush()</ref> to block until all outgoing messages have been written to the underlying transport (such as a socket).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the outgoing queue is non-empty. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="222" column="1" bodyfile="dbus/dbus-connection.c" bodystart="588" bodyend="599"/>
        <references refid="group__DBusConnectionInternals_1ga3d31a01751860b67f960dcaffb7bb4ef" compoundref="dbus-connection_8c" startline="572" endline="576">_dbus_connection_has_messages_to_send_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gae1cb64f4cf550949b23fd3a756b2f7d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_send</definition>
        <argsstring>(DBusConnection *connection, DBusMessage *message, dbus_uint32_t *serial)</argsstring>
        <name>dbus_connection_send</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1gaf513803b030613a669cc7ef199f90a8b" kindref="member">dbus_uint32_t</ref> *</type>
          <declname>serial</declname>
        </param>
        <briefdescription>
<para>Adds a message to the outgoing message queue. </para>        </briefdescription>
        <detaileddescription>
<para>Does not block to write the message to the network; that happens asynchronously. To force the message to be written, call <ref refid="group__DBusConnection_1ga10e68d9d2f41d655a4151ddeb807ff54" kindref="member">dbus_connection_flush()</ref> however it is not necessary to call <ref refid="group__DBusConnection_1ga10e68d9d2f41d655a4151ddeb807ff54" kindref="member">dbus_connection_flush()</ref> by hand; the message will be sent the next time the main loop is run. <ref refid="group__DBusConnection_1ga10e68d9d2f41d655a4151ddeb807ff54" kindref="member">dbus_connection_flush()</ref> should only be used, for example, if the application was expected to exit before running the main loop.</para><para>Because this only queues the message, the only reason it can fail is lack of memory. Even if the connection is disconnected, no error will be returned. If the function fails due to lack of memory, it returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>. The function will never fail for other reasons; even if the connection is disconnected, you can queue an outgoing message, though obviously it won&apos;t be sent.</para><para>The message serial is used by the remote application to send a reply; see <ref refid="group__DBusMessage_1ga390710c25564c80025a006c376da2030" kindref="member">dbus_message_get_serial()</ref> or the D-Bus specification.</para><para><ref refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" kindref="member">dbus_message_unref()</ref> can be called as soon as this method returns as the message queue will hold its own ref until the message is sent.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to write. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serial</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for message serial, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if you don&apos;t care </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="3302" column="1" bodyfile="dbus/dbus-connection.c" bodystart="3302" bodyend="3328"/>
        <references refid="group__DBusConnectionInternals_1ga7151f75b5d2308ec80cfe893aba72aa1" compoundref="dbus-connection_8c" startline="1419" endline="1433">_dbus_connection_ref_unlocked</references>
        <references refid="group__DBusConnectionInternals_1gabaa6d26f6eca30782904af1ceb703bd1" compoundref="dbus-connection_8c" startline="885" endline="892">_dbus_connection_remove_timeout_unlocked</references>
        <references refid="group__DBusConnectionInternals_1ga2974eb1c261305fafc635e14fc575d03" compoundref="dbus-connection_8c" startline="2098" endline="2119">_dbus_connection_send_and_unlock</references>
        <references refid="group__DBusPendingCallInternals_1ga68e5ff616e6a6563d83966c3d88b9b32" compoundref="dbus-pending-call_8c" startline="323" endline="329">_dbus_pending_call_get_connection_and_lock</references>
        <references refid="group__DBusPendingCallInternals_1gaa9acac047b61c9a0eaff1977151e9e08" compoundref="dbus-pending-call_8c" startline="279" endline="284">_dbus_pending_call_get_timeout_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1ga1bc4de7652108d0629522a4e3adffcab" compoundref="dbus-pending-call_8c" startline="228" endline="239">_dbus_pending_call_queue_timeout_error_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1gafea13f8b9977d341e41201c407adea2a" compoundref="dbus-pending-call_8c" startline="263" endline="269">_dbus_pending_call_set_timeout_added_unlocked</references>
        <references refid="group__DBusTransport_1gab98dc7cad59472a4513489628f1393f1" compoundref="dbus-transport_8c" startline="843" endline="846">_dbus_transport_can_pass_unix_fd</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" compoundref="dbus-connection_8c" startline="2817" endline="2843">dbus_connection_unref</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusBus_1ga81d303bf29d7c97ad4690ce35071b090" compoundref="dbus-bus_8c" startline="1356" endline="1409">dbus_bus_start_service_by_name</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gaa215df7ab7ca6dce7be153c6b9cc80ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_send_with_reply</definition>
        <argsstring>(DBusConnection *connection, DBusMessage *message, DBusPendingCall **pending_return, int timeout_milliseconds)</argsstring>
        <name>dbus_connection_send_with_reply</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> **</type>
          <declname>pending_return</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout_milliseconds</declname>
        </param>
        <briefdescription>
<para>Queues a message to send, as with <ref refid="group__DBusConnection_1gae1cb64f4cf550949b23fd3a756b2f7d0" kindref="member">dbus_connection_send()</ref>, but also returns a <ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> used to receive a reply to the message. </para>        </briefdescription>
        <detaileddescription>
<para>If no reply is received in the given timeout_milliseconds, this function expires the pending reply and generates a synthetic error reply (generated in-process, not by the remote application) indicating that a timeout occurred.</para><para>A <ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> will see a reply message before any filters or registered object path handlers. See <ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref> for details on when handlers are run.</para><para>A <ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> will always see exactly one reply message, unless it&apos;s cancelled with <ref refid="group__DBusPendingCall_1ga6530d18f891d3ca5f5df87ea7c2b155c" kindref="member">dbus_pending_call_cancel()</ref>.</para><para>If <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> is passed for the pending_return, the <ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> will still be generated internally, and used to track the message reply timeout. This means a timeout error will occur if no reply arrives, unlike with <ref refid="group__DBusConnection_1gae1cb64f4cf550949b23fd3a756b2f7d0" kindref="member">dbus_connection_send()</ref>.</para><para>If -1 is passed for the timeout, a sane default timeout is used. -1 is typically the best value for the timeout for this reason, unless you want a very short or very long timeout. If <ref refid="group__DBusPendingCall_1ga21384c9c5b0da54f7d0a92012522f213" kindref="member">DBUS_TIMEOUT_INFINITE</ref> is passed for the timeout, no timeout will be set and the call will block forever.</para><para><simplesect kind="warning"><para>if the connection is disconnected or you try to send Unix file descriptors on a connection that does not support them, the <ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> will be set to <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>, so be careful with this.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pending_return</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for a <ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> object, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if connection is disconnected or when you try to send Unix file descriptors on a connection that does not support them. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_milliseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>timeout in milliseconds, -1 (or <ref refid="group__DBusPendingCall_1gabdc138a303699e88756d6c5988a16b05" kindref="member">DBUS_TIMEOUT_USE_DEFAULT</ref>) for default or <ref refid="group__DBusPendingCall_1ga21384c9c5b0da54f7d0a92012522f213" kindref="member">DBUS_TIMEOUT_INFINITE</ref> for no timeout </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if no memory, <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="3399" column="1" bodyfile="dbus/dbus-connection.c" bodystart="3399" bodyend="3500"/>
        <references refid="group__DBusPendingCallInternals_1ga3f2300d7a768783bc2fae0991bcc55df" compoundref="dbus-pending-call_8c" startline="109" endline="161">_dbus_pending_call_new_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1ga9901fc4c5fd2db9bf1ce2dcc9abf55fc" compoundref="dbus-pending-call_8c" startline="354" endline="384">_dbus_pending_call_set_timeout_error_unlocked</references>
        <references refid="group__DBusTransport_1gab98dc7cad59472a4513489628f1393f1" compoundref="dbus-transport_8c" startline="843" endline="846">_dbus_transport_can_pass_unix_fd</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMessage_1ga390710c25564c80025a006c376da2030" compoundref="dbus-message_8c" startline="1127" endline="1132">dbus_message_get_serial</references>
        <references refid="group__DBusMessageInternals_1ga3dd30a62c63eb9972cc0c564f2a89c3b" compoundref="dbus-message_8c" startline="254" endline="261">dbus_message_set_serial</references>
        <references refid="group__DBusPendingCall_1gadaba15a74ba4925cdef52d4791cd3147" compoundref="dbus-pending-call_8c" startline="597" endline="609">dbus_pending_call_unref</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusConnection_1ga8d6431f17a9e53c9446d87c2ba8409f0" compoundref="dbus-connection_8c" startline="3535" endline="3592">dbus_connection_send_with_reply_and_block</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga8d6431f17a9e53c9446d87c2ba8409f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
        <definition>DBUS_EXPORT DBusMessage * dbus_connection_send_with_reply_and_block</definition>
        <argsstring>(DBusConnection *connection, DBusMessage *message, int timeout_milliseconds, DBusError *error)</argsstring>
        <name>dbus_connection_send_with_reply_and_block</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout_milliseconds</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Sends a message and blocks a certain time period while waiting for a reply. </para>        </briefdescription>
        <detaileddescription>
<para>This function does not reenter the main loop, i.e. messages other than the reply are queued up but not processed. This function is used to invoke method calls on a remote object.</para><para>If a normal reply is received, it is returned, and removed from the incoming message queue. If it is not received, <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> is returned and the error is set to <ref refid="group__DBusProtocol_1gade2cb1c5a6adf47af18672865f233b6d" kindref="member">DBUS_ERROR_NO_REPLY</ref>. If an error reply is received, it is converted to a <ref refid="structDBusError" kindref="compound">DBusError</ref> and returned as an error, then the reply message is deleted and <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> is returned. If something else goes wrong, result is set to whatever is appropriate, such as <ref refid="group__DBusProtocol_1gac32eaf0b92f798307853cd4fe0cf11c2" kindref="member">DBUS_ERROR_NO_MEMORY</ref> or <ref refid="group__DBusProtocol_1gaef6443e0bd8cdcc1606d985a775d07a7" kindref="member">DBUS_ERROR_DISCONNECTED</ref>.</para><para><simplesect kind="warning"><para>While this function blocks the calling thread will not be processing the incoming message queue. This means you can end up deadlocked if the application you&apos;re talking to needs you to reply to a method. To solve this, either avoid the situation, block in a separate thread from the main connection-dispatching thread, or use <ref refid="group__DBusPendingCall_1ga16b67b418b1dc27cfdda6b20f7447670" kindref="member">dbus_pending_call_set_notify()</ref> to avoid blocking.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_milliseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>timeout in milliseconds, -1 (or <ref refid="group__DBusPendingCall_1gabdc138a303699e88756d6c5988a16b05" kindref="member">DBUS_TIMEOUT_USE_DEFAULT</ref>) for default or <ref refid="group__DBusPendingCall_1ga21384c9c5b0da54f7d0a92012522f213" kindref="member">DBUS_TIMEOUT_INFINITE</ref> for no timeout </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for error message </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the message that is the reply or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> with an error code if the function fails. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="3535" column="1" bodyfile="dbus/dbus-connection.c" bodystart="3535" bodyend="3592"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusConnectionInternals_1ga283f0254537c4bf4453dbed6fad2e21e" compoundref="dbus-connection_8c" startline="1198" endline="1237">_dbus_connection_do_iteration_unlocked</references>
        <references refid="group__DBusTransport_1gab98dc7cad59472a4513489628f1393f1" compoundref="dbus-transport_8c" startline="843" endline="846">_dbus_transport_can_pass_unix_fd</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusConnection_1gaa215df7ab7ca6dce7be153c6b9cc80ba" compoundref="dbus-connection_8c" startline="3399" endline="3500">dbus_connection_send_with_reply</references>
        <references refid="group__DBusProtocol_1gaef6443e0bd8cdcc1606d985a775d07a7" compoundref="dbus-protocol_8h" startline="389">DBUS_ERROR_DISCONNECTED</references>
        <references refid="group__DBusProtocol_1gabb62fd6340d0787fbd56ff8dd2f326c7" compoundref="dbus-protocol_8h" startline="355">DBUS_ERROR_FAILED</references>
        <references refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" compoundref="dbus-message_8c" startline="1690" endline="1709">dbus_message_unref</references>
        <references refid="group__DBusPendingCall_1ga67b99f749a7f477c7b5d70f2acee5452" compoundref="dbus-pending-call_8c" startline="737" endline="742">dbus_pending_call_block</references>
        <references refid="group__DBusPendingCall_1ga5a738928c2369fef093ce00658903d06" compoundref="dbus-pending-call_8c" startline="702" endline="719">dbus_pending_call_steal_reply</references>
        <references refid="group__DBusPendingCall_1gadaba15a74ba4925cdef52d4791cd3147" compoundref="dbus-pending-call_8c" startline="597" endline="609">dbus_pending_call_unref</references>
        <references refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="419">dbus_set_error</references>
        <references refid="group__DBusMessage_1gaba5e49e956e6bbd1f857ffd21c289276" compoundref="dbus-message_8c" startline="3796" endline="3816">dbus_set_error_from_message</references>
        <references refid="structDBusConnection_1a07025e177949c5e65d5f983ac5f5e878" compoundref="dbus-connection_8c" startline="275">DBusConnection::n_outgoing</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
        <referencedby refid="group__DBusBus_1ga18314500e7f6890a79bddbeace5df5f9" compoundref="dbus-bus_8c" startline="948" endline="1007">dbus_bus_get_id</referencedby>
        <referencedby refid="group__DBusBus_1ga24d782c710f3d82caf1b1ed582dcf474" compoundref="dbus-bus_8c" startline="865" endline="927">dbus_bus_get_unix_user</referencedby>
        <referencedby refid="group__DBusBus_1ga5331b172dd8ed00eec130e894c5c2a0b" compoundref="dbus-bus_8c" startline="1280" endline="1331">dbus_bus_name_has_owner</referencedby>
        <referencedby refid="group__DBusBus_1ga0c21cf74d05c0bd8003846b56a588a4b" compoundref="dbus-bus_8c" startline="646" endline="728">dbus_bus_register</referencedby>
        <referencedby refid="group__DBusBus_1gaa4aa5ebe51cdbe8c0651609fc72e841a" compoundref="dbus-bus_8c" startline="1198" endline="1260">dbus_bus_release_name</referencedby>
        <referencedby refid="group__DBusBus_1ga8a9024c78c4ea89b6271f19dbc7861b2" compoundref="dbus-bus_8c" startline="1112" endline="1176">dbus_bus_request_name</referencedby>
        <referencedby refid="group__DBusBus_1ga81d303bf29d7c97ad4690ce35071b090" compoundref="dbus-bus_8c" startline="1356" endline="1409">dbus_bus_start_service_by_name</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gaebf031eb444b4f847606aa27daa3d8e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_set_watch_functions</definition>
        <argsstring>(DBusConnection *connection, DBusAddWatchFunction add_function, DBusRemoveWatchFunction remove_function, DBusWatchToggledFunction toggled_function, void *data, DBusFreeFunction free_data_function)</argsstring>
        <name>dbus_connection_set_watch_functions</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusConnection_1ga285ce1f8bb94ef2f89f23db3de8cfe4b" kindref="member">DBusAddWatchFunction</ref></type>
          <declname>add_function</declname>
        </param>
        <param>
          <type><ref refid="group__DBusConnection_1ga487ca73e58570f302ba7159c81719243" kindref="member">DBusRemoveWatchFunction</ref></type>
          <declname>remove_function</declname>
        </param>
        <param>
          <type><ref refid="group__DBusConnection_1ga005459ba2ddd69ba2d89f0e04ef57b10" kindref="member">DBusWatchToggledFunction</ref></type>
          <declname>toggled_function</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref></type>
          <declname>free_data_function</declname>
        </param>
        <briefdescription>
<para>Sets the watch functions for the connection. </para>        </briefdescription>
        <detaileddescription>
<para>These functions are responsible for making the application&apos;s main loop aware of file descriptors that need to be monitored for events, using select() or poll(). When using Qt, typically the DBusAddWatchFunction would create a QSocketNotifier. When using GLib, the DBusAddWatchFunction could call g_io_add_watch(), or could be used as part of a more elaborate GSource. Note that when a watch is added, it may not be enabled.</para><para>The DBusWatchToggledFunction notifies the application that the watch has been enabled or disabled. Call <ref refid="group__DBusWatch_1gae7a91e6d4d1bc187419c47c522e33a8f" kindref="member">dbus_watch_get_enabled()</ref> to check this. A disabled watch should have no effect, and enabled watch should be added to the main loop. This feature is used instead of simply adding/removing the watch because enabling/disabling can be done without memory allocation. The toggled function may be NULL if a main loop re-queries <ref refid="group__DBusWatch_1gae7a91e6d4d1bc187419c47c522e33a8f" kindref="member">dbus_watch_get_enabled()</ref> every time anyway.</para><para>The <ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> can be queried for the file descriptor to watch using <ref refid="group__DBusWatch_1ga15df7f6120ead3e09bec8a70d3c43c0d" kindref="member">dbus_watch_get_unix_fd()</ref> or <ref refid="group__DBusWatch_1ga91308f393d41b31babda17c83833517f" kindref="member">dbus_watch_get_socket()</ref>, and for the events to watch for using <ref refid="group__DBusWatch_1gaf172a2b1d1f82333e67cec8d99c9204a" kindref="member">dbus_watch_get_flags()</ref>. The flags returned by <ref refid="group__DBusWatch_1gaf172a2b1d1f82333e67cec8d99c9204a" kindref="member">dbus_watch_get_flags()</ref> will only contain DBUS_WATCH_READABLE and DBUS_WATCH_WRITABLE, never DBUS_WATCH_HANGUP or DBUS_WATCH_ERROR; all watches implicitly include a watch for hangups, errors, and other exceptional conditions.</para><para>Once a file descriptor becomes readable or writable, or an exception occurs, <ref refid="group__DBusWatch_1gac2acdb1794450ac01a43ec4c3e07ebf7" kindref="member">dbus_watch_handle()</ref> should be called to notify the connection of the file descriptor&apos;s condition.</para><para><ref refid="group__DBusWatch_1gac2acdb1794450ac01a43ec4c3e07ebf7" kindref="member">dbus_watch_handle()</ref> cannot be called during the DBusAddWatchFunction, as the connection will not be ready to handle that watch yet.</para><para>It is not allowed to reference a <ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> after it has been passed to remove_function.</para><para>If <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> is returned due to lack of memory, the failure may be due to a <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> return from the new add_function. If so, the add_function may have been called successfully one or more times, but the remove_function will also have been called to remove any successful adds. i.e. if <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> is returned the net result should be that <ref refid="group__DBusConnection_1gaebf031eb444b4f847606aa27daa3d8e6" kindref="member">dbus_connection_set_watch_functions()</ref> has no effect, but the add_function and remove_function may have been called.</para><para><simplesect kind="note"><para>The thread lock on <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> is held while watch functions are invoked, so inside these functions you may not invoke any methods on <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> or it will deadlock. See the comments in the code or <ulink url="http://lists.freedesktop.org/archives/dbus/2007-July/tread.html#8144">http://lists.freedesktop.org/archives/dbus/2007-July/tread.html#8144</ulink> if you encounter this issue and want to attempt writing a patch.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>add_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to begin monitoring a new descriptor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>remove_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to stop monitoring a descriptor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>toggled_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to notify of enable/disable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to pass to add_function and remove_function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_data_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to be called to free the data. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on failure (no memory) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="4926" column="1" bodyfile="dbus/dbus-connection.c" bodystart="4926" bodyend="4947"/>
        <references refid="group__DBusWatchInternals_1gae9ab8cf14f4191191e94183be9a031d9" compoundref="dbus-watch_8c" startline="296" endline="365">_dbus_watch_list_set_functions</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1abdb6a32972d924531fb2cd80c7fd6d37" compoundref="dbus-connection_8c" startline="281">DBusConnection::watches</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gab3cbc68eec427e9ce1783b25d44fe93c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_set_timeout_functions</definition>
        <argsstring>(DBusConnection *connection, DBusAddTimeoutFunction add_function, DBusRemoveTimeoutFunction remove_function, DBusTimeoutToggledFunction toggled_function, void *data, DBusFreeFunction free_data_function)</argsstring>
        <name>dbus_connection_set_timeout_functions</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusConnection_1ga91d796869e7fa9e96d843b2c0d480df1" kindref="member">DBusAddTimeoutFunction</ref></type>
          <declname>add_function</declname>
        </param>
        <param>
          <type><ref refid="group__DBusConnection_1ga418f70c8dfaa15c45f1d51fb9569eab8" kindref="member">DBusRemoveTimeoutFunction</ref></type>
          <declname>remove_function</declname>
        </param>
        <param>
          <type><ref refid="group__DBusConnection_1ga45c22fb4103827cd10f319cc90e286ae" kindref="member">DBusTimeoutToggledFunction</ref></type>
          <declname>toggled_function</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref></type>
          <declname>free_data_function</declname>
        </param>
        <briefdescription>
<para>Sets the timeout functions for the connection. </para>        </briefdescription>
        <detaileddescription>
<para>These functions are responsible for making the application&apos;s main loop aware of timeouts. When using Qt, typically the DBusAddTimeoutFunction would create a QTimer. When using GLib, the DBusAddTimeoutFunction would call g_timeout_add.</para><para>The DBusTimeoutToggledFunction notifies the application that the timeout has been enabled or disabled. Call <ref refid="group__DBusTimeout_1ga58954b2edb45ec1632529d35525ea45c" kindref="member">dbus_timeout_get_enabled()</ref> to check this. A disabled timeout should have no effect, and enabled timeout should be added to the main loop. This feature is used instead of simply adding/removing the timeout because enabling/disabling can be done without memory allocation. With Qt, QTimer::start() and QTimer::stop() can be used to enable and disable. The toggled function may be NULL if a main loop re-queries <ref refid="group__DBusTimeout_1ga58954b2edb45ec1632529d35525ea45c" kindref="member">dbus_timeout_get_enabled()</ref> every time anyway. Whenever a timeout is toggled, its interval may change.</para><para>The <ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref> can be queried for the timer interval using <ref refid="group__DBusTimeout_1ga67ba21b6189438875c6007ee79da5e37" kindref="member">dbus_timeout_get_interval()</ref>. <ref refid="group__DBusTimeout_1ga038b67c8d3db2624a1e4a8bc45f25d12" kindref="member">dbus_timeout_handle()</ref> should be called repeatedly, each time the interval elapses, starting after it has elapsed once. The timeout stops firing when it is removed with the given remove_function. The timer interval may change whenever the timeout is added, removed, or toggled.</para><para><simplesect kind="note"><para>The thread lock on <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> is held while timeout functions are invoked, so inside these functions you may not invoke any methods on <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> or it will deadlock. See the comments in the code or <ulink url="http://lists.freedesktop.org/archives/dbus/2007-July/thread.html#8144">http://lists.freedesktop.org/archives/dbus/2007-July/thread.html#8144</ulink> if you encounter this issue and want to attempt writing a patch.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>add_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to add a timeout. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>remove_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to remove a timeout. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>toggled_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to notify of enable/disable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to pass to add_function and remove_function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_data_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to be called to free the data. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on failure (no memory) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="4989" column="1" bodyfile="dbus/dbus-connection.c" bodystart="4989" bodyend="5010"/>
        <references refid="group__DBusTimeoutInternals_1ga6760d1963b870b45f855501e38b49fd9" compoundref="dbus-timeout_8c" startline="239" endline="299">_dbus_timeout_list_set_functions</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1af3936ac5c968f2ac09bf05cf36025994" compoundref="dbus-connection_8c" startline="282">DBusConnection::timeouts</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga2b1df13251c7ec348bcba39c0924e881" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_set_wakeup_main_function</definition>
        <argsstring>(DBusConnection *connection, DBusWakeupMainFunction wakeup_main_function, void *data, DBusFreeFunction free_data_function)</argsstring>
        <name>dbus_connection_set_wakeup_main_function</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusConnection_1ga509465111feb37d60d5e37037266c296" kindref="member">DBusWakeupMainFunction</ref></type>
          <declname>wakeup_main_function</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref></type>
          <declname>free_data_function</declname>
        </param>
        <briefdescription>
<para>Sets the mainloop wakeup function for the connection. </para>        </briefdescription>
        <detaileddescription>
<para>This function is responsible for waking up the main loop (if its sleeping in another thread) when some some change has happened to the connection that the mainloop needs to reconsider (e.g. a message has been queued for writing). When using Qt, this typically results in a call to QEventLoop::wakeUp(). When using GLib, it would call g_main_context_wakeup().</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wakeup_main_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to wake up the mainloop </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to pass wakeup_main_function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_data_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to be called to free the data. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="5027" column="1" bodyfile="dbus/dbus-connection.c" bodystart="5027" bodyend="5050"/>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="structDBusConnection_1a8da896126df262503431acd73638c917" compoundref="dbus-connection_8c" startline="296">DBusConnection::free_wakeup_main_data</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1ac8aff7bafd9ed046d835c5ed80bc218c" compoundref="dbus-connection_8c" startline="295">DBusConnection::wakeup_main_data</references>
        <references refid="structDBusConnection_1a211104e37f65d45ab8fcb149e4bcc84e" compoundref="dbus-connection_8c" startline="294">DBusConnection::wakeup_main_function</references>
        <referencedby refid="group__DBusConnection_1gae34751e15f114217e5ad10c663e2ef2e" compoundref="dbus-connection_8c" startline="2681" endline="2692">dbus_connection_ref</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga55ff88cd22c0672441c7deffbfb68fbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_set_dispatch_status_function</definition>
        <argsstring>(DBusConnection *connection, DBusDispatchStatusFunction function, void *data, DBusFreeFunction free_data_function)</argsstring>
        <name>dbus_connection_set_dispatch_status_function</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusConnection_1ga583ca2aff3cce66d68208abdfca5b547" kindref="member">DBusDispatchStatusFunction</ref></type>
          <declname>function</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref></type>
          <declname>free_data_function</declname>
        </param>
        <briefdescription>
<para>Set a function to be invoked when the dispatch status changes. </para>        </briefdescription>
        <detaileddescription>
<para>If the dispatch status is <ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" kindref="member">DBUS_DISPATCH_DATA_REMAINS</ref>, then <ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref> needs to be called to process incoming messages. However, <ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref> MUST NOT BE CALLED from inside the DBusDispatchStatusFunction. Indeed, almost any reentrancy in this function is a bad idea. Instead, the DBusDispatchStatusFunction should simply save an indication that messages should be dispatched later, when the main loop is re-entered.</para><para>If you don&apos;t set a dispatch status function, you have to be sure to dispatch on every iteration of your main loop, especially if <ref refid="group__DBusWatch_1gac2acdb1794450ac01a43ec4c3e07ebf7" kindref="member">dbus_watch_handle()</ref> or <ref refid="group__DBusTimeout_1ga038b67c8d3db2624a1e4a8bc45f25d12" kindref="member">dbus_timeout_handle()</ref> were called.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to call on dispatch status changes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data for function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_data_function</parametername>
</parameternamelist>
<parameterdescription>
<para>free the function data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="5073" column="1" bodyfile="dbus/dbus-connection.c" bodystart="5073" bodyend="5096"/>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="structDBusConnection_1a0225f7934d1bd118ae2eeacf8a1c6f19" compoundref="dbus-connection_8c" startline="299">DBusConnection::dispatch_status_data</references>
        <references refid="structDBusConnection_1af6cbafdf80cd474c654fc226581900a2" compoundref="dbus-connection_8c" startline="298">DBusConnection::dispatch_status_function</references>
        <references refid="structDBusConnection_1a71f8b1e2078c4edb98c62de1886dfb2a" compoundref="dbus-connection_8c" startline="300">DBusConnection::free_dispatch_status_data</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusConnection_1gae34751e15f114217e5ad10c663e2ef2e" compoundref="dbus-connection_8c" startline="2681" endline="2692">dbus_connection_ref</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gaef670c3a8170ab9c719ec955252459d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_get_unix_user</definition>
        <argsstring>(DBusConnection *connection, unsigned long *uid)</argsstring>
        <name>dbus_connection_get_unix_user</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>unsigned long *</type>
          <declname>uid</declname>
        </param>
        <briefdescription>
<para>Gets the UNIX user ID of the connection if known. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the uid is filled in. Always returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on non-UNIX platforms for now, though in theory someone could hook Windows to NIS or something. Always returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> prior to authenticating the connection.</para><para>The UID is only read by servers from clients; clients can&apos;t usually get the UID of servers, because servers do not authenticate to clients. The returned UID is the UID the connection authenticated as.</para><para>The message bus is a server and the apps connecting to the bus are clients.</para><para>You can ask the bus to tell you the UID of another connection though if you like; this is done with <ref refid="group__DBusBus_1ga24d782c710f3d82caf1b1ed582dcf474" kindref="member">dbus_bus_get_unix_user()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uid</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for the user ID </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if uid is filled in with a valid user ID </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="5190" column="1" bodyfile="dbus/dbus-connection.c" bodystart="5190" bodyend="5213"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusTransport_1gaf3c4a47f73bd584a9fda1e5e7a825da9" compoundref="dbus-transport_8c" startline="1310" endline="1333">_dbus_transport_get_unix_user</references>
        <references refid="group__DBusTransport_1gabe774b134a4bf8c8fc09e6186470874f" compoundref="dbus-transport_8c" startline="724" endline="812">_dbus_transport_try_to_authenticate</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gaeebeadcafa87e2d30eed4296f26fb73c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_get_unix_process_id</definition>
        <argsstring>(DBusConnection *connection, unsigned long *pid)</argsstring>
        <name>dbus_connection_get_unix_process_id</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>unsigned long *</type>
          <declname>pid</declname>
        </param>
        <briefdescription>
<para>Gets the process ID of the connection if any. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the pid is filled in. Always returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> prior to authenticating the connection.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pid</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for the process ID </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if uid is filled in with a valid process ID </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="5226" column="1" bodyfile="dbus/dbus-connection.c" bodystart="5226" bodyend="5245"/>
        <references refid="group__DBusTransport_1gae66bc81abe904a4b3ab32d8920c8fe1e" compoundref="dbus-transport_8c" startline="1343" endline="1366">_dbus_transport_get_unix_process_id</references>
        <references refid="group__DBusTransport_1gabe774b134a4bf8c8fc09e6186470874f" compoundref="dbus-transport_8c" startline="724" endline="812">_dbus_transport_try_to_authenticate</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga969b9dafe806c9fe0a54c9d8a565c2e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_get_adt_audit_session_data</definition>
        <argsstring>(DBusConnection *connection, void **data, dbus_int32_t *data_size)</argsstring>
        <name>dbus_connection_get_adt_audit_session_data</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1gab18afa60e9b17b6e322735bda3d863d8" kindref="member">dbus_int32_t</ref> *</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
<para>Gets the ADT audit data of the connection if any. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the structure pointer is returned. Always returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> prior to authenticating the connection.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for audit data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for length of audit data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if audit data is filled in with a valid ucred pointer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="5259" column="1" bodyfile="dbus/dbus-connection.c" bodystart="5259" bodyend="5280"/>
        <references refid="group__DBusTransport_1ga36ccd8321491895ca632e744028eea42" compoundref="dbus-transport_8c" startline="1377" endline="1400">_dbus_transport_get_adt_audit_session_data</references>
        <references refid="group__DBusTransport_1gabe774b134a4bf8c8fc09e6186470874f" compoundref="dbus-transport_8c" startline="724" endline="812">_dbus_transport_try_to_authenticate</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga6b78379badb4c5804344f4f3d87a958a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_set_unix_user_function</definition>
        <argsstring>(DBusConnection *connection, DBusAllowUnixUserFunction function, void *data, DBusFreeFunction free_data_function)</argsstring>
        <name>dbus_connection_set_unix_user_function</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusConnection_1ga5ab581cb4854a82655188e7c243e34fd" kindref="member">DBusAllowUnixUserFunction</ref></type>
          <declname>function</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref></type>
          <declname>free_data_function</declname>
        </param>
        <briefdescription>
<para>Sets a predicate function used to determine whether a given user ID is allowed to connect. </para>        </briefdescription>
        <detaileddescription>
<para>When an incoming connection has authenticated with a particular user ID, this function is called; if it returns <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>, the connection is allowed to proceed, otherwise the connection is disconnected.</para><para>If the function is set to <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> (as it is by default), then only the same UID as the server process will be allowed to connect. Also, root is always allowed to connect.</para><para>On Windows, the function will be set and its free_data_function will be invoked when the connection is freed or a new function is set. However, the function will never be called, because there are no UNIX user ids to pass to it, or at least none of the existing auth protocols would allow authenticating as a UNIX user on Windows.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>the predicate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to pass to the predicate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_data_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to free the data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="5305" column="1" bodyfile="dbus/dbus-connection.c" bodystart="5305" bodyend="5323"/>
        <references refid="group__DBusTransport_1ga9f0ab472678a107c2ebe7f1da0754c44" compoundref="dbus-transport_8c" startline="1413" endline="1426">_dbus_transport_set_unix_user_function</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
        <referencedby refid="group__DBusConnection_1gae34751e15f114217e5ad10c663e2ef2e" compoundref="dbus-connection_8c" startline="2681" endline="2692">dbus_connection_ref</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga2b3cb488f1922aeecdeafdcb110e91a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_get_windows_user</definition>
        <argsstring>(DBusConnection *connection, char **windows_sid_p)</argsstring>
        <name>dbus_connection_get_windows_user</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>windows_sid_p</declname>
        </param>
        <briefdescription>
<para>Gets the Windows user SID of the connection if known. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the ID is filled in. Always returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on non-Windows platforms for now, though in theory someone could hook UNIX to Active Directory or something. Always returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> prior to authenticating the connection.</para><para>The user is only read by servers from clients; clients can&apos;t usually get the user of servers, because servers do not authenticate to clients. The returned user is the user the connection authenticated as.</para><para>The message bus is a server and the apps connecting to the bus are clients.</para><para>The returned user string has to be freed with <ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member">dbus_free()</ref>.</para><para>The return value indicates whether the user SID is available; if it&apos;s available but we don&apos;t have the memory to copy it, then the return value is <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> and <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> is given as the SID.</para><para><xrefsect id="todo_1_todo000010"><xreftitle>Todo</xreftitle><xrefdescription><para>We would like to be able to say "You can ask the bus to tell you the user of another connection though if you like; this is done with dbus_bus_get_windows_user()." But this has to be implemented in bus/driver.c and <ref refid="dbus-bus_8c_source" kindref="compound">dbus/dbus-bus.c</ref>, and is pointless anyway since on Windows we only use the session bus for now.</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>windows_sid_p</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for an allocated copy of the user ID, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if no memory </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if user is available (returned value may be <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> anyway if no memory) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="5357" column="1" bodyfile="dbus/dbus-connection.c" bodystart="5357" bodyend="5380"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusTransport_1ga3f4f4ce9eaef18567fd21f5c6a1fde99" compoundref="dbus-transport_8c" startline="1436" endline="1458">_dbus_transport_get_windows_user</references>
        <references refid="group__DBusTransport_1gabe774b134a4bf8c8fc09e6186470874f" compoundref="dbus-transport_8c" startline="724" endline="812">_dbus_transport_try_to_authenticate</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gaa35ced9ccd29d3366749ae383b120f9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_set_windows_user_function</definition>
        <argsstring>(DBusConnection *connection, DBusAllowWindowsUserFunction function, void *data, DBusFreeFunction free_data_function)</argsstring>
        <name>dbus_connection_set_windows_user_function</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusConnection_1gabbb2a3b00f680968683c7b1856811b60" kindref="member">DBusAllowWindowsUserFunction</ref></type>
          <declname>function</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref></type>
          <declname>free_data_function</declname>
        </param>
        <briefdescription>
<para>Sets a predicate function used to determine whether a given user ID is allowed to connect. </para>        </briefdescription>
        <detaileddescription>
<para>When an incoming connection has authenticated with a particular user ID, this function is called; if it returns <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>, the connection is allowed to proceed, otherwise the connection is disconnected.</para><para>If the function is set to <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> (as it is by default), then only the same user owning the server process will be allowed to connect.</para><para>On UNIX, the function will be set and its free_data_function will be invoked when the connection is freed or a new function is set. However, the function will never be called, because there is no way right now to authenticate as a Windows user on UNIX.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>the predicate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to pass to the predicate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_data_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to free the data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="5404" column="1" bodyfile="dbus/dbus-connection.c" bodystart="5404" bodyend="5422"/>
        <references refid="group__DBusTransport_1gadbf528ef41efde73d0bc386d10b7f5b1" compoundref="dbus-transport_8c" startline="1472" endline="1485">_dbus_transport_set_windows_user_function</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
        <referencedby refid="group__DBusConnection_1gae34751e15f114217e5ad10c663e2ef2e" compoundref="dbus-connection_8c" startline="2681" endline="2692">dbus_connection_ref</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gade349ff04ed548993a8054250e317c12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_set_allow_anonymous</definition>
        <argsstring>(DBusConnection *connection, dbus_bool_t value)</argsstring>
        <name>dbus_connection_set_allow_anonymous</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>This function must be called on the server side of a connection when the connection is first seen in the <ref refid="group__DBusServer_1ga78eff950d25762a146d58d806bc8f724" kindref="member">DBusNewConnectionFunction</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>If set to <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> (the default is <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>), then the connection can proceed even if the client does not authenticate as some user identity, i.e. clients can connect anonymously.</para><para>This setting interacts with the available authorization mechanisms (see <ref refid="group__DBusServer_1ga309e5f1510c74c4b221d12d874d53341" kindref="member">dbus_server_set_auth_mechanisms()</ref>). Namely, an auth mechanism such as ANONYMOUS that supports anonymous auth must be included in the list of available mechanisms for anonymous login to work.</para><para>This setting also changes the default rule for connections authorized as a user; normally, if a connection authorizes as a user identity, it is permitted if the user identity is root or the user identity matches the user identity of the server process. If anonymous connections are allowed, however, then any user identity is allowed.</para><para>You can override the rules for connections authorized as a user identity with <ref refid="group__DBusConnection_1ga6b78379badb4c5804344f4f3d87a958a" kindref="member">dbus_connection_set_unix_user_function()</ref> and <ref refid="group__DBusConnection_1gaa35ced9ccd29d3366749ae383b120f9c" kindref="member">dbus_connection_set_windows_user_function()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to allow authentication as an anonymous user </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="5451" column="1" bodyfile="dbus/dbus-connection.c" bodystart="5451" bodyend="5459"/>
        <references refid="group__DBusTransport_1ga5f4bd7eb5621003595b75cb8033463cd" compoundref="dbus-transport_8c" startline="1509" endline="1513">_dbus_transport_set_allow_anonymous</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gaf58e8cc7b8717db1581459c0c3d34b08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_set_route_peer_messages</definition>
        <argsstring>(DBusConnection *connection, dbus_bool_t value)</argsstring>
        <name>dbus_connection_set_route_peer_messages</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Normally <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> automatically handles all messages to the org.freedesktop.DBus.Peer interface. </para>        </briefdescription>
        <detaileddescription>
<para>However, the message bus wants to be able to route methods on that interface through the bus and to other applications. If routing peer messages is enabled, then messages with the org.freedesktop.DBus.Peer interface that also have a bus destination name set will not be automatically handled by the <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> and instead will be dispatched normally to the application.</para><para>If a normal application sets this flag, it can break things badly. So don&apos;t set this unless you are the message bus.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> to pass through org.freedesktop.DBus.Peer messages with a bus name set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="5479" column="1" bodyfile="dbus/dbus-connection.c" bodystart="5479" bodyend="5487"/>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1ab13bc36d7e6f91995768277ecbd5482c" compoundref="dbus-connection_8c" startline="319">DBusConnection::route_peer_messages</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gae00f581e5487408cb294bf71826aff86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_add_filter</definition>
        <argsstring>(DBusConnection *connection, DBusHandleMessageFunction function, void *user_data, DBusFreeFunction free_data_function)</argsstring>
        <name>dbus_connection_add_filter</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusConnection_1ga842a008b3f89a8de292af9d9f3c9dcd6" kindref="member">DBusHandleMessageFunction</ref></type>
          <declname>function</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <param>
          <type><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref></type>
          <declname>free_data_function</declname>
        </param>
        <briefdescription>
<para>Adds a message filter. </para>        </briefdescription>
        <detaileddescription>
<para>Filters are handlers that are run on all incoming messages, prior to the objects registered with <ref refid="group__DBusConnection_1ga24730ca6fd2e9132873962a32df7628c" kindref="member">dbus_connection_register_object_path()</ref>. Filters are run in the order that they were added. The same handler can be added as a filter more than once, in which case it will be run more than once. Filters added during a filter callback won&apos;t be run on the message being processed.</para><para><xrefsect id="todo_1_todo000011"><xreftitle>Todo</xreftitle><xrefdescription><para>we don&apos;t run filters on messages while blocking without entering the main loop, since filters are run as part of <ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch()</ref>. This is probably a feature, as filters could create arbitrary reentrancy. But kind of sucks if you&apos;re trying to filter METHOD_RETURN for some reason.</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to handle messages </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>user data to pass to the function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_data_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to use for freeing user data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success, <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if not enough memory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="5511" column="1" bodyfile="dbus/dbus-connection.c" bodystart="5511" bodyend="5548"/>
        <references refid="group__DBusSysdeps_1gae74c3fcf12acaeccdb152ef907de951c" compoundref="dbus-sysdeps-unix_8c" startline="2562" endline="2576">_dbus_atomic_inc</references>
        <references refid="group__DBusList_1gad99045e79db46159babe69718f343053" compoundref="dbus-list_8c" startline="270" endline="280">_dbus_list_append</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMemory_1gaba9d823abda7f4cadbaf5177d3b8b793" compoundref="dbus-memory_8h" startline="59">dbus_new0</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusConnection_1a32d14cefcb4daea257544397755d45ed" compoundref="dbus-connection_8c" startline="284">DBusConnection::filter_list</references>
        <references refid="structDBusMessageFilter_1a915f3269a91ee41d963448dcb22d92cd" compoundref="dbus-connection_8c" startline="233">DBusMessageFilter::free_user_data_function</references>
        <references refid="structDBusMessageFilter_1a56b3643122277ed5dc3d4f07793617fa" compoundref="dbus-connection_8c" startline="231">DBusMessageFilter::function</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusMessageFilter_1a2d2debd9a708cb7d4f8447c18f7458b9" compoundref="dbus-connection_8c" startline="230">DBusMessageFilter::refcount</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <references refid="structDBusMessageFilter_1a6cf5321325828e39da1cc8fa1b3d7153" compoundref="dbus-connection_8c" startline="232">DBusMessageFilter::user_data</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga5e7f1dad410506a8a6f5182c55e7c4fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_remove_filter</definition>
        <argsstring>(DBusConnection *connection, DBusHandleMessageFunction function, void *user_data)</argsstring>
        <name>dbus_connection_remove_filter</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusConnection_1ga842a008b3f89a8de292af9d9f3c9dcd6" kindref="member">DBusHandleMessageFunction</ref></type>
          <declname>function</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Removes a previously-added message filter. </para>        </briefdescription>
        <detaileddescription>
<para>It is a programming error to call this function for a handler that has not been added as a filter. If the given handler was added more than once, only one instance of it will be removed (the most recently-added instance).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler to remove </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>user data for the handler to remove </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="5563" column="1" bodyfile="dbus/dbus-connection.c" bodystart="5563" bodyend="5614"/>
        <references refid="group__DBusObjectTree_1gab282b916368cd512842d3aaae31e65c7" compoundref="dbus-object-tree_8c" startline="1242" endline="1325">_dbus_decompose_path</references>
        <references refid="group__DBusList_1ga42736fb02458bfffed948a509962c059" compoundref="dbus-list_8c" startline="580" endline="586">_dbus_list_get_last_link</references>
        <references refid="group__DBusList_1ga6637493bf5fc09bddb44ac295c475cae" compoundref="dbus-list_8h" startline="91">_dbus_list_get_prev_link</references>
        <references refid="group__DBusList_1ga40abea762d9cb44e5ec6b31b1769dc2e" compoundref="dbus-list_8c" startline="527" endline="532">_dbus_list_remove_link</references>
        <references refid="group__DBusObjectTree_1gab3da15ee1a73d3b26008d1bce20a78a0" compoundref="dbus-object-tree_8c" startline="391" endline="434">_dbus_object_tree_register</references>
        <references refid="group__DBusInternalsUtils_1ga63f2f8a068454b781f214ba596e313b4" compoundref="dbus-internals_8c" startline="258" endline="277">_dbus_warn_check_failed</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" compoundref="dbus-list_8h" startline="38">DBusList::data</references>
        <references refid="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" compoundref="dbus-memory_8c" startline="749" endline="764">dbus_free_string_array</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusConnection_1a32d14cefcb4daea257544397755d45ed" compoundref="dbus-connection_8c" startline="284">DBusConnection::filter_list</references>
        <references refid="structDBusMessageFilter_1a915f3269a91ee41d963448dcb22d92cd" compoundref="dbus-connection_8c" startline="233">DBusMessageFilter::free_user_data_function</references>
        <references refid="structDBusMessageFilter_1a56b3643122277ed5dc3d4f07793617fa" compoundref="dbus-connection_8c" startline="231">DBusMessageFilter::function</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" compoundref="dbus-connection_8c" startline="304">DBusConnection::objects</references>
        <references refid="structDBusMessageFilter_1a6cf5321325828e39da1cc8fa1b3d7153" compoundref="dbus-connection_8c" startline="232">DBusMessageFilter::user_data</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga728b15c71a492ad244e5a480f1156088" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_allocate_data_slot</definition>
        <argsstring>(dbus_int32_t *slot_p)</argsstring>
        <name>dbus_connection_allocate_data_slot</name>
        <param>
          <type><ref refid="group__DBusTypes_1gab18afa60e9b17b6e322735bda3d863d8" kindref="member">dbus_int32_t</ref> *</type>
          <declname>slot_p</declname>
        </param>
        <briefdescription>
<para>Allocates an integer ID to be used for storing application-specific data on any <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The allocated ID may then be used with <ref refid="group__DBusConnection_1ga845b4942399f43dd4ac644de7cb9e3ff" kindref="member">dbus_connection_set_data()</ref> and <ref refid="group__DBusConnection_1ga433fae9844a66d9d078d238e6c723b95" kindref="member">dbus_connection_get_data()</ref>. The passed-in slot must be initialized to -1, and is filled in with the slot ID. If the passed-in slot is not -1, it&apos;s assumed to be already allocated, and its refcount is incremented.</para><para>The allocated slot is global, i.e. all <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> objects will have a slot with the given integer ID reserved.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slot_p</parametername>
</parameternamelist>
<parameterdescription>
<para>address of a global variable storing the slot </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on failure (no memory) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="5920" column="1" bodyfile="dbus/dbus-connection.c" bodystart="5920" bodyend="5924"/>
        <references refid="group__DBusDataSlot_1gaf61f2bd0148bace4f67a2d6d97b26ea9" compoundref="dbus-dataslot_8c" startline="69" endline="140">_dbus_data_slot_allocator_alloc</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga7dc8c73d8c3e733f5410d52be84239a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_free_data_slot</definition>
        <argsstring>(dbus_int32_t *slot_p)</argsstring>
        <name>dbus_connection_free_data_slot</name>
        <param>
          <type><ref refid="group__DBusTypes_1gab18afa60e9b17b6e322735bda3d863d8" kindref="member">dbus_int32_t</ref> *</type>
          <declname>slot_p</declname>
        </param>
        <briefdescription>
<para>Deallocates a global ID for connection data slots. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="group__DBusConnection_1ga433fae9844a66d9d078d238e6c723b95" kindref="member">dbus_connection_get_data()</ref> and <ref refid="group__DBusConnection_1ga845b4942399f43dd4ac644de7cb9e3ff" kindref="member">dbus_connection_set_data()</ref> may no longer be used with this slot. Existing data stored on existing <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> objects will be freed when the connection is finalized, but may not be retrieved (and may only be replaced if someone else reallocates the slot). When the refcount on the passed-in slot reaches 0, it is set to -1.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slot_p</parametername>
</parameternamelist>
<parameterdescription>
<para>address storing the slot to deallocate </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="5938" column="1" bodyfile="dbus/dbus-connection.c" bodystart="5938" bodyend="5943"/>
        <references refid="group__DBusDataSlot_1ga059c50a24cd9fc984e918e6159841633" compoundref="dbus-dataslot_8c" startline="154" endline="190">_dbus_data_slot_allocator_free</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga845b4942399f43dd4ac644de7cb9e3ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_set_data</definition>
        <argsstring>(DBusConnection *connection, dbus_int32_t slot, void *data, DBusFreeFunction free_data_func)</argsstring>
        <name>dbus_connection_set_data</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1gab18afa60e9b17b6e322735bda3d863d8" kindref="member">dbus_int32_t</ref></type>
          <declname>slot</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref></type>
          <declname>free_data_func</declname>
        </param>
        <briefdescription>
<para>Stores a pointer on a <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref>, along with an optional function to be used for freeing the data when the data is set again, or when the connection is finalized. </para>        </briefdescription>
        <detaileddescription>
<para>The slot number must have been allocated with <ref refid="group__DBusConnection_1ga728b15c71a492ad244e5a480f1156088" kindref="member">dbus_connection_allocate_data_slot()</ref>.</para><para><simplesect kind="note"><para>This function does not take the main thread lock on <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref>, which allows it to be used from inside watch and timeout functions. (See the note in docs for <ref refid="group__DBusConnection_1gaebf031eb444b4f847606aa27daa3d8e6" kindref="member">dbus_connection_set_watch_functions()</ref>.) A side effect of this is that you need to know there&apos;s a reference held on the connection while invoking <ref refid="group__DBusConnection_1ga845b4942399f43dd4ac644de7cb9e3ff" kindref="member">dbus_connection_set_data()</ref>, or the connection could be finalized during <ref refid="group__DBusConnection_1ga845b4942399f43dd4ac644de7cb9e3ff" kindref="member">dbus_connection_set_data()</ref>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slot</parametername>
</parameternamelist>
<parameterdescription>
<para>the slot number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to store </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_data_func</parametername>
</parameternamelist>
<parameterdescription>
<para>finalizer function for the data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if there was enough memory to store the data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="5968" column="1" bodyfile="dbus/dbus-connection.c" bodystart="5968" bodyend="5997"/>
        <references refid="group__DBusDataSlot_1gad2952f9f686d96e7114fc49ab7452e1a" compoundref="dbus-dataslot_8c" startline="221" endline="273">_dbus_data_slot_list_set</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a0f805edcd9c09aaf45974510403dccbd" compoundref="dbus-connection_8c" startline="287">DBusConnection::slot_list</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga433fae9844a66d9d078d238e6c723b95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>DBUS_EXPORT void * dbus_connection_get_data</definition>
        <argsstring>(DBusConnection *connection, dbus_int32_t slot)</argsstring>
        <name>dbus_connection_get_data</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1gab18afa60e9b17b6e322735bda3d863d8" kindref="member">dbus_int32_t</ref></type>
          <declname>slot</declname>
        </param>
        <briefdescription>
<para>Retrieves data previously set with <ref refid="group__DBusConnection_1ga845b4942399f43dd4ac644de7cb9e3ff" kindref="member">dbus_connection_set_data()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The slot must still be allocated (must not have been freed).</para><para><simplesect kind="note"><para>This function does not take the main thread lock on <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref>, which allows it to be used from inside watch and timeout functions. (See the note in docs for <ref refid="group__DBusConnection_1gaebf031eb444b4f847606aa27daa3d8e6" kindref="member">dbus_connection_set_watch_functions()</ref>.) A side effect of this is that you need to know there&apos;s a reference held on the connection while invoking <ref refid="group__DBusConnection_1ga433fae9844a66d9d078d238e6c723b95" kindref="member">dbus_connection_get_data()</ref>, or the connection could be finalized during <ref refid="group__DBusConnection_1ga433fae9844a66d9d078d238e6c723b95" kindref="member">dbus_connection_get_data()</ref>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slot</parametername>
</parameternamelist>
<parameterdescription>
<para>the slot to get data from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the data, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if not found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="6017" column="1" bodyfile="dbus/dbus-connection.c" bodystart="6017" bodyend="6034"/>
        <references refid="group__DBusDataSlot_1ga43f741229f0c38788442601e2750ec66" compoundref="dbus-dataslot_8c" startline="285" endline="308">_dbus_data_slot_list_get</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a0f805edcd9c09aaf45974510403dccbd" compoundref="dbus-connection_8c" startline="287">DBusConnection::slot_list</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga794d0b572e30448fb262618222f76124" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_set_change_sigpipe</definition>
        <argsstring>(dbus_bool_t will_modify_sigpipe)</argsstring>
        <name>dbus_connection_set_change_sigpipe</name>
        <param>
          <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
          <declname>will_modify_sigpipe</declname>
        </param>
        <briefdescription>
<para>This function sets a global flag for whether dbus_connection_new() will set SIGPIPE behavior to SIG_IGN. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>will_modify_sigpipe</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> to allow sigpipe to be set to SIG_IGN </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="6043" column="1" bodyfile="dbus/dbus-connection.c" bodystart="6043" bodyend="6046"/>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga0d783462274a6c71d3767f5821c29ce9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_set_max_message_size</definition>
        <argsstring>(DBusConnection *connection, long size)</argsstring>
        <name>dbus_connection_set_max_message_size</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>long</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Specifies the maximum size message this connection is allowed to receive. </para>        </briefdescription>
        <detaileddescription>
<para>Larger messages will result in disconnecting the connection.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum message size the connection can receive, in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="6057" column="1" bodyfile="dbus/dbus-connection.c" bodystart="6057" bodyend="6066"/>
        <references refid="group__DBusTransport_1ga03ea875260e71f59af708146cabf95ab" compoundref="dbus-transport_8c" startline="1199" endline="1203">_dbus_transport_set_max_message_size</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga7a459e64d7dca7b592136cec0a73422c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>DBUS_EXPORT long dbus_connection_get_max_message_size</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_get_max_message_size</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Gets the value set by <ref refid="group__DBusConnection_1ga0d783462274a6c71d3767f5821c29ce9" kindref="member">dbus_connection_set_max_message_size()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the max size of a single message </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="6075" column="1" bodyfile="dbus/dbus-connection.c" bodystart="6075" bodyend="6085"/>
        <references refid="group__DBusTransport_1gae36d2a90bad6ef13c0379fa9864ff68e" compoundref="dbus-transport_8c" startline="1225" endline="1228">_dbus_transport_get_max_message_size</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga6565d75f16e6e803372b2ae3d94d991b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_set_max_received_size</definition>
        <argsstring>(DBusConnection *connection, long size)</argsstring>
        <name>dbus_connection_set_max_received_size</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>long</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Sets the maximum total number of bytes that can be used for all messages received on this connection. </para>        </briefdescription>
        <detaileddescription>
<para>Messages count toward the maximum until they are finalized. When the maximum is reached, the connection will not read more data until some messages are finalized.</para><para>The semantics of the maximum are: if outstanding messages are already above the maximum, additional messages will not be read. The semantics are not: if the next message would cause us to exceed the maximum, we don&apos;t read it. The reason is that we don&apos;t know the size of a message until after we read it.</para><para>Thus, the max live messages size can actually be exceeded by up to the maximum size of a single message.</para><para>Also, if we read say 1024 bytes off the wire in a single read(), and that contains a half-dozen small messages, we may exceed the size max by that amount. But this should be inconsequential.</para><para>This does imply that we can&apos;t call read() with a buffer larger than we&apos;re willing to exceed this limit by.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum size in bytes of all outstanding messages </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="6152" column="1" bodyfile="dbus/dbus-connection.c" bodystart="6152" bodyend="6161"/>
        <references refid="group__DBusTransport_1ga08e0368732df5f4e58a2c838fe4484f6" compoundref="dbus-transport_8c" startline="1249" endline="1258">_dbus_transport_set_max_received_size</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga376529acf41d1d34b4f46c0d9d515c85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>DBUS_EXPORT long dbus_connection_get_max_received_size</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_get_max_received_size</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Gets the value set by <ref refid="group__DBusConnection_1ga6565d75f16e6e803372b2ae3d94d991b" kindref="member">dbus_connection_set_max_received_size()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the max size of all live messages </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="6170" column="1" bodyfile="dbus/dbus-connection.c" bodystart="6170" bodyend="6180"/>
        <references refid="group__DBusTransport_1ga8992b33d9060a103bd38705462a0ea96" compoundref="dbus-transport_8c" startline="1285" endline="1288">_dbus_transport_get_max_received_size</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga2aadce7d15c0e11983363912292b3fcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_set_max_message_unix_fds</definition>
        <argsstring>(DBusConnection *connection, long n)</argsstring>
        <name>dbus_connection_set_max_message_unix_fds</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Specifies the maximum number of unix fds a message on this connection is allowed to receive. </para>        </briefdescription>
        <detaileddescription>
<para>Messages with more unix fds will result in disconnecting the connection.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum message unix fds the connection can receive </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="6096" column="1" bodyfile="dbus/dbus-connection.c" bodystart="6096" bodyend="6105"/>
        <references refid="group__DBusTransport_1gad005fffd646202e74a789765ae82a40f" compoundref="dbus-transport_8c" startline="1212" endline="1216">_dbus_transport_set_max_message_unix_fds</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga18abaca9a512dbb7b6f921c3df6875d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>DBUS_EXPORT long dbus_connection_get_max_message_unix_fds</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_get_max_message_unix_fds</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Gets the value set by <ref refid="group__DBusConnection_1ga2aadce7d15c0e11983363912292b3fcd" kindref="member">dbus_connection_set_max_message_unix_fds()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the max numer of unix fds of a single message </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="6114" column="1" bodyfile="dbus/dbus-connection.c" bodystart="6114" bodyend="6124"/>
        <references refid="group__DBusTransport_1gaa28e8edd4d849108b158d95eb7da812d" compoundref="dbus-transport_8c" startline="1237" endline="1240">_dbus_transport_get_max_message_unix_fds</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga81e63dc6d9298e8a7f92c0d93d0e80b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_set_max_received_unix_fds</definition>
        <argsstring>(DBusConnection *connection, long n)</argsstring>
        <name>dbus_connection_set_max_received_unix_fds</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Sets the maximum total number of unix fds that can be used for all messages received on this connection. </para>        </briefdescription>
        <detaileddescription>
<para>Messages count toward the maximum until they are finalized. When the maximum is reached, the connection will not read more data until some messages are finalized.</para><para>The semantics are analogous to those of <ref refid="group__DBusConnection_1ga6565d75f16e6e803372b2ae3d94d991b" kindref="member">dbus_connection_set_max_received_size()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum size in bytes of all outstanding messages </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="6194" column="1" bodyfile="dbus/dbus-connection.c" bodystart="6194" bodyend="6203"/>
        <references refid="group__DBusTransport_1gaae297c86eb0b79b6cef4a1f7e4b50356" compoundref="dbus-transport_8c" startline="1267" endline="1276">_dbus_transport_set_max_received_unix_fds</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga219f31132338616f82dc975c070ff418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>DBUS_EXPORT long dbus_connection_get_max_received_unix_fds</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_get_max_received_unix_fds</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Gets the value set by <ref refid="group__DBusConnection_1ga81e63dc6d9298e8a7f92c0d93d0e80b3" kindref="member">dbus_connection_set_max_received_unix_fds()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the max unix fds of all live messages </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="6212" column="1" bodyfile="dbus/dbus-connection.c" bodystart="6212" bodyend="6222"/>
        <references refid="group__DBusTransport_1gacd0b2e68c65dc3b0c1cfdf3fb8358a44" compoundref="dbus-transport_8c" startline="1297" endline="1300">_dbus_transport_get_max_received_unix_fds</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga47aff801f586e7116f9c54532bb1baf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>DBUS_EXPORT long dbus_connection_get_outgoing_size</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_get_outgoing_size</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Gets the approximate size in bytes of all messages in the outgoing message queue. </para>        </briefdescription>
        <detaileddescription>
<para>The size is approximate in that you shouldn&apos;t use it to decide how many bytes to read off the network or anything of that nature, as optimizations may choose to tell small white lies to avoid performance overhead.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of bytes that have been queued up but not sent </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="6235" column="1" bodyfile="dbus/dbus-connection.c" bodystart="6235" bodyend="6245"/>
        <references refid="group__DBusResources_1ga49de078fb626aff30f273933ad5c8b2a" compoundref="dbus-resources_8c" startline="234" endline="237">_dbus_counter_get_size_value</references>
        <references refid="group__DBusResources_1ga25b2d12b9dc4d3525df2b8401f4ce56d" compoundref="dbus-resources_8c" startline="246" endline="249">_dbus_counter_get_unix_fd_value</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" compoundref="dbus-connection_8c" startline="276">DBusConnection::n_incoming</references>
        <references refid="structDBusConnection_1a07025e177949c5e65d5f983ac5f5e878" compoundref="dbus-connection_8c" startline="275">DBusConnection::n_outgoing</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a5dcb660883904035076579c6d2f46501" compoundref="dbus-connection_8c" startline="278">DBusConnection::outgoing_counter</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gad218838fdaa8d36c606723c63e96f453" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>DBUS_EXPORT long dbus_connection_get_outgoing_unix_fds</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_get_outgoing_unix_fds</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Gets the approximate number of uni fds of all messages in the outgoing message queue. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of unix fds that have been queued up but not sent </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="6296" column="1" bodyfile="dbus/dbus-connection.c" bodystart="6296" bodyend="6306"/>
        <references refid="group__DBusResources_1ga25b2d12b9dc4d3525df2b8401f4ce56d" compoundref="dbus-resources_8c" startline="246" endline="249">_dbus_counter_get_unix_fd_value</references>
        <references refid="group__DBusTransport_1gac7e53868392b5e550454f47a1bc0a737" compoundref="dbus-transport_8c" startline="856" endline="859">_dbus_transport_get_address</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a5dcb660883904035076579c6d2f46501" compoundref="dbus-connection_8c" startline="278">DBusConnection::outgoing_counter</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga6136968eba30e8313e668a622fcfb08d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusPreallocatedSend" kindref="compound">DBusPreallocatedSend</ref> *</type>
        <definition>DBUS_EXPORT DBusPreallocatedSend * dbus_connection_preallocate_send</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_preallocate_send</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Preallocates resources needed to send a message, allowing the message to be sent without the possibility of memory allocation failure. </para>        </briefdescription>
        <detaileddescription>
<para>Allows apps to create a future guarantee that they can send a message regardless of memory shortages.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection we&apos;re preallocating for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the preallocated resources, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="3165" column="1" bodyfile="dbus/dbus-connection.c" bodystart="3165" bodyend="3179"/>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gad0ea06307b418616711131ea7bdae8ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_free_preallocated_send</definition>
        <argsstring>(DBusConnection *connection, DBusPreallocatedSend *preallocated)</argsstring>
        <name>dbus_connection_free_preallocated_send</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusPreallocatedSend" kindref="compound">DBusPreallocatedSend</ref> *</type>
          <declname>preallocated</declname>
        </param>
        <briefdescription>
<para>Frees preallocated message-sending resources from <ref refid="group__DBusConnection_1ga6136968eba30e8313e668a622fcfb08d" kindref="member">dbus_connection_preallocate_send()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Should only be called if the preallocated resources are not used to send a message.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>preallocated</parametername>
</parameternamelist>
<parameterdescription>
<para>the resources </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="3191" column="1" bodyfile="dbus/dbus-connection.c" bodystart="3191" bodyend="3202"/>
        <references refid="group__DBusResources_1ga48d9b53d1a395ab3c4f1846ca569ef3f" compoundref="dbus-resources_8c" startline="124" endline="135">_dbus_counter_unref</references>
        <references refid="group__DBusList_1ga6e824f717125ce40c549d5402e32610f" compoundref="dbus-list_8c" startline="254" endline="257">_dbus_list_free_link</references>
        <references refid="structDBusPreallocatedSend_1a465af3647772c89500df0b46f43d035b" compoundref="dbus-connection_8c" startline="242">DBusPreallocatedSend::connection</references>
        <references refid="structDBusPreallocatedSend_1aae6c1bd98f78491482d5f59b6ef138d4" compoundref="dbus-connection_8c" startline="244">DBusPreallocatedSend::counter_link</references>
        <references refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" compoundref="dbus-list_8h" startline="38">DBusList::data</references>
        <references refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" compoundref="dbus-memory_8c" startline="701" endline="740">dbus_free</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusPreallocatedSend_1ae164fe13f866bebbd714b526104c5bff" compoundref="dbus-connection_8c" startline="243">DBusPreallocatedSend::queue_link</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga2fea5f972d1bfe7bcde8c0ec65ca9e90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_connection_send_preallocated</definition>
        <argsstring>(DBusConnection *connection, DBusPreallocatedSend *preallocated, DBusMessage *message, dbus_uint32_t *client_serial)</argsstring>
        <name>dbus_connection_send_preallocated</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusPreallocatedSend" kindref="compound">DBusPreallocatedSend</ref> *</type>
          <declname>preallocated</declname>
        </param>
        <param>
          <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1gaf513803b030613a669cc7ef199f90a8b" kindref="member">dbus_uint32_t</ref> *</type>
          <declname>client_serial</declname>
        </param>
        <briefdescription>
<para>Sends a message using preallocated resources. </para>        </briefdescription>
        <detaileddescription>
<para>This function cannot fail. It works identically to <ref refid="group__DBusConnection_1gae1cb64f4cf550949b23fd3a756b2f7d0" kindref="member">dbus_connection_send()</ref> in other respects. Preallocated resources comes from <ref refid="group__DBusConnection_1ga6136968eba30e8313e668a622fcfb08d" kindref="member">dbus_connection_preallocate_send()</ref>. This function &quot;consumes&quot; the preallocated resources, they need not be freed separately.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>preallocated</parametername>
</parameternamelist>
<parameterdescription>
<para>the preallocated resources </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>client_serial</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for client serial assigned to the message </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="3217" column="1" bodyfile="dbus/dbus-connection.c" bodystart="3217" bodyend="3251"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusTransport_1gab98dc7cad59472a4513489628f1393f1" compoundref="dbus-transport_8c" startline="843" endline="846">_dbus_transport_can_pass_unix_fd</references>
        <references refid="structDBusPreallocatedSend_1a465af3647772c89500df0b46f43d035b" compoundref="dbus-connection_8c" startline="242">DBusPreallocatedSend::connection</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" compoundref="dbus-message_8c" startline="3227" endline="3239">dbus_message_get_interface</references>
        <references refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" compoundref="dbus-message_8c" startline="3313" endline="3325">dbus_message_get_member</references>
        <references refid="group__DBusMessage_1ga41cace31999105137772b6257ea540f9" compoundref="dbus-message_8c" startline="1722" endline="1727">dbus_message_get_type</references>
        <references refid="group__DBusProtocol_1ga09416afd76b65139eddd31e1085d9ebf" compoundref="dbus-protocol_8h" startline="234">DBUS_MESSAGE_TYPE_METHOD_CALL</references>
        <references refid="group__DBusProtocol_1ga728d893ff0c00e126517ba39835220a5" compoundref="dbus-protocol_8h" startline="240">DBUS_MESSAGE_TYPE_SIGNAL</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga708b1e108feed18f5775ff404c9dda4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_try_register_object_path</definition>
        <argsstring>(DBusConnection *connection, const char *path, const DBusObjectPathVTable *vtable, void *user_data, DBusError *error)</argsstring>
        <name>dbus_connection_try_register_object_path</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="structDBusObjectPathVTable" kindref="compound">DBusObjectPathVTable</ref> *</type>
          <declname>vtable</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Registers a handler for a given path in the object hierarchy. </para>        </briefdescription>
        <detaileddescription>
<para>The given vtable handles messages sent to exactly the given path.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>a &apos;/&apos; delimited string of path elements </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vtable</parametername>
</parameternamelist>
<parameterdescription>
<para>the virtual table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to pass to functions in the vtable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>address where an error can be returned </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if an error (<ref refid="group__DBusProtocol_1gac32eaf0b92f798307853cd4fe0cf11c2" kindref="member">DBUS_ERROR_NO_MEMORY</ref> or <ref refid="group__DBusProtocol_1ga6a4358a62f0cd68d637532772475e576" kindref="member">DBUS_ERROR_OBJECT_PATH_IN_USE</ref>) is reported </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="5672" column="1" bodyfile="dbus/dbus-connection.c" bodystart="5672" bodyend="5684"/>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga24730ca6fd2e9132873962a32df7628c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_register_object_path</definition>
        <argsstring>(DBusConnection *connection, const char *path, const DBusObjectPathVTable *vtable, void *user_data)</argsstring>
        <name>dbus_connection_register_object_path</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="structDBusObjectPathVTable" kindref="compound">DBusObjectPathVTable</ref> *</type>
          <declname>vtable</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Registers a handler for a given path in the object hierarchy. </para>        </briefdescription>
        <detaileddescription>
<para>The given vtable handles messages sent to exactly the given path.</para><para>It is a bug to call this function for object paths which already have a handler. Use <ref refid="group__DBusConnection_1ga708b1e108feed18f5775ff404c9dda4b" kindref="member">dbus_connection_try_register_object_path()</ref> if this might be the case.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>a &apos;/&apos; delimited string of path elements </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vtable</parametername>
</parameternamelist>
<parameterdescription>
<para>the virtual table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to pass to functions in the vtable </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if an error (<ref refid="group__DBusProtocol_1gac32eaf0b92f798307853cd4fe0cf11c2" kindref="member">DBUS_ERROR_NO_MEMORY</ref> or <ref refid="group__DBusProtocol_1ga6a4358a62f0cd68d637532772475e576" kindref="member">DBUS_ERROR_OBJECT_PATH_IN_USE</ref>) ocurred </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="5702" column="1" bodyfile="dbus/dbus-connection.c" bodystart="5702" bodyend="5725"/>
        <references refid="group__DBusInternalsUtils_1gabea2c16d6d3fe7c4eb5b9496fc877f84" compoundref="dbus-internals_8c" startline="230" endline="247">_dbus_warn</references>
        <references refid="group__DBusErrors_1gaac6c14ead14829ee4e090f39de6a7568" compoundref="dbus-errors_8c" startline="211" endline="226">dbus_error_free</references>
        <references refid="group__DBusErrors_1ga48515c580199514026542fe053ef1887" compoundref="dbus-errors_8c" startline="302" endline="320">dbus_error_has_name</references>
        <references refid="group__DBusErrorInternals_1ga961cc70e3891282a65205c4c8418d88e" compoundref="dbus-errors_8h" startline="62">DBUS_ERROR_INIT</references>
        <references refid="group__DBusProtocol_1ga6a4358a62f0cd68d637532772475e576" compoundref="dbus-protocol_8h" startline="450">DBUS_ERROR_OBJECT_PATH_IN_USE</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusError_1afb559175326de5b6b340e26204e92d72" compoundref="dbus-errors_8h" startline="51">DBusError::message</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga8e9d2d4ff17c3071124e4993d1536ed4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_try_register_fallback</definition>
        <argsstring>(DBusConnection *connection, const char *path, const DBusObjectPathVTable *vtable, void *user_data, DBusError *error)</argsstring>
        <name>dbus_connection_try_register_fallback</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="structDBusObjectPathVTable" kindref="compound">DBusObjectPathVTable</ref> *</type>
          <declname>vtable</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Registers a fallback handler for a given subsection of the object hierarchy. </para>        </briefdescription>
        <detaileddescription>
<para>The given vtable handles messages at or below the given path. You can use this to establish a default message handling policy for a whole &quot;subdirectory.&quot;</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>a &apos;/&apos; delimited string of path elements </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vtable</parametername>
</parameternamelist>
<parameterdescription>
<para>the virtual table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to pass to functions in the vtable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>address where an error can be returned </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if an error (<ref refid="group__DBusProtocol_1gac32eaf0b92f798307853cd4fe0cf11c2" kindref="member">DBUS_ERROR_NO_MEMORY</ref> or <ref refid="group__DBusProtocol_1ga6a4358a62f0cd68d637532772475e576" kindref="member">DBUS_ERROR_OBJECT_PATH_IN_USE</ref>) is reported </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="5742" column="1" bodyfile="dbus/dbus-connection.c" bodystart="5742" bodyend="5754"/>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1gac4473b37bfa74ccf7459959d27e7bc59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_register_fallback</definition>
        <argsstring>(DBusConnection *connection, const char *path, const DBusObjectPathVTable *vtable, void *user_data)</argsstring>
        <name>dbus_connection_register_fallback</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="structDBusObjectPathVTable" kindref="compound">DBusObjectPathVTable</ref> *</type>
          <declname>vtable</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
<para>Registers a fallback handler for a given subsection of the object hierarchy. </para>        </briefdescription>
        <detaileddescription>
<para>The given vtable handles messages at or below the given path. You can use this to establish a default message handling policy for a whole &quot;subdirectory.&quot;</para><para>It is a bug to call this function for object paths which already have a handler. Use <ref refid="group__DBusConnection_1ga8e9d2d4ff17c3071124e4993d1536ed4" kindref="member">dbus_connection_try_register_fallback()</ref> if this might be the case.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>a &apos;/&apos; delimited string of path elements </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vtable</parametername>
</parameternamelist>
<parameterdescription>
<para>the virtual table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to pass to functions in the vtable </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if an error (<ref refid="group__DBusProtocol_1gac32eaf0b92f798307853cd4fe0cf11c2" kindref="member">DBUS_ERROR_NO_MEMORY</ref> or <ref refid="group__DBusProtocol_1ga6a4358a62f0cd68d637532772475e576" kindref="member">DBUS_ERROR_OBJECT_PATH_IN_USE</ref>) occured </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="5774" column="1" bodyfile="dbus/dbus-connection.c" bodystart="5774" bodyend="5797"/>
        <references refid="group__DBusInternalsUtils_1gabea2c16d6d3fe7c4eb5b9496fc877f84" compoundref="dbus-internals_8c" startline="230" endline="247">_dbus_warn</references>
        <references refid="group__DBusErrors_1gaac6c14ead14829ee4e090f39de6a7568" compoundref="dbus-errors_8c" startline="211" endline="226">dbus_error_free</references>
        <references refid="group__DBusErrors_1ga48515c580199514026542fe053ef1887" compoundref="dbus-errors_8c" startline="302" endline="320">dbus_error_has_name</references>
        <references refid="group__DBusErrorInternals_1ga961cc70e3891282a65205c4c8418d88e" compoundref="dbus-errors_8h" startline="62">DBUS_ERROR_INIT</references>
        <references refid="group__DBusProtocol_1ga6a4358a62f0cd68d637532772475e576" compoundref="dbus-protocol_8h" startline="450">DBUS_ERROR_OBJECT_PATH_IN_USE</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusError_1afb559175326de5b6b340e26204e92d72" compoundref="dbus-errors_8h" startline="51">DBusError::message</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga6ae8f005dedf24c5f2df1768795392fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_unregister_object_path</definition>
        <argsstring>(DBusConnection *connection, const char *path)</argsstring>
        <name>dbus_connection_unregister_object_path</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Unregisters the handler registered with exactly the given path. </para>        </briefdescription>
        <detaileddescription>
<para>It&apos;s a bug to call this function for a path that isn&apos;t registered. Can unregister both fallback paths and object paths.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>a &apos;/&apos; delimited string of path elements </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if not enough memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="5809" column="1" bodyfile="dbus/dbus-connection.c" bodystart="5809" bodyend="5828"/>
        <references refid="group__DBusObjectTree_1gab282b916368cd512842d3aaae31e65c7" compoundref="dbus-object-tree_8c" startline="1242" endline="1325">_dbus_decompose_path</references>
        <references refid="group__DBusObjectTree_1ga3babe73ed342b6963997ef2efd73ef75" compoundref="dbus-object-tree_8c" startline="623" endline="677">_dbus_object_tree_unregister_and_unlock</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" compoundref="dbus-memory_8c" startline="749" endline="764">dbus_free_string_array</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" compoundref="dbus-connection_8c" startline="304">DBusConnection::objects</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga08ee6e70b74c294fe24d0f391f16db24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_get_object_path_data</definition>
        <argsstring>(DBusConnection *connection, const char *path, void **data_p)</argsstring>
        <name>dbus_connection_get_object_path_data</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>data_p</declname>
        </param>
        <briefdescription>
<para>Gets the user data passed to <ref refid="group__DBusConnection_1ga24730ca6fd2e9132873962a32df7628c" kindref="member">dbus_connection_register_object_path()</ref> or <ref refid="group__DBusConnection_1gac4473b37bfa74ccf7459959d27e7bc59" kindref="member">dbus_connection_register_fallback()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>If nothing was registered at this path, the data is filled in with <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>the path you registered with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_p</parametername>
</parameternamelist>
<parameterdescription>
<para>location to store the user data, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if not enough memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="5841" column="1" bodyfile="dbus/dbus-connection.c" bodystart="5841" bodyend="5865"/>
        <references refid="group__DBusObjectTree_1gab282b916368cd512842d3aaae31e65c7" compoundref="dbus-object-tree_8c" startline="1242" endline="1325">_dbus_decompose_path</references>
        <references refid="group__DBusObjectTree_1ga4cf5a5f35d2bd18b6fa8aa58ba6b5de4" compoundref="dbus-object-tree_8c" startline="1075" endline="1094">_dbus_object_tree_get_user_data_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" compoundref="dbus-memory_8c" startline="749" endline="764">dbus_free_string_array</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" compoundref="dbus-connection_8c" startline="304">DBusConnection::objects</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga3e9de2067d0eed66ef73230fae8d8be2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_list_registered</definition>
        <argsstring>(DBusConnection *connection, const char *parent_path, char ***child_entries)</argsstring>
        <name>dbus_connection_list_registered</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>parent_path</declname>
        </param>
        <param>
          <type>char ***</type>
          <declname>child_entries</declname>
        </param>
        <briefdescription>
<para>Lists the registered fallback handlers and object path handlers at the given parent_path. </para>        </briefdescription>
        <detaileddescription>
<para>The returned array should be freed with <ref refid="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" kindref="member">dbus_free_string_array()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parent_path</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to list the child handlers of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>child_entries</parametername>
</parameternamelist>
<parameterdescription>
<para>returns <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>-terminated array of children </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if no memory to allocate the child entries </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="5878" column="1" bodyfile="dbus/dbus-connection.c" bodystart="5878" bodyend="5900"/>
        <references refid="group__DBusObjectTree_1gab282b916368cd512842d3aaae31e65c7" compoundref="dbus-object-tree_8c" startline="1242" endline="1325">_dbus_decompose_path</references>
        <references refid="group__DBusInternalsUtils_1gade571435b55fae64217f5142aa78ee8d" compoundref="dbus-internals_8h" startline="328">_DBUS_LOCK_NAME</references>
        <references refid="group__DBusObjectTree_1gaab7040bd1bf037d99e9bbb75d0869a2f" compoundref="dbus-object-tree_8c" startline="1206" endline="1225">_dbus_object_tree_list_registered_and_unlock</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" compoundref="dbus-memory_8c" startline="749" endline="764">dbus_free_string_array</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" compoundref="dbus-connection_8c" startline="304">DBusConnection::objects</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga38297f511f4124accdfa68c321e081cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_get_unix_fd</definition>
        <argsstring>(DBusConnection *connection, int *fd)</argsstring>
        <name>dbus_connection_get_unix_fd</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
<para>Get the UNIX file descriptor of the connection, if any. </para>        </briefdescription>
        <detaileddescription>
<para>This can be used for SELinux access control checks with getpeercon() for example. DO NOT read or write to the file descriptor, or try to select() on it; use <ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> for main loop integration. Not all connections will have a file descriptor. So for adding descriptors to the main loop, use <ref refid="group__DBusWatch_1ga15df7f6120ead3e09bec8a70d3c43c0d" kindref="member">dbus_watch_get_unix_fd()</ref> and so forth.</para><para>If the connection is socket-based, you can also use <ref refid="group__DBusConnection_1ga1c14590d77b148390bde9e82a7544434" kindref="member">dbus_connection_get_socket()</ref>, which will work on Windows too. This function always fails on Windows.</para><para>Right now the returned descriptor is always a socket, but that is not guaranteed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for the file descriptor. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if fd is successfully obtained. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="5118" column="1" bodyfile="dbus/dbus-connection.c" bodystart="5118" bodyend="5130"/>
        <references refid="group__DBusConnection_1ga1c14590d77b148390bde9e82a7544434" compoundref="dbus-connection_8c" startline="5148" endline="5164">dbus_connection_get_socket</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnection_1ga1c14590d77b148390bde9e82a7544434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_connection_get_socket</definition>
        <argsstring>(DBusConnection *connection, int *fd)</argsstring>
        <name>dbus_connection_get_socket</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
<para>Gets the underlying Windows or UNIX socket file descriptor of the connection, if any. </para>        </briefdescription>
        <detaileddescription>
<para>DO NOT read or write to the file descriptor, or try to select() on it; use <ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> for main loop integration. Not all connections will have a socket. So for adding descriptors to the main loop, use <ref refid="group__DBusWatch_1ga91308f393d41b31babda17c83833517f" kindref="member">dbus_watch_get_socket()</ref> and so forth.</para><para>If the connection is not socket-based, this function will return FALSE, even if the connection does have a file descriptor of some kind. i.e. this function always returns specifically a socket file descriptor.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for the file descriptor. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if fd is successfully obtained. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="5148" column="1" bodyfile="dbus/dbus-connection.c" bodystart="5148" bodyend="5164"/>
        <references refid="group__DBusTransport_1gac58d38eb19b39774f89271fc6472e087" compoundref="dbus-transport_8c" startline="951" endline="970">_dbus_transport_get_socket_fd</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
        <referencedby refid="group__DBusConnection_1ga38297f511f4124accdfa68c321e081cc" compoundref="dbus-connection_8c" startline="5118" endline="5130">dbus_connection_get_unix_fd</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusWatch_1ga62d7e86fe386ed48fb90d443b3a2ce7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DBUS_EXPORT <ref refid="group__DBusMacros_1ga7b014fa99f6ef38c1aa5a9c02468e3a0" kindref="member">DBUS_DEPRECATED</ref> int</type>
        <definition>int dbus_watch_get_fd</definition>
        <argsstring>(DBusWatch *watch)</argsstring>
        <name>dbus_watch_get_fd</name>
        <param>
          <type><ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> *</type>
          <declname>watch</declname>
        </param>
        <briefdescription>
<para>Deprecated former name of <ref refid="group__DBusWatch_1ga15df7f6120ead3e09bec8a70d3c43c0d" kindref="member">dbus_watch_get_unix_fd()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>watch</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> object. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the file descriptor to watch. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="451" column="1" bodyfile="dbus/dbus-watch.c" bodystart="536" bodyend="541"/>
        <references refid="group__DBusWatch_1ga15df7f6120ead3e09bec8a70d3c43c0d" compoundref="dbus-watch_8c" startline="557" endline="571">dbus_watch_get_unix_fd</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusWatch_1ga15df7f6120ead3e09bec8a70d3c43c0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DBUS_EXPORT int</type>
        <definition>int dbus_watch_get_unix_fd</definition>
        <argsstring>(DBusWatch *watch)</argsstring>
        <name>dbus_watch_get_unix_fd</name>
        <param>
          <type><ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> *</type>
          <declname>watch</declname>
        </param>
        <briefdescription>
<para>Returns a UNIX file descriptor to be watched, which may be a pipe, socket, or other type of descriptor. </para>        </briefdescription>
        <detaileddescription>
<para>On UNIX this is preferred to <ref refid="group__DBusWatch_1ga91308f393d41b31babda17c83833517f" kindref="member">dbus_watch_get_socket()</ref> since it works with more kinds of <ref refid="structDBusWatch" kindref="compound">DBusWatch</ref>.</para><para>Always returns -1 on Windows. On Windows you use <ref refid="group__DBusWatch_1ga91308f393d41b31babda17c83833517f" kindref="member">dbus_watch_get_socket()</ref> to get a Winsock socket to watch.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>watch</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> object. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the file descriptor to watch. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="455" column="1" bodyfile="dbus/dbus-watch.c" bodystart="557" bodyend="571"/>
        <references refid="group__DBusWatch_1ga91308f393d41b31babda17c83833517f" compoundref="dbus-watch_8c" startline="586" endline="591">dbus_watch_get_socket</references>
        <references refid="structDBusWatch_1ab4021cce958b50cbcda5eeabc6af2217" compoundref="dbus-watch_8c" startline="43">DBusWatch::fd</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusWatch_1ga62d7e86fe386ed48fb90d443b3a2ce7a" compoundref="dbus-watch_8c" startline="536" endline="541">dbus_watch_get_fd</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusWatch_1ga91308f393d41b31babda17c83833517f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DBUS_EXPORT int</type>
        <definition>int dbus_watch_get_socket</definition>
        <argsstring>(DBusWatch *watch)</argsstring>
        <name>dbus_watch_get_socket</name>
        <param>
          <type><ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> *</type>
          <declname>watch</declname>
        </param>
        <briefdescription>
<para>Returns a socket to be watched, on UNIX this will return -1 if our transport is not socket-based so <ref refid="group__DBusWatch_1ga15df7f6120ead3e09bec8a70d3c43c0d" kindref="member">dbus_watch_get_unix_fd()</ref> is preferred. </para>        </briefdescription>
        <detaileddescription>
<para>On Windows, <ref refid="group__DBusWatch_1ga15df7f6120ead3e09bec8a70d3c43c0d" kindref="member">dbus_watch_get_unix_fd()</ref> returns -1 but this function returns a Winsock socket (assuming the transport is socket-based, as it always is for now).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>watch</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> object. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the socket to watch. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="457" column="1" bodyfile="dbus/dbus-watch.c" bodystart="586" bodyend="591"/>
        <references refid="structDBusWatch_1ab4021cce958b50cbcda5eeabc6af2217" compoundref="dbus-watch_8c" startline="43">DBusWatch::fd</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusInternalsUtils_1ga5f467b14f0c2f667e46c4ba786808e5b" compoundref="dbus-spawn_8c" startline="813" endline="826">_dbus_babysitter_set_watch_functions</referencedby>
        <referencedby refid="group__DBusTransport_1ga4a010098fe079eb6f201ff034d15fdff" compoundref="dbus-transport_8c" startline="889" endline="915">_dbus_transport_handle_watch</referencedby>
        <referencedby refid="group__DBusWatchInternals_1gaec61655a4bd6186a6a1ec104771d8af5" compoundref="dbus-watch_8c" startline="376" endline="399">_dbus_watch_list_add_watch</referencedby>
        <referencedby refid="group__DBusWatchInternals_1ga76894d297bc7d7d23cbacdc2b1778884" compoundref="dbus-watch_8c" startline="409" endline="425">_dbus_watch_list_remove_watch</referencedby>
        <referencedby refid="group__DBusWatchInternals_1gae9ab8cf14f4191191e94183be9a031d9" compoundref="dbus-watch_8c" startline="296" endline="365">_dbus_watch_list_set_functions</referencedby>
        <referencedby refid="group__DBusWatchInternals_1ga14bb50e8663a1d9d3960b4f73c09c097" compoundref="dbus-watch_8c" startline="436" endline="455">_dbus_watch_list_toggle_watch</referencedby>
        <referencedby refid="group__DBusWatch_1ga15df7f6120ead3e09bec8a70d3c43c0d" compoundref="dbus-watch_8c" startline="557" endline="571">dbus_watch_get_unix_fd</referencedby>
        <referencedby refid="group__DBusWatch_1ga5c75a65cf0680956cc0188d86a05cfae" compoundref="dbus-watch_8c" startline="642" endline="657">dbus_watch_set_data</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusWatch_1gaf172a2b1d1f82333e67cec8d99c9204a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DBUS_EXPORT unsigned int</type>
        <definition>unsigned int dbus_watch_get_flags</definition>
        <argsstring>(DBusWatch *watch)</argsstring>
        <name>dbus_watch_get_flags</name>
        <param>
          <type><ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> *</type>
          <declname>watch</declname>
        </param>
        <briefdescription>
<para>Gets flags from DBusWatchFlags indicating what conditions should be monitored on the file descriptor. </para>        </briefdescription>
        <detaileddescription>
<para>The flags returned will only contain DBUS_WATCH_READABLE and DBUS_WATCH_WRITABLE, never DBUS_WATCH_HANGUP or DBUS_WATCH_ERROR; all watches implicitly include a watch for hangups, errors, and other exceptional conditions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>watch</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> object. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the conditions to watch. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="459" column="1" bodyfile="dbus/dbus-watch.c" bodystart="607" bodyend="613"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="structDBusWatch_1a7f1c2c609410f58a2328681c2893f70a" compoundref="dbus-watch_8c" startline="44">DBusWatch::flags</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusWatchInternals_1gae9ab8cf14f4191191e94183be9a031d9" compoundref="dbus-watch_8c" startline="296" endline="365">_dbus_watch_list_set_functions</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusWatch_1ga8dcdbd07f15a56207af4a36cb005da77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DBUS_EXPORT void *</type>
        <definition>void * dbus_watch_get_data</definition>
        <argsstring>(DBusWatch *watch)</argsstring>
        <name>dbus_watch_get_data</name>
        <param>
          <type><ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> *</type>
          <declname>watch</declname>
        </param>
        <briefdescription>
<para>Gets data previously set with <ref refid="group__DBusWatch_1ga5c75a65cf0680956cc0188d86a05cfae" kindref="member">dbus_watch_set_data()</ref> or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if none. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>watch</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> object. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>previously-set data. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="461" column="1" bodyfile="dbus/dbus-watch.c" bodystart="623" bodyend="628"/>
        <references refid="structDBusWatch_1a71877a39d8c2a7d533c0c6f280648d53" compoundref="dbus-watch_8c" startline="50">DBusWatch::data</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusWatch_1ga5c75a65cf0680956cc0188d86a05cfae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DBUS_EXPORT void</type>
        <definition>void dbus_watch_set_data</definition>
        <argsstring>(DBusWatch *watch, void *data, DBusFreeFunction free_data_function)</argsstring>
        <name>dbus_watch_set_data</name>
        <param>
          <type><ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> *</type>
          <declname>watch</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref></type>
          <declname>free_data_function</declname>
        </param>
        <briefdescription>
<para>Sets data which can be retrieved with <ref refid="group__DBusWatch_1ga8dcdbd07f15a56207af4a36cb005da77" kindref="member">dbus_watch_get_data()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Intended for use by the DBusAddWatchFunction and DBusRemoveWatchFunction to store their own data. For example with Qt you might store the QSocketNotifier for this watch and with GLib you might store a GSource.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>watch</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_data_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to be called to free the data. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="463" column="1" bodyfile="dbus/dbus-watch.c" bodystart="642" bodyend="657"/>
        <references refid="structDBusWatch_1a71877a39d8c2a7d533c0c6f280648d53" compoundref="dbus-watch_8c" startline="50">DBusWatch::data</references>
        <references refid="group__DBusWatch_1ga91308f393d41b31babda17c83833517f" compoundref="dbus-watch_8c" startline="586" endline="591">dbus_watch_get_socket</references>
        <references refid="structDBusWatch_1ad848cbd636518fd346039d0d771ba021" compoundref="dbus-watch_8c" startline="51">DBusWatch::free_data_function</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusWatchInternals_1ga7d27dfc13a3ccfbaa99ceab331bb46f0" compoundref="dbus-watch_8c" startline="138" endline="156">_dbus_watch_unref</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusWatch_1gac2acdb1794450ac01a43ec4c3e07ebf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DBUS_EXPORT <ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t dbus_watch_handle</definition>
        <argsstring>(DBusWatch *watch, unsigned int flags)</argsstring>
        <name>dbus_watch_handle</name>
        <param>
          <type><ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> *</type>
          <declname>watch</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Called to notify the D-Bus library when a previously-added watch is ready for reading or writing, or has an exception such as a hangup. </para>        </briefdescription>
        <detaileddescription>
<para>If this function returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>, then the file descriptor may still be ready for reading or writing, but more memory is needed in order to do the reading or writing. If you ignore the <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> return, your application may spin in a busy loop on the file descriptor until memory becomes available, but nothing more catastrophic should happen.</para><para><ref refid="group__DBusWatch_1gac2acdb1794450ac01a43ec4c3e07ebf7" kindref="member">dbus_watch_handle()</ref> cannot be called during the DBusAddWatchFunction, as the connection will not be ready to handle that watch yet.</para><para>It is not allowed to reference a <ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> after it has been passed to remove_function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>watch</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>the poll condition using <ref refid="group__DBusConnection_1ga0556779e61aeb19eb9cf6b6466bd1b98" kindref="member">DBusWatchFlags</ref> values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if there wasn&apos;t enough memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="467" column="1" bodyfile="dbus/dbus-watch.c" bodystart="698" bodyend="724"/>
        <references refid="group__DBusInternalsUtils_1ga63f2f8a068454b781f214ba596e313b4" compoundref="dbus-internals_8c" startline="258" endline="277">_dbus_warn_check_failed</references>
        <references refid="group__DBusWatchInternals_1gab8f49926fe9ee56cb4ae7c1c8071cca3" compoundref="dbus-watch_8c" startline="185" endline="192">_dbus_watch_sanitize_condition</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusWatch_1ab4021cce958b50cbcda5eeabc6af2217" compoundref="dbus-watch_8c" startline="43">DBusWatch::fd</references>
        <references refid="structDBusWatch_1a7f1c2c609410f58a2328681c2893f70a" compoundref="dbus-watch_8c" startline="44">DBusWatch::flags</references>
        <references refid="structDBusWatch_1aad3fb97da0ad7e5897611930f7a1c3e9" compoundref="dbus-watch_8c" startline="46">DBusWatch::handler</references>
        <references refid="structDBusWatch_1ae906b28caa8a4323f85c882abe901e87" compoundref="dbus-watch_8c" startline="47">DBusWatch::handler_data</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusWatch_1gae7a91e6d4d1bc187419c47c522e33a8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DBUS_EXPORT <ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t dbus_watch_get_enabled</definition>
        <argsstring>(DBusWatch *watch)</argsstring>
        <name>dbus_watch_get_enabled</name>
        <param>
          <type><ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> *</type>
          <declname>watch</declname>
        </param>
        <briefdescription>
<para>Returns whether a watch is enabled or not. </para>        </briefdescription>
        <detaileddescription>
<para>If not enabled, it should not be polled by the main loop.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>watch</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the watch is enabled </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="470" column="1" bodyfile="dbus/dbus-watch.c" bodystart="667" bodyend="672"/>
        <references refid="structDBusWatch_1a010564b43e0c7dd438b9ac4b0c1dbe64" compoundref="dbus-watch_8c" startline="52">DBusWatch::enabled</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusTimeout_1ga67ba21b6189438875c6007ee79da5e37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DBUS_EXPORT int</type>
        <definition>int dbus_timeout_get_interval</definition>
        <argsstring>(DBusTimeout *timeout)</argsstring>
        <name>dbus_timeout_get_interval</name>
        <param>
          <type><ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref> *</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Gets the timeout interval. </para>        </briefdescription>
        <detaileddescription>
<para>The <ref refid="group__DBusTimeout_1ga038b67c8d3db2624a1e4a8bc45f25d12" kindref="member">dbus_timeout_handle()</ref> should be called each time this interval elapses, starting after it elapses once.</para><para>The interval may change during the life of the timeout; if so, the timeout will be disabled and re-enabled (calling the &quot;timeout toggled function&quot;) to notify you of the change.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref> object. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the interval in milliseconds. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="480" column="1" bodyfile="dbus/dbus-timeout.c" bodystart="416" bodyend="419"/>
        <references refid="structDBusTimeout_1a8772f07a4695be987e7d0fea1b80ba16" compoundref="dbus-timeout_8c" startline="43">DBusTimeout::interval</references>
        <referencedby refid="group__DBusConnectionInternals_1gad5e725e66dc16a411544e25675fb9fba" compoundref="dbus-connection_8c" startline="2379" endline="2550">_dbus_connection_block_pending_call</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusTimeout_1ga7c561ec66daa2f53a274485f10c827c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DBUS_EXPORT void *</type>
        <definition>void * dbus_timeout_get_data</definition>
        <argsstring>(DBusTimeout *timeout)</argsstring>
        <name>dbus_timeout_get_data</name>
        <param>
          <type><ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref> *</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Gets data previously set with <ref refid="group__DBusTimeout_1ga88712006f7772174504a0fba0a0ddd60" kindref="member">dbus_timeout_set_data()</ref> or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if none. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref> object. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>previously-set data. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="482" column="1" bodyfile="dbus/dbus-timeout.c" bodystart="429" bodyend="432"/>
        <references refid="structDBusTimeout_1a16cb374453e70f3951d02bcba73c1845" compoundref="dbus-timeout_8c" startline="49">DBusTimeout::data</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusTimeout_1ga88712006f7772174504a0fba0a0ddd60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DBUS_EXPORT void</type>
        <definition>void dbus_timeout_set_data</definition>
        <argsstring>(DBusTimeout *timeout, void *data, DBusFreeFunction free_data_function)</argsstring>
        <name>dbus_timeout_set_data</name>
        <param>
          <type><ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref> *</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref></type>
          <declname>free_data_function</declname>
        </param>
        <briefdescription>
<para>Sets data which can be retrieved with <ref refid="group__DBusTimeout_1ga7c561ec66daa2f53a274485f10c827c7" kindref="member">dbus_timeout_get_data()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Intended for use by the DBusAddTimeoutFunction and DBusRemoveTimeoutFunction to store their own data. For example with Qt you might store the QTimer for this timeout and with GLib you might store a g_timeout_add result id.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref> object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_data_function</parametername>
</parameternamelist>
<parameterdescription>
<para>function to be called to free the data. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="484" column="1" bodyfile="dbus/dbus-timeout.c" bodystart="446" bodyend="455"/>
        <references refid="structDBusTimeout_1a16cb374453e70f3951d02bcba73c1845" compoundref="dbus-timeout_8c" startline="49">DBusTimeout::data</references>
        <references refid="structDBusTimeout_1af7ff88e58a10f4ed49a0838e0c930be0" compoundref="dbus-timeout_8c" startline="50">DBusTimeout::free_data_function</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusTimeoutInternals_1gaea6359793576a2eec42e27267bae7bbd" compoundref="dbus-timeout_8c" startline="107" endline="122">_dbus_timeout_unref</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusTimeout_1ga038b67c8d3db2624a1e4a8bc45f25d12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DBUS_EXPORT <ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t dbus_timeout_handle</definition>
        <argsstring>(DBusTimeout *timeout)</argsstring>
        <name>dbus_timeout_handle</name>
        <param>
          <type><ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref> *</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Calls the timeout handler for this timeout. </para>        </briefdescription>
        <detaileddescription>
<para>This function should be called when the timeout occurs.</para><para>If this function returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>, then there wasn&apos;t enough memory to handle the timeout. Typically just letting the timeout fire again next time it naturally times out is an adequate response to that problem, but you could try to do more if you wanted.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref> object. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if there wasn&apos;t enough memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="488" column="1" bodyfile="dbus/dbus-timeout.c" bodystart="472" bodyend="475"/>
        <references refid="structDBusTimeout_1a362a61722d3fae5c18c93654a57aa377" compoundref="dbus-timeout_8c" startline="45">DBusTimeout::handler</references>
        <references refid="structDBusTimeout_1a58a22bfb2f7f0543745c2d56fa9f63a1" compoundref="dbus-timeout_8c" startline="46">DBusTimeout::handler_data</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusTimeout_1ga58954b2edb45ec1632529d35525ea45c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DBUS_EXPORT <ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t dbus_timeout_get_enabled</definition>
        <argsstring>(DBusTimeout *timeout)</argsstring>
        <name>dbus_timeout_get_enabled</name>
        <param>
          <type><ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref> *</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Returns whether a timeout is enabled or not. </para>        </briefdescription>
        <detaileddescription>
<para>If not enabled, it should not be polled by the main loop.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref> object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the timeout is enabled </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.h" line="490" column="1" bodyfile="dbus/dbus-timeout.c" bodystart="486" bodyend="489"/>
        <references refid="structDBusTimeout_1a35ac546656105d0fe1929d4e3d224503" compoundref="dbus-timeout_8c" startline="51">DBusTimeout::enabled</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>mode:<sp/>C;<sp/>c-file-style:<sp/>&quot;gnu&quot;;<sp/>indent-tabs-mode:<sp/>nil;<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>dbus-connection.h<sp/>DBusConnection<sp/>object</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2002,<sp/>2003<sp/><sp/>Red<sp/>Hat<sp/>Inc.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Academic<sp/>Free<sp/>License<sp/>version<sp/>2.1</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>Street,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA<sp/><sp/>02110-1301<sp/><sp/>USA</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined<sp/>(DBUS_INSIDE_DBUS_H)<sp/>&amp;&amp;<sp/>!defined<sp/>(DBUS_COMPILATION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;Only<sp/>&lt;dbus/dbus.h&gt;<sp/>can<sp/>be<sp/>included<sp/>directly,<sp/>this<sp/>file<sp/>may<sp/>disappear<sp/>or<sp/>change<sp/>contents.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DBUS_CONNECTION_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DBUS_CONNECTION_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dbus/dbus-errors.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dbus/dbus-memory.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dbus/dbus-message.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dbus/dbus-shared.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><ref refid="group__DBusMacros_1ga875146b01015e9ced22b25d76d549ab2" kindref="member">DBUS_BEGIN_DECLS</ref></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="comment">/*<sp/>documented<sp/>in<sp/>dbus-watch.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="group__DBusWatch_1gaa5aa1734b328af3a18116d4a8a157721" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDBusWatch" kindref="compound">DBusWatch</ref><sp/><ref refid="structDBusWatch" kindref="compound">DBusWatch</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>documented<sp/>in<sp/>dbus-timeout.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="group__DBusTimeout_1ga6f0a4887747250a5fc9daeeb32b2d6af" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref><sp/><ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref>;</highlight></codeline>
<codeline lineno="47" refid="group__DBusConnection_1gaadc8a802cfffb0719d394609d9cd2186" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDBusPreallocatedSend" kindref="compound">DBusPreallocatedSend</ref><sp/><ref refid="structDBusPreallocatedSend" kindref="compound">DBusPreallocatedSend</ref>;</highlight></codeline>
<codeline lineno="49" refid="group__DBusPendingCall_1gad7fe26d49b2979777dd8d64bf2be0a71" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref><sp/><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref>;</highlight></codeline>
<codeline lineno="51" refid="group__DBusConnection_1ga168c25556d88c296ebc64f1d7b20f699" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref>;</highlight></codeline>
<codeline lineno="53" refid="group__DBusConnection_1ga4dd10016d1f17d1a2fbf0ad913c90427" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDBusObjectPathVTable" kindref="compound">DBusObjectPathVTable</ref><sp/><ref refid="structDBusObjectPathVTable" kindref="compound">DBusObjectPathVTable</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="group__DBusConnection_1ga0556779e61aeb19eb9cf6b6466bd1b98" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60" refid="group__DBusConnection_1gga0556779e61aeb19eb9cf6b6466bd1b98a178bd7a88e9bfbb8505db76eb7e0ccc4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1gga0556779e61aeb19eb9cf6b6466bd1b98a178bd7a88e9bfbb8505db76eb7e0ccc4" kindref="member">DBUS_WATCH_READABLE</ref><sp/>=<sp/>1<sp/>&lt;&lt;<sp/>0,<sp/></highlight></codeline>
<codeline lineno="61" refid="group__DBusConnection_1gga0556779e61aeb19eb9cf6b6466bd1b98a62ddca29b06bfbbc08bb7f3dfd3d307f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1gga0556779e61aeb19eb9cf6b6466bd1b98a62ddca29b06bfbbc08bb7f3dfd3d307f" kindref="member">DBUS_WATCH_WRITABLE</ref><sp/>=<sp/>1<sp/>&lt;&lt;<sp/>1,<sp/></highlight></codeline>
<codeline lineno="62" refid="group__DBusConnection_1gga0556779e61aeb19eb9cf6b6466bd1b98ab1474e26aa5be3d2876dd86bbe452156" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1gga0556779e61aeb19eb9cf6b6466bd1b98ab1474e26aa5be3d2876dd86bbe452156" kindref="member">DBUS_WATCH_ERROR</ref><sp/><sp/><sp/><sp/>=<sp/>1<sp/>&lt;&lt;<sp/>2,<sp/></highlight></codeline>
<codeline lineno="67" refid="group__DBusConnection_1gga0556779e61aeb19eb9cf6b6466bd1b98a7a361a1a03f463c3c9e57f7368a0bfe4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1gga0556779e61aeb19eb9cf6b6466bd1b98a7a361a1a03f463c3c9e57f7368a0bfe4" kindref="member">DBUS_WATCH_HANGUP</ref><sp/><sp/><sp/>=<sp/>1<sp/>&lt;&lt;<sp/>3<sp/><sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Internal<sp/>to<sp/>libdbus,<sp/>there<sp/>is<sp/>also<sp/>_DBUS_WATCH_NVAL<sp/>in<sp/>dbus-watch.h<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">}<sp/><ref refid="group__DBusConnection_1ga0556779e61aeb19eb9cf6b6466bd1b98" kindref="member">DBusWatchFlags</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81" refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" kindref="member">DBUS_DISPATCH_DATA_REMAINS</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="82" refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2acb9bb9daa90f520d5fc9e84de3c5f017" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2acb9bb9daa90f520d5fc9e84de3c5f017" kindref="member">DBUS_DISPATCH_COMPLETE</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="83" refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2a5af20a035f29cfa67fb8d69fb693b685" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2a5af20a035f29cfa67fb8d69fb693b685" kindref="member">DBUS_DISPATCH_NEED_MEMORY</ref><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal">}<sp/><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member">DBusDispatchStatus</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="group__DBusConnection_1ga285ce1f8bb94ef2f89f23db3de8cfe4b" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/>(*<sp/><ref refid="group__DBusConnection_1ga285ce1f8bb94ef2f89f23db3de8cfe4b" kindref="member">DBusAddWatchFunction</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusWatch" kindref="compound">DBusWatch</ref><sp/><sp/><sp/><sp/><sp/><sp/>*watch,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data);</highlight></codeline>
<codeline lineno="97" refid="group__DBusConnection_1ga005459ba2ddd69ba2d89f0e04ef57b10" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/><ref refid="group__DBusConnection_1ga005459ba2ddd69ba2d89f0e04ef57b10" kindref="member">DBusWatchToggledFunction</ref>)<sp/><sp/><sp/>(<ref refid="structDBusWatch" kindref="compound">DBusWatch</ref><sp/><sp/><sp/><sp/><sp/><sp/>*watch,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data);</highlight></codeline>
<codeline lineno="103" refid="group__DBusConnection_1ga487ca73e58570f302ba7159c81719243" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/><ref refid="group__DBusConnection_1ga487ca73e58570f302ba7159c81719243" kindref="member">DBusRemoveWatchFunction</ref>)<sp/><sp/><sp/><sp/>(<ref refid="structDBusWatch" kindref="compound">DBusWatch</ref><sp/><sp/><sp/><sp/><sp/><sp/>*watch,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data);</highlight></codeline>
<codeline lineno="110" refid="group__DBusConnection_1ga91d796869e7fa9e96d843b2c0d480df1" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/>(*<sp/><ref refid="group__DBusConnection_1ga91d796869e7fa9e96d843b2c0d480df1" kindref="member">DBusAddTimeoutFunction</ref>)<sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref><sp/><sp/><sp/><sp/>*timeout,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data);</highlight></codeline>
<codeline lineno="117" refid="group__DBusConnection_1ga45c22fb4103827cd10f319cc90e286ae" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/><ref refid="group__DBusConnection_1ga45c22fb4103827cd10f319cc90e286ae" kindref="member">DBusTimeoutToggledFunction</ref>)<sp/>(<ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref><sp/><sp/><sp/><sp/>*timeout,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data);</highlight></codeline>
<codeline lineno="123" refid="group__DBusConnection_1ga418f70c8dfaa15c45f1d51fb9569eab8" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/><ref refid="group__DBusConnection_1ga418f70c8dfaa15c45f1d51fb9569eab8" kindref="member">DBusRemoveTimeoutFunction</ref>)<sp/><sp/>(<ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref><sp/><sp/><sp/><sp/>*timeout,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data);</highlight></codeline>
<codeline lineno="128" refid="group__DBusConnection_1ga583ca2aff3cce66d68208abdfca5b547" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/><ref refid="group__DBusConnection_1ga583ca2aff3cce66d68208abdfca5b547" kindref="member">DBusDispatchStatusFunction</ref>)<sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member">DBusDispatchStatus</ref><sp/>new_status,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data);</highlight></codeline>
<codeline lineno="135" refid="group__DBusConnection_1ga509465111feb37d60d5e37037266c296" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/><ref refid="group__DBusConnection_1ga509465111feb37d60d5e37037266c296" kindref="member">DBusWakeupMainFunction</ref>)<sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="group__DBusConnection_1ga5ab581cb4854a82655188e7c243e34fd" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/>(*<sp/><ref refid="group__DBusConnection_1ga5ab581cb4854a82655188e7c243e34fd" kindref="member">DBusAllowUnixUserFunction</ref>)<sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/>uid,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="group__DBusConnection_1gabbb2a3b00f680968683c7b1856811b60" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/>(*<sp/><ref refid="group__DBusConnection_1gabbb2a3b00f680968683c7b1856811b60" kindref="member">DBusAllowWindowsUserFunction</ref>)<sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*user_sid,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="group__DBusConnection_1ga0934446fa9009211ca180fc1a01813b4" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<sp/><ref refid="group__DBusConnection_1ga0934446fa9009211ca180fc1a01813b4" kindref="member">DBusPendingCallNotifyFunction</ref>)<sp/>(<ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref><sp/>*pending,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*user_data);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="group__DBusConnection_1ga842a008b3f89a8de292af9d9f3c9dcd6" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="group__DBusShared_1ga8244b29230187624c24986c24edab1de" kindref="member">DBusHandlerResult</ref><sp/>(*<sp/><ref refid="group__DBusConnection_1ga842a008b3f89a8de292af9d9f3c9dcd6" kindref="member">DBusHandleMessageFunction</ref>)<sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*message,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*user_data);</highlight></codeline>
<codeline lineno="172"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref>*<sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1gacd32f819820266598c6b6847dfddaf9c" kindref="member">dbus_connection_open</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*address,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusError" kindref="compound">DBusError</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error);</highlight></codeline>
<codeline lineno="175"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref>*<sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga434e3fc7ee420fd30e2f05e57ff26b1d" kindref="member">dbus_connection_open_private</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*address,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusError" kindref="compound">DBusError</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error);</highlight></codeline>
<codeline lineno="178"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref>*<sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1gae34751e15f114217e5ad10c663e2ef2e" kindref="member">dbus_connection_ref</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection);</highlight></codeline>
<codeline lineno="180"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" kindref="member">dbus_connection_unref</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection);</highlight></codeline>
<codeline lineno="182"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga2522ac5075dfe0a1535471f6e045e1ee" kindref="member">dbus_connection_close</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection);</highlight></codeline>
<codeline lineno="184"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga611ae94556af36fe30bfb547366ca4e1" kindref="member">dbus_connection_get_is_connected</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection);</highlight></codeline>
<codeline lineno="186"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga2f1fa02c9897b6f07f4d33c862de4a1d" kindref="member">dbus_connection_get_is_authenticated</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection);</highlight></codeline>
<codeline lineno="188"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1gaa6c5d523e16d8a5b9316c92d9ff1ac17" kindref="member">dbus_connection_get_is_anonymous</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection);</highlight></codeline>
<codeline lineno="190"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1gae6c19e146a37f9de6a06c1617874bed9" kindref="member">dbus_connection_get_server_id</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection);</highlight></codeline>
<codeline lineno="192"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga3e41509b3afdbc22872bacc5754e85c2" kindref="member">dbus_connection_can_send_type</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga19091beb74f1504b0e862a7ad10e71cd" kindref="member">dbus_connection_set_exit_on_disconnect</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit_on_disconnect);</highlight></codeline>
<codeline lineno="199"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga10e68d9d2f41d655a4151ddeb807ff54" kindref="member">dbus_connection_flush</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection);</highlight></codeline>
<codeline lineno="201"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga580d8766c23fe5f49418bc7d87b67dc6" kindref="member">dbus_connection_read_write_dispatch</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout_milliseconds);</highlight></codeline>
<codeline lineno="204"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga371163b4955a6e0bf0f1f70f38390c14" kindref="member">dbus_connection_read_write</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout_milliseconds);</highlight></codeline>
<codeline lineno="207"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga9d07083c520e291591a68adb78f64094" kindref="member">dbus_connection_borrow_message</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection);</highlight></codeline>
<codeline lineno="209"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga0586da03a01c9c6f332fbea900ef55e3" kindref="member">dbus_connection_return_message</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*message);</highlight></codeline>
<codeline lineno="212"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga7125d747575b2f596aceaf7be53eae68" kindref="member">dbus_connection_steal_borrowed_message</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*message);</highlight></codeline>
<codeline lineno="215"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga1e40d994ea162ce767e78de1c4988566" kindref="member">dbus_connection_pop_message</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection);</highlight></codeline>
<codeline lineno="217"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member">DBusDispatchStatus</ref><sp/><ref refid="group__DBusConnection_1ga893d18d8b36ffb371f16d13645071289" kindref="member">dbus_connection_get_dispatch_status</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection);</highlight></codeline>
<codeline lineno="219"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member">DBusDispatchStatus</ref><sp/><ref refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" kindref="member">dbus_connection_dispatch</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection);</highlight></codeline>
<codeline lineno="221"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1gac40563ec4c0e309d936daf3163ba9bb7" kindref="member">dbus_connection_has_messages_to_send</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/>*connection);</highlight></codeline>
<codeline lineno="223"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1gae1cb64f4cf550949b23fd3a756b2f7d0" kindref="member">dbus_connection_send</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*message,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1gaf513803b030613a669cc7ef199f90a8b" kindref="member">dbus_uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*client_serial);</highlight></codeline>
<codeline lineno="227"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1gaa215df7ab7ca6dce7be153c6b9cc80ba" kindref="member">dbus_connection_send_with_reply</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*message,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**pending_return,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout_milliseconds);</highlight></codeline>
<codeline lineno="232"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga8d6431f17a9e53c9446d87c2ba8409f0" kindref="member">dbus_connection_send_with_reply_and_block</ref><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*message,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout_milliseconds,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusError" kindref="compound">DBusError</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error);</highlight></codeline>
<codeline lineno="237"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1gaebf031eb444b4f847606aa27daa3d8e6" kindref="member">dbus_connection_set_watch_functions</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga285ce1f8bb94ef2f89f23db3de8cfe4b" kindref="member">DBusAddWatchFunction</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_function,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga487ca73e58570f302ba7159c81719243" kindref="member">DBusRemoveWatchFunction</ref><sp/><sp/><sp/><sp/><sp/>remove_function,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga005459ba2ddd69ba2d89f0e04ef57b10" kindref="member">DBusWatchToggledFunction</ref><sp/><sp/><sp/><sp/>toggled_function,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data_function);</highlight></codeline>
<codeline lineno="244"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1gab3cbc68eec427e9ce1783b25d44fe93c" kindref="member">dbus_connection_set_timeout_functions</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga91d796869e7fa9e96d843b2c0d480df1" kindref="member">DBusAddTimeoutFunction</ref><sp/><sp/><sp/><sp/><sp/><sp/>add_function,</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga418f70c8dfaa15c45f1d51fb9569eab8" kindref="member">DBusRemoveTimeoutFunction</ref><sp/><sp/><sp/>remove_function,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga45c22fb4103827cd10f319cc90e286ae" kindref="member">DBusTimeoutToggledFunction</ref><sp/><sp/>toggled_function,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data,</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data_function);</highlight></codeline>
<codeline lineno="251"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga2b1df13251c7ec348bcba39c0924e881" kindref="member">dbus_connection_set_wakeup_main_function</ref><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga509465111feb37d60d5e37037266c296" kindref="member">DBusWakeupMainFunction</ref><sp/><sp/><sp/><sp/><sp/><sp/>wakeup_main_function,</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data,</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data_function);</highlight></codeline>
<codeline lineno="256"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga55ff88cd22c0672441c7deffbfb68fbf" kindref="member">dbus_connection_set_dispatch_status_function</ref><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga583ca2aff3cce66d68208abdfca5b547" kindref="member">DBusDispatchStatusFunction</ref><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data,</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data_function);</highlight></codeline>
<codeline lineno="261"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1gaef670c3a8170ab9c719ec955252459d0" kindref="member">dbus_connection_get_unix_user</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*uid);</highlight></codeline>
<codeline lineno="264"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1gaeebeadcafa87e2d30eed4296f26fb73c" kindref="member">dbus_connection_get_unix_process_id</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pid);</highlight></codeline>
<codeline lineno="267"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga969b9dafe806c9fe0a54c9d8a565c2e1" kindref="member">dbus_connection_get_adt_audit_session_data</ref><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**data,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1gab18afa60e9b17b6e322735bda3d863d8" kindref="member">dbus_int32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data_size);</highlight></codeline>
<codeline lineno="271"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga6b78379badb4c5804344f4f3d87a958a" kindref="member">dbus_connection_set_unix_user_function</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga5ab581cb4854a82655188e7c243e34fd" kindref="member">DBusAllowUnixUserFunction</ref><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data,</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data_function);</highlight></codeline>
<codeline lineno="276"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga2b3cb488f1922aeecdeafdcb110e91a8" kindref="member">dbus_connection_get_windows_user</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**windows_sid_p);<sp/></highlight></codeline>
<codeline lineno="279"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1gaa35ced9ccd29d3366749ae383b120f9c" kindref="member">dbus_connection_set_windows_user_function</ref><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1gabbb2a3b00f680968683c7b1856811b60" kindref="member">DBusAllowWindowsUserFunction</ref><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data,</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data_function);</highlight></codeline>
<codeline lineno="284"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1gade349ff04ed548993a8054250e317c12" kindref="member">dbus_connection_set_allow_anonymous</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value);</highlight></codeline>
<codeline lineno="287"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1gaf58e8cc7b8717db1581459c0c3d34b08" kindref="member">dbus_connection_set_route_peer_messages</ref><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Filters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><ref refid="group__DBusConnection_1gae00f581e5487408cb294bf71826aff86" kindref="member">dbus_connection_add_filter</ref><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga842a008b3f89a8de292af9d9f3c9dcd6" kindref="member">DBusHandleMessageFunction</ref><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*user_data,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_data_function);</highlight></codeline>
<codeline lineno="299"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga5e7f1dad410506a8a6f5182c55e7c4fe" kindref="member">dbus_connection_remove_filter</ref><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga842a008b3f89a8de292af9d9f3c9dcd6" kindref="member">DBusHandleMessageFunction</ref><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*user_data);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Other<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><ref refid="group__DBusConnection_1ga728b15c71a492ad244e5a480f1156088" kindref="member">dbus_connection_allocate_data_slot</ref><sp/>(<ref refid="group__DBusTypes_1gab18afa60e9b17b6e322735bda3d863d8" kindref="member">dbus_int32_t</ref><sp/><sp/><sp/><sp/><sp/>*slot_p);</highlight></codeline>
<codeline lineno="308"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga7dc8c73d8c3e733f5410d52be84239a0" kindref="member">dbus_connection_free_data_slot</ref><sp/><sp/><sp/><sp/><sp/>(<ref refid="group__DBusTypes_1gab18afa60e9b17b6e322735bda3d863d8" kindref="member">dbus_int32_t</ref><sp/><sp/><sp/><sp/><sp/>*slot_p);</highlight></codeline>
<codeline lineno="310"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><ref refid="group__DBusConnection_1ga845b4942399f43dd4ac644de7cb9e3ff" kindref="member">dbus_connection_set_data</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1gab18afa60e9b17b6e322735bda3d863d8" kindref="member">dbus_int32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>slot,</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data,</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref><sp/><sp/>free_data_func);</highlight></codeline>
<codeline lineno="315"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga433fae9844a66d9d078d238e6c723b95" kindref="member">dbus_connection_get_data</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1gab18afa60e9b17b6e322735bda3d863d8" kindref="member">dbus_int32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>slot);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga794d0b572e30448fb262618222f76124" kindref="member">dbus_connection_set_change_sigpipe</ref><sp/>(<ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>will_modify_sigpipe);<sp/></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__DBusConnection_1ga0d783462274a6c71d3767f5821c29ce9" kindref="member">dbus_connection_set_max_message_size</ref><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size);</highlight></codeline>
<codeline lineno="325"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__DBusConnection_1ga7a459e64d7dca7b592136cec0a73422c" kindref="member">dbus_connection_get_max_message_size</ref><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/>*connection);</highlight></codeline>
<codeline lineno="327"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__DBusConnection_1ga6565d75f16e6e803372b2ae3d94d991b" kindref="member">dbus_connection_set_max_received_size</ref><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size);</highlight></codeline>
<codeline lineno="330"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__DBusConnection_1ga376529acf41d1d34b4f46c0d9d515c85" kindref="member">dbus_connection_get_max_received_size</ref><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/>*connection);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__DBusConnection_1ga2aadce7d15c0e11983363912292b3fcd" kindref="member">dbus_connection_set_max_message_unix_fds</ref><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n);</highlight></codeline>
<codeline lineno="336"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__DBusConnection_1ga18abaca9a512dbb7b6f921c3df6875d9" kindref="member">dbus_connection_get_max_message_unix_fds</ref><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/>*connection);</highlight></codeline>
<codeline lineno="338"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__DBusConnection_1ga81e63dc6d9298e8a7f92c0d93d0e80b3" kindref="member">dbus_connection_set_max_received_unix_fds</ref>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/>*connection,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n);</highlight></codeline>
<codeline lineno="341"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__DBusConnection_1ga219f31132338616f82dc975c070ff418" kindref="member">dbus_connection_get_max_received_unix_fds</ref>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/>*connection);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__DBusConnection_1ga47aff801f586e7116f9c54532bb1baf9" kindref="member">dbus_connection_get_outgoing_size</ref><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/>*connection);</highlight></codeline>
<codeline lineno="346"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="group__DBusConnection_1gad218838fdaa8d36c606723c63e96f453" kindref="member">dbus_connection_get_outgoing_unix_fds</ref><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/>*connection);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><ref refid="structDBusPreallocatedSend" kindref="compound">DBusPreallocatedSend</ref>*<sp/><ref refid="group__DBusConnection_1ga6136968eba30e8313e668a622fcfb08d" kindref="member">dbus_connection_preallocate_send</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection);</highlight></codeline>
<codeline lineno="351"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1gad0ea06307b418616711131ea7bdae8ac" kindref="member">dbus_connection_free_preallocated_send</ref><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusPreallocatedSend" kindref="compound">DBusPreallocatedSend</ref><sp/>*preallocated);</highlight></codeline>
<codeline lineno="354"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga2fea5f972d1bfe7bcde8c0ec65ca9e90" kindref="member">dbus_connection_send_preallocated</ref><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusPreallocatedSend" kindref="compound">DBusPreallocatedSend</ref><sp/>*preallocated,</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*message,</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1gaf513803b030613a669cc7ef199f90a8b" kindref="member">dbus_uint32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*client_serial);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Object<sp/>tree<sp/>functionality<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="367" refid="group__DBusConnection_1gaf0bbd7d22aa0ef4505c87f0753e696df" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*<sp/><ref refid="group__DBusConnection_1gaf0bbd7d22aa0ef4505c87f0753e696df" kindref="member">DBusObjectPathUnregisterFunction</ref>)<sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*user_data);</highlight></codeline>
<codeline lineno="374" refid="group__DBusConnection_1ga85b92d819505a6b75c513cbb8e688a6a" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="group__DBusShared_1ga8244b29230187624c24986c24edab1de" kindref="member">DBusHandlerResult</ref><sp/>(*<sp/><ref refid="group__DBusConnection_1ga85b92d819505a6b75c513cbb8e688a6a" kindref="member">DBusObjectPathMessageFunction</ref>)<sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref><sp/><sp/><sp/><sp/><sp/>*message,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*user_data);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="384" refid="structDBusObjectPathVTable" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDBusObjectPathVTable" kindref="compound">DBusObjectPathVTable</ref></highlight></codeline>
<codeline lineno="385"><highlight class="normal">{</highlight></codeline>
<codeline lineno="386" refid="structDBusObjectPathVTable_1abb6c084f345051b9649615b91ec654d4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1gaf0bbd7d22aa0ef4505c87f0753e696df" kindref="member">DBusObjectPathUnregisterFunction</ref><sp/><sp/><sp/><ref refid="structDBusObjectPathVTable_1abb6c084f345051b9649615b91ec654d4" kindref="member">unregister_function</ref>;<sp/></highlight></codeline>
<codeline lineno="387" refid="structDBusObjectPathVTable_1a83464b6b8b66fb7adebd8e3bf8ff1b70" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="group__DBusConnection_1ga85b92d819505a6b75c513cbb8e688a6a" kindref="member">DBusObjectPathMessageFunction</ref><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusObjectPathVTable_1a83464b6b8b66fb7adebd8e3bf8ff1b70" kindref="member">message_function</ref>;<sp/></highlight></codeline>
<codeline lineno="389" refid="structDBusObjectPathVTable_1a022a342ef7208c2b87611dc49be41a33" refkind="member"><highlight class="normal"><sp/><sp/>void<sp/>(*<sp/><ref refid="structDBusObjectPathVTable_1a022a342ef7208c2b87611dc49be41a33" kindref="member">dbus_internal_pad1</ref>)<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);<sp/></highlight></codeline>
<codeline lineno="390" refid="structDBusObjectPathVTable_1a524e4f2a6288f1e8f57b15be55ef5183" refkind="member"><highlight class="normal"><sp/><sp/>void<sp/>(*<sp/><ref refid="structDBusObjectPathVTable_1a524e4f2a6288f1e8f57b15be55ef5183" kindref="member">dbus_internal_pad2</ref>)<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);<sp/></highlight></codeline>
<codeline lineno="391" refid="structDBusObjectPathVTable_1acdd3e332271cfa2a326d5d288c4dc7ee" refkind="member"><highlight class="normal"><sp/><sp/>void<sp/>(*<sp/><ref refid="structDBusObjectPathVTable_1acdd3e332271cfa2a326d5d288c4dc7ee" kindref="member">dbus_internal_pad3</ref>)<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);<sp/></highlight></codeline>
<codeline lineno="392" refid="structDBusObjectPathVTable_1af5cc1a8123eada17c8c7c3f0a6918249" refkind="member"><highlight class="normal"><sp/><sp/>void<sp/>(*<sp/><ref refid="structDBusObjectPathVTable_1af5cc1a8123eada17c8c7c3f0a6918249" kindref="member">dbus_internal_pad4</ref>)<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);<sp/></highlight></codeline>
<codeline lineno="393"><highlight class="normal">};</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><ref refid="group__DBusConnection_1ga708b1e108feed18f5775ff404c9dda4b" kindref="member">dbus_connection_try_register_object_path</ref><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*path,</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusObjectPathVTable" kindref="compound">DBusObjectPathVTable</ref><sp/><sp/>*vtable,</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*user_data,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusError" kindref="compound">DBusError</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><ref refid="group__DBusConnection_1ga24730ca6fd2e9132873962a32df7628c" kindref="member">dbus_connection_register_object_path</ref><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*path,</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusObjectPathVTable" kindref="compound">DBusObjectPathVTable</ref><sp/><sp/>*vtable,</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*user_data);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><ref refid="group__DBusConnection_1ga8e9d2d4ff17c3071124e4993d1536ed4" kindref="member">dbus_connection_try_register_fallback</ref><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*path,</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusObjectPathVTable" kindref="compound">DBusObjectPathVTable</ref><sp/><sp/>*vtable,</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*user_data,</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusError" kindref="compound">DBusError</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*error);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><ref refid="group__DBusConnection_1gac4473b37bfa74ccf7459959d27e7bc59" kindref="member">dbus_connection_register_fallback</ref><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*path,</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structDBusObjectPathVTable" kindref="compound">DBusObjectPathVTable</ref><sp/><sp/>*vtable,</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*user_data);</highlight></codeline>
<codeline lineno="420"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><ref refid="group__DBusConnection_1ga6ae8f005dedf24c5f2df1768795392fb" kindref="member">dbus_connection_unregister_object_path</ref><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*path);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><ref refid="group__DBusConnection_1ga08ee6e70b74c294fe24d0f391f16db24" kindref="member">dbus_connection_get_object_path_data</ref><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*path,</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**data_p);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><ref refid="group__DBusConnection_1ga3e9de2067d0eed66ef73230fae8d8be2" kindref="member">dbus_connection_list_registered</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*parent_path,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>***child_entries);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><ref refid="group__DBusConnection_1ga38297f511f4124accdfa68c321e081cc" kindref="member">dbus_connection_get_unix_fd</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*fd);</highlight></codeline>
<codeline lineno="437"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><ref refid="group__DBusConnection_1ga1c14590d77b148390bde9e82a7544434" kindref="member">dbus_connection_get_socket</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusConnection" kindref="compound">DBusConnection</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*connection,</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*fd);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="preprocessor">#ifndef<sp/>DBUS_DISABLE_DEPRECATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><ref refid="group__DBusMacros_1ga7b014fa99f6ef38c1aa5a9c02468e3a0" kindref="member">DBUS_DEPRECATED</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__DBusWatch_1ga62d7e86fe386ed48fb90d443b3a2ce7a" kindref="member">dbus_watch_get_fd</ref><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusWatch" kindref="compound">DBusWatch</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*watch);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusWatch_1ga15df7f6120ead3e09bec8a70d3c43c0d" kindref="member">dbus_watch_get_unix_fd</ref><sp/>(<ref refid="structDBusWatch" kindref="compound">DBusWatch</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*watch);</highlight></codeline>
<codeline lineno="456"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusWatch_1ga91308f393d41b31babda17c83833517f" kindref="member">dbus_watch_get_socket</ref><sp/><sp/>(<ref refid="structDBusWatch" kindref="compound">DBusWatch</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*watch);</highlight></codeline>
<codeline lineno="458"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__DBusWatch_1gaf172a2b1d1f82333e67cec8d99c9204a" kindref="member">dbus_watch_get_flags</ref><sp/><sp/><sp/>(<ref refid="structDBusWatch" kindref="compound">DBusWatch</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*watch);</highlight></codeline>
<codeline lineno="460"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusWatch_1ga8dcdbd07f15a56207af4a36cb005da77" kindref="member">dbus_watch_get_data</ref><sp/><sp/><sp/><sp/>(<ref refid="structDBusWatch" kindref="compound">DBusWatch</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*watch);</highlight></codeline>
<codeline lineno="462"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusWatch_1ga5c75a65cf0680956cc0188d86a05cfae" kindref="member">dbus_watch_set_data</ref><sp/><sp/><sp/><sp/>(<ref refid="structDBusWatch" kindref="compound">DBusWatch</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*watch,</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data,</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref><sp/><sp/>free_data_function);</highlight></codeline>
<codeline lineno="466"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><sp/><ref refid="group__DBusWatch_1gac2acdb1794450ac01a43ec4c3e07ebf7" kindref="member">dbus_watch_handle</ref><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusWatch" kindref="compound">DBusWatch</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*watch,</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flags);</highlight></codeline>
<codeline lineno="469"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><sp/><ref refid="group__DBusWatch_1gae7a91e6d4d1bc187419c47c522e33a8f" kindref="member">dbus_watch_get_enabled</ref><sp/>(<ref refid="structDBusWatch" kindref="compound">DBusWatch</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*watch);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTimeout_1ga67ba21b6189438875c6007ee79da5e37" kindref="member">dbus_timeout_get_interval</ref><sp/>(<ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref><sp/><sp/><sp/><sp/><sp/><sp/>*timeout);</highlight></codeline>
<codeline lineno="481"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTimeout_1ga7c561ec66daa2f53a274485f10c827c7" kindref="member">dbus_timeout_get_data</ref><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref><sp/><sp/><sp/><sp/><sp/><sp/>*timeout);</highlight></codeline>
<codeline lineno="483"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTimeout_1ga88712006f7772174504a0fba0a0ddd60" kindref="member">dbus_timeout_set_data</ref><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref><sp/><sp/><sp/><sp/><sp/><sp/>*timeout,</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data,</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref><sp/><sp/>free_data_function);</highlight></codeline>
<codeline lineno="487"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><ref refid="group__DBusTimeout_1ga038b67c8d3db2624a1e4a8bc45f25d12" kindref="member">dbus_timeout_handle</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref><sp/><sp/><sp/><sp/><sp/><sp/>*timeout);</highlight></codeline>
<codeline lineno="489"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><ref refid="group__DBusTimeout_1ga58954b2edb45ec1632529d35525ea45c" kindref="member">dbus_timeout_get_enabled</ref><sp/><sp/>(<ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref><sp/><sp/><sp/><sp/><sp/><sp/>*timeout);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><ref refid="group__DBusMacros_1gae4a9263a43f8220f6e1c0fd07cf6e59a" kindref="member">DBUS_END_DECLS</ref></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DBUS_CONNECTION_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="dbus/dbus-connection.h"/>
  </compounddef>
</doxygen>
