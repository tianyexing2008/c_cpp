<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="group__DBusConnectionInternals" kind="group">
    <compoundname>DBusConnectionInternals</compoundname>
    <title>DBusConnection implementation details</title>
    <innerclass refid="structDBusMessageFilter" prot="public">DBusMessageFilter</innerclass>
    <innerclass refid="structDBusPreallocatedSend" prot="public">DBusPreallocatedSend</innerclass>
    <innerclass refid="structDBusConnection" prot="public">DBusConnection</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__DBusConnectionInternals_1gaec8158f55878d1a6459ebdc9950fa783" prot="public" static="no">
        <type>struct <ref refid="structDBusMessageFilter" kindref="compound">DBusMessageFilter</ref></type>
        <definition>typedef struct DBusMessageFilter DBusMessageFilter</definition>
        <argsstring></argsstring>
        <name>DBusMessageFilter</name>
        <briefdescription>
<para>Internal struct representing a message filter function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="207" column="1" bodyfile="dbus/dbus-connection.c" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnectionInternals_1ga0c100eb3b1ecdb886ac670c815eacf23" prot="public" static="no">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref>(*</type>
        <definition>typedef dbus_bool_t(*  DBusWatchAddFunction) (DBusWatchList *list, DBusWatch *watch)</definition>
        <argsstring>)(DBusWatchList *list, DBusWatch *watch)</argsstring>
        <name>DBusWatchAddFunction</name>
        <briefdescription>
<para>Function to be called in protected_change_watch() with refcount held. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="670" column="1" bodyfile="dbus/dbus-connection.c" bodystart="670" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnectionInternals_1ga39078b4c2b83651a39638ca210591b98" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusWatchRemoveFunction) (DBusWatchList *list, DBusWatch *watch)</definition>
        <argsstring>)(DBusWatchList *list, DBusWatch *watch)</argsstring>
        <name>DBusWatchRemoveFunction</name>
        <briefdescription>
<para>Function to be called in protected_change_watch() with refcount held. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="673" column="1" bodyfile="dbus/dbus-connection.c" bodystart="673" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnectionInternals_1ga890755ee5ee0e545b0ba7e9c09c6ac98" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusWatchToggleFunction) (DBusWatchList *list, DBusWatch *watch, dbus_bool_t enabled)</definition>
        <argsstring>)(DBusWatchList *list, DBusWatch *watch, dbus_bool_t enabled)</argsstring>
        <name>DBusWatchToggleFunction</name>
        <briefdescription>
<para>Function to be called in protected_change_watch() with refcount held. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="676" column="1" bodyfile="dbus/dbus-connection.c" bodystart="676" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnectionInternals_1ga1272640bcf4e26d62fe7f370320bf86f" prot="public" static="no">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref>(*</type>
        <definition>typedef dbus_bool_t(*  DBusTimeoutAddFunction) (DBusTimeoutList *list, DBusTimeout *timeout)</definition>
        <argsstring>)(DBusTimeoutList *list, DBusTimeout *timeout)</argsstring>
        <name>DBusTimeoutAddFunction</name>
        <briefdescription>
<para>Function to be called in protected_change_timeout() with refcount held. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="794" column="1" bodyfile="dbus/dbus-connection.c" bodystart="794" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnectionInternals_1gafb9fc05c4a99995ed205a9ad83c5f866" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusTimeoutRemoveFunction) (DBusTimeoutList *list, DBusTimeout *timeout)</definition>
        <argsstring>)(DBusTimeoutList *list, DBusTimeout *timeout)</argsstring>
        <name>DBusTimeoutRemoveFunction</name>
        <briefdescription>
<para>Function to be called in protected_change_timeout() with refcount held. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="797" column="1" bodyfile="dbus/dbus-connection.c" bodystart="797" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusConnectionInternals_1ga83663c3fa4f13a262c4ee1d3037e93e5" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusTimeoutToggleFunction) (DBusTimeoutList *list, DBusTimeout *timeout, dbus_bool_t enabled)</definition>
        <argsstring>)(DBusTimeoutList *list, DBusTimeout *timeout, dbus_bool_t enabled)</argsstring>
        <name>DBusTimeoutToggleFunction</name>
        <briefdescription>
<para>Function to be called in protected_change_timeout() with refcount held. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="800" column="1" bodyfile="dbus/dbus-connection.c" bodystart="800" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__DBusConnectionInternals_1ga10ab26dacdb418f4b94148571b5bf0aa" prot="public" static="yes" mutable="no">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_modify_sigpipe</definition>
        <argsstring></argsstring>
        <name>_dbus_modify_sigpipe</name>
        <initializer>= <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="250" column="1" bodyfile="dbus/dbus-connection.c" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__DBusConnectionInternals_1gab0e1a7a50a12173e9be729b275903294" prot="public" static="yes" mutable="no">
        <type><ref refid="structDBusHashTable" kindref="compound">DBusHashTable</ref> *</type>
        <definition>DBusHashTable* shared_connections</definition>
        <argsstring></argsstring>
        <name>shared_connections</name>
        <initializer>= <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="1528" column="1" bodyfile="dbus/dbus-connection.c" bodystart="1528" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__DBusConnectionInternals_1ga4ef7c9bbbcef9e36b2bc52c9c8e96c30" prot="public" static="yes" mutable="no">
        <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
        <definition>DBusList* shared_connections_no_guid</definition>
        <argsstring></argsstring>
        <name>shared_connections_no_guid</name>
        <initializer>= <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="1529" column="1" bodyfile="dbus/dbus-connection.c" bodystart="1529" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga2bc6a18b96b4be05589c41853318d7fb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_connection_trace_ref</definition>
        <argsstring>(DBusConnection *connection, int old_refcount, int new_refcount, const char *why)</argsstring>
        <name>_dbus_connection_trace_ref</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>int</type>
          <declname>old_refcount</declname>
        </param>
        <param>
          <type>int</type>
          <declname>new_refcount</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>why</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="207" column="1" bodyfile="dbus/dbus-connection.c" bodystart="207" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gaeff0b29105e6bd71ead935a200a8bf39" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member">DBusDispatchStatus</ref></type>
        <definition>static DBusDispatchStatus _dbus_connection_get_dispatch_status_unlocked</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_get_dispatch_status_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="338" column="1" bodyfile="dbus/dbus-connection.c" bodystart="4251" bodyend="4296"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga347a73baf085be84624ea9069d6d9129" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_connection_update_dispatch_status_and_unlock</definition>
        <argsstring>(DBusConnection *connection, DBusDispatchStatus new_status)</argsstring>
        <name>_dbus_connection_update_dispatch_status_and_unlock</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member">DBusDispatchStatus</ref></type>
          <declname>new_status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="339" column="1" bodyfile="dbus/dbus-connection.c" bodystart="4299" bodyend="4350"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga3d2ea43404c2d550028e05e9a5f08fed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_connection_last_unref</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_last_unref</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="341" column="1" bodyfile="dbus/dbus-connection.c" bodystart="2710" bodyend="2795"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gacfea31e972b93773bfdd43459c3d1962" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_connection_acquire_dispatch</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_acquire_dispatch</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Acquire the dispatcher. </para>        </briefdescription>
        <detaileddescription>
<para>This is a separate lock so the main connection lock can be dropped to call out to application dispatch handlers.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="342" column="1" bodyfile="dbus/dbus-connection.c" bodystart="4129" bodyend="4155"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga43472f29755302a1a4f856d4f049e717" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_connection_release_dispatch</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_release_dispatch</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Release the dispatcher when you&apos;re done with it. </para>        </briefdescription>
        <detaileddescription>
<para>Only call after you&apos;ve acquired the dispatcher. Wakes up at most one thread currently waiting to acquire the dispatcher.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="343" column="1" bodyfile="dbus/dbus-connection.c" bodystart="4165" bodyend="4179"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga741c2b2a106f6ab9c9ce22aeeb4dcebd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusConnection_1gabf250a32ff740b2a8c99136e0142d8d2" kindref="member">DBusDispatchStatus</ref></type>
        <definition>static DBusDispatchStatus _dbus_connection_flush_unlocked</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_flush_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Blocks until the outgoing message queue is empty. </para>        </briefdescription>
        <detaileddescription>
<para>Assumes connection lock already held.</para><para>If you call this, you MUST call update_dispatch_status afterword...</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="344" column="1" bodyfile="dbus/dbus-connection.c" bodystart="3603" bodyend="3633"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga0d9bfa5ab1f38f88998299e9d275110e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_connection_close_possibly_shared_and_unlock</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_close_possibly_shared_and_unlock</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="345" column="1" bodyfile="dbus/dbus-connection.c" bodystart="2855" bodyend="2887"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga377256faaaf545bde52eaf96e002b2fc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t _dbus_connection_get_is_connected_unlocked</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_get_is_connected_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="346" column="1" bodyfile="dbus/dbus-connection.c" bodystart="2953" bodyend="2957"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga01c7e2e1c7fd78d81f48c985bf62e5ad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t _dbus_connection_peek_for_reply_unlocked</definition>
        <argsstring>(DBusConnection *connection, dbus_uint32_t client_serial)</argsstring>
        <name>_dbus_connection_peek_for_reply_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1gaf513803b030613a669cc7ef199f90a8b" kindref="member">dbus_uint32_t</ref></type>
          <declname>client_serial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="347" column="1" bodyfile="dbus/dbus-connection.c" bodystart="2235" bodyend="2256"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga2c0f5a3c67e77a3aa3763a0d5c290147" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusMessageFilter" kindref="compound">DBusMessageFilter</ref> *</type>
        <definition>static DBusMessageFilter* _dbus_message_filter_ref</definition>
        <argsstring>(DBusMessageFilter *filter)</argsstring>
        <name>_dbus_message_filter_ref</name>
        <param>
          <type><ref refid="structDBusMessageFilter" kindref="compound">DBusMessageFilter</ref> *</type>
          <declname>filter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="351" column="1" bodyfile="dbus/dbus-connection.c" bodystart="351" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga553d10ec023348f36e6056b73a7e3f17" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_message_filter_unref</definition>
        <argsstring>(DBusMessageFilter *filter)</argsstring>
        <name>_dbus_message_filter_unref</name>
        <param>
          <type><ref refid="structDBusMessageFilter" kindref="compound">DBusMessageFilter</ref> *</type>
          <declname>filter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="366" column="1" bodyfile="dbus/dbus-connection.c" bodystart="366" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga4fe0c8f7b72dc89b9e1a3110db2f778e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_lock</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_lock</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Acquires the connection lock. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="388" column="1" bodyfile="dbus/dbus-connection.c" bodystart="388" bodyend="391"/>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <referencedby refid="group__DBusObjectTree_1gad660d78a12fa207d891838863dfc6ba7" compoundref="dbus-object-tree_8c" startline="903" endline="1064">_dbus_object_tree_dispatch_and_unlock</referencedby>
        <referencedby refid="group__DBusTransport_1gaceee4b098b0177870ad934daad90a9c6" compoundref="dbus-transport_8c" startline="527" endline="530">_dbus_transport_get_is_connected</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga3db10d48ec16e485d5a638aacebd4ad2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_unlock</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_unlock</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Releases the connection lock. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="399" column="1" bodyfile="dbus/dbus-connection.c" bodystart="399" bodyend="426"/>
        <references refid="group__DBusList_1ga6e824f717125ce40c549d5402e32610f" compoundref="dbus-list_8c" startline="254" endline="257">_dbus_list_free_link</references>
        <references refid="group__DBusList_1gaab9a957eca9bf5466bbf377a23b4b25c" compoundref="dbus-list_8c" startline="628" endline="639">_dbus_list_pop_first_link</references>
        <references refid="group__DBusThreadsInternals_1ga5946b9a5ea3e12a81a798b575b45c62f" compoundref="dbus-threads_8c" startline="150" endline="156">_dbus_rmutex_unlock</references>
        <references refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" compoundref="dbus-list_8h" startline="38">DBusList::data</references>
        <references refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" compoundref="dbus-message_8c" startline="1690" endline="1709">dbus_message_unref</references>
        <references refid="structDBusConnection_1a201f92bbc0947b503a36eaff9ae0ede9" compoundref="dbus-connection_8c" startline="263">DBusConnection::dispatch_cond</references>
        <references refid="structDBusConnection_1ad9e7bf73a48f4951b24ce8eec7bb7ac5" compoundref="dbus-connection_8c" startline="262">DBusConnection::dispatch_mutex</references>
        <references refid="structDBusConnection_1afc069c0dc7f29123d432650580aec036" compoundref="dbus-connection_8c" startline="269">DBusConnection::expired_messages</references>
        <references refid="structDBusConnection_1a6d87e03eea7aaff53f5574efcfb8c3e4" compoundref="dbus-connection_8c" startline="265">DBusConnection::io_path_cond</references>
        <references refid="structDBusConnection_1aaad1c7d6e6ba3e049ef790f4f9aa35cd" compoundref="dbus-connection_8c" startline="264">DBusConnection::io_path_mutex</references>
        <references refid="structDBusConnection_1a98e26cfd09ddbf0238f90bf4965641bf" compoundref="dbus-connection_8c" startline="260">DBusConnection::mutex</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1ac8aff7bafd9ed046d835c5ed80bc218c" compoundref="dbus-connection_8c" startline="295">DBusConnection::wakeup_main_data</references>
        <references refid="structDBusConnection_1a211104e37f65d45ab8fcb149e4bcc84e" compoundref="dbus-connection_8c" startline="294">DBusConnection::wakeup_main_function</references>
        <referencedby refid="group__DBusObjectTree_1gad660d78a12fa207d891838863dfc6ba7" compoundref="dbus-object-tree_8c" startline="903" endline="1064">_dbus_object_tree_dispatch_and_unlock</referencedby>
        <referencedby refid="group__DBusObjectTree_1ga1c51e43233ce0f3855c128f2555317eb" compoundref="dbus-object-tree_8c" startline="718" endline="724">_dbus_object_tree_free_all_unlocked</referencedby>
        <referencedby refid="group__DBusObjectTree_1gaab7040bd1bf037d99e9bbb75d0869a2f" compoundref="dbus-object-tree_8c" startline="1206" endline="1225">_dbus_object_tree_list_registered_and_unlock</referencedby>
        <referencedby refid="group__DBusObjectTree_1ga3babe73ed342b6963997ef2efd73ef75" compoundref="dbus-object-tree_8c" startline="623" endline="677">_dbus_object_tree_unregister_and_unlock</referencedby>
        <referencedby refid="group__DBusTransport_1gaceee4b098b0177870ad934daad90a9c6" compoundref="dbus-transport_8c" startline="527" endline="530">_dbus_transport_get_is_connected</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga0bfb45db918ac0bcb24a00c51ea313d5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_connection_wakeup_mainloop</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_wakeup_mainloop</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Wakes up the main loop if it is sleeping Needed if we&apos;re e.g. </para>        </briefdescription>
        <detaileddescription>
<para>queueing outgoing messages on a thread while the mainloop sleeps.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="436" column="1" bodyfile="dbus/dbus-connection.c" bodystart="436" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gac1b92eba0aeee294dc28fcc260c9b749" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_queue_received_message_link</definition>
        <argsstring>(DBusConnection *connection, DBusList *link)</argsstring>
        <name>_dbus_connection_queue_received_message_link</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
<para>Adds a message-containing list link to the incoming message queue, taking ownership of the link and the message&apos;s current refcount. </para>        </briefdescription>
        <detaileddescription>
<para>Cannot fail due to lack of memory.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>the message link to queue. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="480" column="1" bodyfile="dbus/dbus-connection.c" bodystart="480" bodyend="534"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusConnectionInternals_1gabaa6d26f6eca30782904af1ceb703bd1" compoundref="dbus-connection_8c" startline="885" endline="892">_dbus_connection_remove_timeout_unlocked</references>
        <references refid="group__DBusHashTable_1ga36ff49c4c35599e6fcdadc7f6805c49e" compoundref="dbus-hash_8c" startline="1074" endline="1087">_dbus_hash_table_lookup_int</references>
        <references refid="group__DBusList_1ga20e549175e2b8f450f907592dc39d953" compoundref="dbus-list_8c" startline="315" endline="322">_dbus_list_append_link</references>
        <references refid="group__DBusPendingCallInternals_1gaa9acac047b61c9a0eaff1977151e9e08" compoundref="dbus-pending-call_8c" startline="279" endline="284">_dbus_pending_call_get_timeout_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1gaf1e630b966722af540502329ed028254" compoundref="dbus-pending-call_8c" startline="248" endline="253">_dbus_pending_call_is_timeout_added_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1gafea13f8b9977d341e41201c407adea2a" compoundref="dbus-pending-call_8c" startline="263" endline="269">_dbus_pending_call_set_timeout_added_unlocked</references>
        <references refid="group__DBusTransport_1ga59ed246ec0ef9c64bc4684fc17726c1d" compoundref="dbus-transport_8c" startline="701" endline="704">_dbus_transport_peek_is_authenticated</references>
        <references refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" compoundref="dbus-list_8h" startline="38">DBusList::data</references>
        <references refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" compoundref="dbus-message_8c" startline="3227" endline="3239">dbus_message_get_interface</references>
        <references refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" compoundref="dbus-message_8c" startline="3313" endline="3325">dbus_message_get_member</references>
        <references refid="group__DBusMessage_1ga18adf731bb42d324fe2624407319e4af" compoundref="dbus-message_8c" startline="3096" endline="3108">dbus_message_get_path</references>
        <references refid="group__DBusMessage_1ga94c43b2b237d842a6b91da6f94818d47" compoundref="dbus-message_8c" startline="1163" endline="1176">dbus_message_get_reply_serial</references>
        <references refid="group__DBusMessage_1gaed63e4c2baaa50d782e8ebb7643def19" compoundref="dbus-message_8c" startline="3543" endline="3553">dbus_message_get_signature</references>
        <references refid="group__DBusMessage_1ga41cace31999105137772b6257ea540f9" compoundref="dbus-message_8c" startline="1722" endline="1727">dbus_message_get_type</references>
        <references refid="group__DBusMessageInternals_1ga75bcb613a291eb7e427f77f2f3635b8f" compoundref="dbus-message_8c" startline="4691" endline="4706">dbus_message_type_to_string</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusConnection_1aacb3a29956aa7712db37916194fde869" compoundref="dbus-connection_8c" startline="268">DBusConnection::incoming_messages</references>
        <references refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" compoundref="dbus-connection_8c" startline="276">DBusConnection::n_incoming</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1ad8fa077f91fe62d0c10862e2ff9e86ca" compoundref="dbus-connection_8c" startline="289">DBusConnection::pending_replies</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
        <referencedby refid="group__DBusTransport_1ga4046f36ecbdb75219f2b667f92e75a2b" compoundref="dbus-transport_8c" startline="1140" endline="1190">_dbus_transport_queue_messages</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gadb7a525dc6b566b575ee4f9b20028b04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_queue_synthesized_message_link</definition>
        <argsstring>(DBusConnection *connection, DBusList *link)</argsstring>
        <name>_dbus_connection_queue_synthesized_message_link</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> *</type>
          <declname>link</declname>
        </param>
        <briefdescription>
<para>Adds a link + message to the incoming message queue. </para>        </briefdescription>
        <detaileddescription>
<para>Can&apos;t fail. Takes ownership of both link and message.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>the list node and message to queue. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="545" column="1" bodyfile="dbus/dbus-connection.c" bodystart="545" bodyend="561"/>
        <references refid="group__DBusList_1ga20e549175e2b8f450f907592dc39d953" compoundref="dbus-list_8c" startline="315" endline="322">_dbus_list_append_link</references>
        <references refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" compoundref="dbus-list_8h" startline="38">DBusList::data</references>
        <references refid="structDBusConnection_1aacb3a29956aa7712db37916194fde869" compoundref="dbus-connection_8c" startline="268">DBusConnection::incoming_messages</references>
        <references refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" compoundref="dbus-connection_8c" startline="276">DBusConnection::n_incoming</references>
        <referencedby refid="group__DBusPendingCallInternals_1ga1bc4de7652108d0629522a4e3adffcab" compoundref="dbus-pending-call_8c" startline="228" endline="239">_dbus_pending_call_queue_timeout_error_unlocked</referencedby>
        <referencedby refid="group__DBusConnection_1ga1e40d994ea162ce767e78de1c4988566" compoundref="dbus-connection_8c" startline="4091" endline="4119">dbus_connection_pop_message</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga3d31a01751860b67f960dcaffb7bb4ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_connection_has_messages_to_send_unlocked</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_has_messages_to_send_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Checks whether there are messages in the outgoing message queue. </para>        </briefdescription>
        <detaileddescription>
<para>Called with connection lock held.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the outgoing queue is non-empty. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="572" column="1" bodyfile="dbus/dbus-connection.c" bodystart="572" bodyend="576"/>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a714fd51af8730c367b079594c7f756ae" compoundref="dbus-connection_8c" startline="267">DBusConnection::outgoing_messages</references>
        <referencedby refid="group__DBusConnection_1gac40563ec4c0e309d936daf3163ba9bb7" compoundref="dbus-connection_8c" startline="588" endline="599">dbus_connection_has_messages_to_send</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga2210bb5734c1a04d0d654b026f27d94e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t dbus_connection_has_messages_to_send</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>dbus_connection_has_messages_to_send</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Checks whether there are messages in the outgoing message queue. </para>        </briefdescription>
        <detaileddescription>
<para>Use <ref refid="group__DBusConnection_1ga10e68d9d2f41d655a4151ddeb807ff54" kindref="member">dbus_connection_flush()</ref> to block until all outgoing messages have been written to the underlying transport (such as a socket).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the outgoing queue is non-empty. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="588" column="1" bodyfile="dbus/dbus-connection.c" bodystart="588" bodyend="599"/>
        <references refid="group__DBusConnectionInternals_1ga3d31a01751860b67f960dcaffb7bb4ef" compoundref="dbus-connection_8c" startline="572" endline="576">_dbus_connection_has_messages_to_send_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga3955cd53ac4f671a5bb54019887389a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
        <definition>DBusMessage* _dbus_connection_get_message_to_send</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_get_message_to_send</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Gets the next outgoing message. </para>        </briefdescription>
        <detaileddescription>
<para>The message remains in the queue, and the caller does not own a reference to it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the message to be sent. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="609" column="1" bodyfile="dbus/dbus-connection.c" bodystart="609" bodyend="614"/>
        <references refid="group__DBusList_1ga18afc36fff1636a71295bcc7a75dc4f6" compoundref="dbus-list_8c" startline="596" endline="602">_dbus_list_get_last</references>
        <references refid="structDBusConnection_1a714fd51af8730c367b079594c7f756ae" compoundref="dbus-connection_8c" startline="267">DBusConnection::outgoing_messages</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gab93fd3666217ee339c4d2e8d4d33e63c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_message_sent_unlocked</definition>
        <argsstring>(DBusConnection *connection, DBusMessage *message)</argsstring>
        <name>_dbus_connection_message_sent_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Notifies the connection that a message has been sent, so the message can be removed from the outgoing queue. </para>        </briefdescription>
        <detaileddescription>
<para>Called with the connection lock held.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the message that was sent. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="625" column="1" bodyfile="dbus/dbus-connection.c" bodystart="625" bodyend="667"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusList_1ga42736fb02458bfffed948a509962c059" compoundref="dbus-list_8c" startline="580" endline="586">_dbus_list_get_last_link</references>
        <references refid="group__DBusList_1gab3dd068e3bd8a319c0d12150785050a7" compoundref="dbus-list_8c" startline="333" endline="337">_dbus_list_prepend_link</references>
        <references refid="group__DBusList_1ga57f1fc73dc1a4f8a7bf9860e000b1703" compoundref="dbus-list_8c" startline="499" endline="518">_dbus_list_unlink</references>
        <references refid="group__DBusMessageInternals_1gac84be3fd98e49409c1245a87c7de6f7d" compoundref="dbus-message_8c" startline="352" endline="371">_dbus_message_remove_counter</references>
        <references refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" compoundref="dbus-list_8h" startline="38">DBusList::data</references>
        <references refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" compoundref="dbus-message_8c" startline="3227" endline="3239">dbus_message_get_interface</references>
        <references refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" compoundref="dbus-message_8c" startline="3313" endline="3325">dbus_message_get_member</references>
        <references refid="group__DBusMessage_1ga18adf731bb42d324fe2624407319e4af" compoundref="dbus-message_8c" startline="3096" endline="3108">dbus_message_get_path</references>
        <references refid="group__DBusMessage_1gaed63e4c2baaa50d782e8ebb7643def19" compoundref="dbus-message_8c" startline="3543" endline="3553">dbus_message_get_signature</references>
        <references refid="group__DBusMessage_1ga41cace31999105137772b6257ea540f9" compoundref="dbus-message_8c" startline="1722" endline="1727">dbus_message_get_type</references>
        <references refid="group__DBusMessageInternals_1ga75bcb613a291eb7e427f77f2f3635b8f" compoundref="dbus-message_8c" startline="4691" endline="4706">dbus_message_type_to_string</references>
        <references refid="structDBusConnection_1afc069c0dc7f29123d432650580aec036" compoundref="dbus-connection_8c" startline="269">DBusConnection::expired_messages</references>
        <references refid="structDBusConnection_1a07025e177949c5e65d5f983ac5f5e878" compoundref="dbus-connection_8c" startline="275">DBusConnection::n_outgoing</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a5dcb660883904035076579c6d2f46501" compoundref="dbus-connection_8c" startline="278">DBusConnection::outgoing_counter</references>
        <references refid="structDBusConnection_1a714fd51af8730c367b079594c7f756ae" compoundref="dbus-connection_8c" startline="267">DBusConnection::outgoing_messages</references>
        <referencedby refid="group__DBusConnection_1ga1e40d994ea162ce767e78de1c4988566" compoundref="dbus-connection_8c" startline="4091" endline="4119">dbus_connection_pop_message</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gaa43a13ee3509eaac5964672a22f3a713" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t protected_change_watch</definition>
        <argsstring>(DBusConnection *connection, DBusWatch *watch, DBusWatchAddFunction add_function, DBusWatchRemoveFunction remove_function, DBusWatchToggleFunction toggle_function, dbus_bool_t enabled)</argsstring>
        <name>protected_change_watch</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> *</type>
          <declname>watch</declname>
        </param>
        <param>
          <type><ref refid="group__DBusServerInternals_1ga0c100eb3b1ecdb886ac670c815eacf23" kindref="member">DBusWatchAddFunction</ref></type>
          <declname>add_function</declname>
        </param>
        <param>
          <type><ref refid="group__DBusServerInternals_1ga39078b4c2b83651a39638ca210591b98" kindref="member">DBusWatchRemoveFunction</ref></type>
          <declname>remove_function</declname>
        </param>
        <param>
          <type><ref refid="group__DBusServerInternals_1ga890755ee5ee0e545b0ba7e9c09c6ac98" kindref="member">DBusWatchToggleFunction</ref></type>
          <declname>toggle_function</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="681" column="1" bodyfile="dbus/dbus-connection.c" bodystart="681" bodyend="728"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga82adef36b4cd583bc1146eae5756c063" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_connection_add_watch_unlocked</definition>
        <argsstring>(DBusConnection *connection, DBusWatch *watch)</argsstring>
        <name>_dbus_connection_add_watch_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> *</type>
          <declname>watch</declname>
        </param>
        <briefdescription>
<para>Adds a watch using the connection&apos;s DBusAddWatchFunction if available. </para>        </briefdescription>
        <detaileddescription>
<para>Otherwise records the watch to be added when said function is available. Also re-adds the watch if the DBusAddWatchFunction changes. May fail due to lack of memory. Connection lock should be held when calling this.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>watch</parametername>
</parameternamelist>
<parameterdescription>
<para>the watch to add. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="743" column="1" bodyfile="dbus/dbus-connection.c" bodystart="743" bodyend="749"/>
        <references refid="group__DBusWatchInternals_1gaec61655a4bd6186a6a1ec104771d8af5" compoundref="dbus-watch_8c" startline="376" endline="399">_dbus_watch_list_add_watch</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga65fc02c0756d0c7caaa39cd60922c99b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_remove_watch_unlocked</definition>
        <argsstring>(DBusConnection *connection, DBusWatch *watch)</argsstring>
        <name>_dbus_connection_remove_watch_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> *</type>
          <declname>watch</declname>
        </param>
        <briefdescription>
<para>Removes a watch using the connection&apos;s DBusRemoveWatchFunction if available. </para>        </briefdescription>
        <detaileddescription>
<para>It&apos;s an error to call this function on a watch that was not previously added. Connection lock should be held when calling this.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>watch</parametername>
</parameternamelist>
<parameterdescription>
<para>the watch to remove. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="761" column="1" bodyfile="dbus/dbus-connection.c" bodystart="761" bodyend="768"/>
        <references refid="group__DBusWatchInternals_1ga76894d297bc7d7d23cbacdc2b1778884" compoundref="dbus-watch_8c" startline="409" endline="425">_dbus_watch_list_remove_watch</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga6c00e2eaf225b154760976af5688d250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_toggle_watch_unlocked</definition>
        <argsstring>(DBusConnection *connection, DBusWatch *watch, dbus_bool_t enabled)</argsstring>
        <name>_dbus_connection_toggle_watch_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> *</type>
          <declname>watch</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
<para>Toggles a watch and notifies app via connection&apos;s DBusWatchToggledFunction if available. </para>        </briefdescription>
        <detaileddescription>
<para>It&apos;s an error to call this function on a watch that was not previously added. Connection lock should be held when calling this.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>watch</parametername>
</parameternamelist>
<parameterdescription>
<para>the watch to toggle. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to enable or disable </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="781" column="1" bodyfile="dbus/dbus-connection.c" bodystart="781" bodyend="791"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusWatchInternals_1ga14bb50e8663a1d9d3960b4f73c09c097" compoundref="dbus-watch_8c" startline="436" endline="455">_dbus_watch_list_toggle_watch</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga7fe907a54508918cca9757075aef928c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t protected_change_timeout</definition>
        <argsstring>(DBusConnection *connection, DBusTimeout *timeout, DBusTimeoutAddFunction add_function, DBusTimeoutRemoveFunction remove_function, DBusTimeoutToggleFunction toggle_function, dbus_bool_t enabled)</argsstring>
        <name>protected_change_timeout</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref> *</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="group__DBusServerInternals_1ga1272640bcf4e26d62fe7f370320bf86f" kindref="member">DBusTimeoutAddFunction</ref></type>
          <declname>add_function</declname>
        </param>
        <param>
          <type><ref refid="group__DBusServerInternals_1gafb9fc05c4a99995ed205a9ad83c5f866" kindref="member">DBusTimeoutRemoveFunction</ref></type>
          <declname>remove_function</declname>
        </param>
        <param>
          <type><ref refid="group__DBusServerInternals_1ga83663c3fa4f13a262c4ee1d3037e93e5" kindref="member">DBusTimeoutToggleFunction</ref></type>
          <declname>toggle_function</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="805" column="1" bodyfile="dbus/dbus-connection.c" bodystart="805" bodyend="852"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga69e87e3be94b8c681585ec870e39a64a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_connection_add_timeout_unlocked</definition>
        <argsstring>(DBusConnection *connection, DBusTimeout *timeout)</argsstring>
        <name>_dbus_connection_add_timeout_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref> *</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Adds a timeout using the connection&apos;s DBusAddTimeoutFunction if available. </para>        </briefdescription>
        <detaileddescription>
<para>Otherwise records the timeout to be added when said function is available. Also re-adds the timeout if the DBusAddTimeoutFunction changes. May fail due to lack of memory. The timeout will fire repeatedly until removed. Connection lock should be held when calling this.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>the timeout to add. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="867" column="1" bodyfile="dbus/dbus-connection.c" bodystart="867" bodyend="873"/>
        <references refid="group__DBusTimeoutInternals_1ga14955f061551ece122808b9e6ddc0757" compoundref="dbus-timeout_8c" startline="310" endline="330">_dbus_timeout_list_add_timeout</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusConnectionInternals_1ga165dcfd8b995ff0edd19aebcf3e1a61a" compoundref="dbus-connection_8c" startline="905" endline="913">_dbus_connection_toggle_timeout_unlocked</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gabaa6d26f6eca30782904af1ceb703bd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_remove_timeout_unlocked</definition>
        <argsstring>(DBusConnection *connection, DBusTimeout *timeout)</argsstring>
        <name>_dbus_connection_remove_timeout_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref> *</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Removes a timeout using the connection&apos;s DBusRemoveTimeoutFunction if available. </para>        </briefdescription>
        <detaileddescription>
<para>It&apos;s an error to call this function on a timeout that was not previously added. Connection lock should be held when calling this.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>the timeout to remove. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="885" column="1" bodyfile="dbus/dbus-connection.c" bodystart="885" bodyend="892"/>
        <references refid="group__DBusTimeoutInternals_1gaec0ffafdcac87f23878a2ddded044822" compoundref="dbus-timeout_8c" startline="340" endline="351">_dbus_timeout_list_remove_timeout</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusConnectionInternals_1ga9f9665902c763bd1ddf9d9bc57d7a7ba" compoundref="dbus-connection_8c" startline="2146" endline="2160">_dbus_connection_close_if_only_one_ref</referencedby>
        <referencedby refid="group__DBusConnectionInternals_1gac1b92eba0aeee294dc28fcc260c9b749" compoundref="dbus-connection_8c" startline="480" endline="534">_dbus_connection_queue_received_message_link</referencedby>
        <referencedby refid="group__DBusConnectionInternals_1ga165dcfd8b995ff0edd19aebcf3e1a61a" compoundref="dbus-connection_8c" startline="905" endline="913">_dbus_connection_toggle_timeout_unlocked</referencedby>
        <referencedby refid="group__DBusConnection_1gae1cb64f4cf550949b23fd3a756b2f7d0" compoundref="dbus-connection_8c" startline="3302" endline="3328">dbus_connection_send</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga165dcfd8b995ff0edd19aebcf3e1a61a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_toggle_timeout_unlocked</definition>
        <argsstring>(DBusConnection *connection, DBusTimeout *timeout, dbus_bool_t enabled)</argsstring>
        <name>_dbus_connection_toggle_timeout_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusTimeout" kindref="compound">DBusTimeout</ref> *</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
<para>Toggles a timeout and notifies app via connection&apos;s DBusTimeoutToggledFunction if available. </para>        </briefdescription>
        <detaileddescription>
<para>It&apos;s an error to call this function on a timeout that was not previously added. Connection lock should be held when calling this.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>the timeout to toggle. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to enable or disable </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="905" column="1" bodyfile="dbus/dbus-connection.c" bodystart="905" bodyend="913"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusConnectionInternals_1ga69e87e3be94b8c681585ec870e39a64a" compoundref="dbus-connection_8c" startline="867" endline="873">_dbus_connection_add_timeout_unlocked</references>
        <references refid="group__DBusConnectionInternals_1ga7151f75b5d2308ec80cfe893aba72aa1" compoundref="dbus-connection_8c" startline="1419" endline="1433">_dbus_connection_ref_unlocked</references>
        <references refid="group__DBusConnectionInternals_1gabaa6d26f6eca30782904af1ceb703bd1" compoundref="dbus-connection_8c" startline="885" endline="892">_dbus_connection_remove_timeout_unlocked</references>
        <references refid="group__DBusConnectionInternals_1ga9ffbd9aa4f07cb30d92887e956a9fd43" compoundref="dbus-connection_8c" startline="1442" endline="1457">_dbus_connection_unref_unlocked</references>
        <references refid="group__DBusHashTable_1gaca20a83f3214db08fa34df2c49c8edd5" compoundref="dbus-hash_8c" startline="1248" endline="1271">_dbus_hash_table_insert_int</references>
        <references refid="group__DBusHashTable_1gacdebe75bd692605a69dc73c15e0eefd0" compoundref="dbus-hash_8c" startline="1151" endline="1168">_dbus_hash_table_remove_int</references>
        <references refid="group__DBusPendingCallInternals_1gae725060aa80d9df58dcee4f1fa108784" compoundref="dbus-pending-call_8c" startline="338" endline="343">_dbus_pending_call_get_connection_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1gaf5f3df36149bfe55d824eb08d00768fc" compoundref="dbus-pending-call_8c" startline="293" endline="298">_dbus_pending_call_get_reply_serial_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1gaa9acac047b61c9a0eaff1977151e9e08" compoundref="dbus-pending-call_8c" startline="279" endline="284">_dbus_pending_call_get_timeout_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1gaf1e630b966722af540502329ed028254" compoundref="dbus-pending-call_8c" startline="248" endline="253">_dbus_pending_call_is_timeout_added_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1ga9d8987da3747604d370ffec2c5e1e10a" compoundref="dbus-pending-call_8c" startline="394" endline="403">_dbus_pending_call_ref_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1gafea13f8b9977d341e41201c407adea2a" compoundref="dbus-pending-call_8c" startline="263" endline="269">_dbus_pending_call_set_timeout_added_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1ga26f09beed0dd6323cca0452abf344567" compoundref="dbus-pending-call_8c" startline="457" endline="470">_dbus_pending_call_unref_and_unlock</references>
        <references refid="group__DBusTimeoutInternals_1ga3d1ee0968a47651c5428ebf48711b217" compoundref="dbus-timeout_8c" startline="362" endline="376">_dbus_timeout_list_toggle_timeout</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1ad8fa077f91fe62d0c10862e2ff9e86ca" compoundref="dbus-connection_8c" startline="289">DBusConnection::pending_replies</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gacbd883ba828c924c6a45a0f170fbaf86" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t _dbus_connection_attach_pending_call_unlocked</definition>
        <argsstring>(DBusConnection *connection, DBusPendingCall *pending)</argsstring>
        <name>_dbus_connection_attach_pending_call_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> *</type>
          <declname>pending</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="916" column="1" bodyfile="dbus/dbus-connection.c" bodystart="916" bodyend="964"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gab614d8dbd7a15e4d10e151ef8d9834cf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void free_pending_call_on_hash_removal</definition>
        <argsstring>(void *data)</argsstring>
        <name>free_pending_call_on_hash_removal</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="967" column="1" bodyfile="dbus/dbus-connection.c" bodystart="967" bodyend="998"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gac81dcffaea3ae3124784f02f401cf0ec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_connection_detach_pending_call_unlocked</definition>
        <argsstring>(DBusConnection *connection, DBusPendingCall *pending)</argsstring>
        <name>_dbus_connection_detach_pending_call_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> *</type>
          <declname>pending</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="1001" column="1" bodyfile="dbus/dbus-connection.c" bodystart="1001" bodyend="1009"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga0b3b9225570d4aa9abda36ce02518dc4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_connection_detach_pending_call_and_unlock</definition>
        <argsstring>(DBusConnection *connection, DBusPendingCall *pending)</argsstring>
        <name>_dbus_connection_detach_pending_call_and_unlock</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> *</type>
          <declname>pending</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="1012" column="1" bodyfile="dbus/dbus-connection.c" bodystart="1012" bodyend="1033"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga968196bee49659e75c54b53d7c85fa51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_remove_pending_call</definition>
        <argsstring>(DBusConnection *connection, DBusPendingCall *pending)</argsstring>
        <name>_dbus_connection_remove_pending_call</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> *</type>
          <declname>pending</declname>
        </param>
        <briefdescription>
<para>Removes a pending call from the connection, such that the pending reply will be ignored. </para>        </briefdescription>
        <detaileddescription>
<para>May drop the last reference to the pending call.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pending</parametername>
</parameternamelist>
<parameterdescription>
<para>the pending call </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="1044" column="1" bodyfile="dbus/dbus-connection.c" bodystart="1044" bodyend="1049"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusThreadsInternals_1gabea1bdc19c155bca909839090c05eee2" compoundref="dbus-threads_8c" startline="136" endline="142">_dbus_cmutex_lock</references>
        <references refid="group__DBusThreadsInternals_1gad199edcd1bb88cfd2e9dcfb47cbc732f" compoundref="dbus-threads_8c" startline="164" endline="170">_dbus_cmutex_unlock</references>
        <references refid="group__DBusThreadsInternals_1ga6938b8a4547ce48290615990f64bd3bb" compoundref="dbus-threads_8c" startline="240" endline="247">_dbus_condvar_wait</references>
        <references refid="group__DBusThreadsInternals_1ga918e53c2abc48ff496f3c75566ba8bd3" compoundref="dbus-threads_8c" startline="261" endline="270">_dbus_condvar_wait_timeout</references>
        <references refid="group__DBusThreadsInternals_1ga8af2fd84773022e7e7ce1f21f0126203" compoundref="dbus-threads_8c" startline="278" endline="284">_dbus_condvar_wake_one</references>
        <references refid="group__DBusConnectionInternals_1ga7151f75b5d2308ec80cfe893aba72aa1" compoundref="dbus-connection_8c" startline="1419" endline="1433">_dbus_connection_ref_unlocked</references>
        <references refid="group__DBusConnectionInternals_1ga9ffbd9aa4f07cb30d92887e956a9fd43" compoundref="dbus-connection_8c" startline="1442" endline="1457">_dbus_connection_unref_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusConnection_1a9f71e445534a4405075c33b5a075589f" compoundref="dbus-connection_8c" startline="313">DBusConnection::io_path_acquired</references>
        <references refid="structDBusConnection_1a6d87e03eea7aaff53f5574efcfb8c3e4" compoundref="dbus-connection_8c" startline="265">DBusConnection::io_path_cond</references>
        <references refid="structDBusConnection_1aaad1c7d6e6ba3e049ef790f4f9aa35cd" compoundref="dbus-connection_8c" startline="264">DBusConnection::io_path_mutex</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusPendingCall_1ga6530d18f891d3ca5f5df87ea7c2b155c" compoundref="dbus-pending-call_8c" startline="663" endline="669">dbus_pending_call_cancel</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga0f24cacd1574f2dfacbb15e51867a976" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t _dbus_connection_acquire_io_path</definition>
        <argsstring>(DBusConnection *connection, int timeout_milliseconds)</argsstring>
        <name>_dbus_connection_acquire_io_path</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout_milliseconds</declname>
        </param>
        <briefdescription>
<para>Acquire the transporter I/O path. </para>        </briefdescription>
        <detaileddescription>
<para>This must be done before doing any I/O in the transporter. May sleep and drop the IO path mutex while waiting for the I/O path.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_milliseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum blocking time, or -1 for no limit. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if the I/O path was acquired. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="1061" column="1" bodyfile="dbus/dbus-connection.c" bodystart="1061" bodyend="1133"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gaf198a87ed9ea6e9d28c8c12649a352bb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_connection_release_io_path</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_release_io_path</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Release the I/O path when you&apos;re done with it. </para>        </briefdescription>
        <detaileddescription>
<para>Only call after you&apos;ve acquired the I/O. Wakes up at most one thread currently waiting to acquire the I/O path.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="1143" column="1" bodyfile="dbus/dbus-connection.c" bodystart="1143" bodyend="1160"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga283f0254537c4bf4453dbed6fad2e21e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_do_iteration_unlocked</definition>
        <argsstring>(DBusConnection *connection, DBusPendingCall *pending, unsigned int flags, int timeout_milliseconds)</argsstring>
        <name>_dbus_connection_do_iteration_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> *</type>
          <declname>pending</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout_milliseconds</declname>
        </param>
        <briefdescription>
<para>Queues incoming messages and sends outgoing messages for this connection, optionally blocking in the process. </para>        </briefdescription>
        <detaileddescription>
<para>Each call to <ref refid="group__DBusConnectionInternals_1ga283f0254537c4bf4453dbed6fad2e21e" kindref="member">_dbus_connection_do_iteration_unlocked()</ref> will call select() or poll() one time and then read or write data if possible.</para><para>The purpose of this function is to be able to flush outgoing messages or queue up incoming messages without returning control to the application and causing reentrancy weirdness.</para><para>The flags parameter allows you to specify whether to read incoming messages, write outgoing messages, or both, and whether to block if no immediate action is possible.</para><para>The timeout_milliseconds parameter does nothing unless the iteration is blocking.</para><para>If there are no outgoing messages and DBUS_ITERATION_DO_READING wasn&apos;t specified, then it&apos;s impossible to block, even if you specify DBUS_ITERATION_BLOCK; in that case the function returns immediately.</para><para>If pending is not NULL then a check is made if the pending call is completed after the io path has been required. If the call has been completed nothing is done. This must be done since the _dbus_connection_acquire_io_path releases the connection lock for a while.</para><para>Called with connection lock held.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pending</parametername>
</parameternamelist>
<parameterdescription>
<para>the pending call that should be checked or NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>iteration flags. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_milliseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum blocking time, or -1 for no limit. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="1198" column="1" bodyfile="dbus/dbus-connection.c" bodystart="1198" bodyend="1237"/>
        <references refid="group__DBusPendingCallInternals_1ga37bef4359b3c29629a57f5fe480690a1" compoundref="dbus-pending-call_8c" startline="480" endline="483">_dbus_pending_call_get_completed_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1gaf5f3df36149bfe55d824eb08d00768fc" compoundref="dbus-pending-call_8c" startline="293" endline="298">_dbus_pending_call_get_reply_serial_unlocked</references>
        <references refid="group__DBusTransport_1gac5e6d7a01debcf852b8d5a2fbc666fde" compoundref="dbus-transport_8c" startline="984" endline="1006">_dbus_transport_do_iteration</references>
        <references refid="structDBusConnection_1a07025e177949c5e65d5f983ac5f5e878" compoundref="dbus-connection_8c" startline="275">DBusConnection::n_outgoing</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
        <referencedby refid="group__DBusConnectionInternals_1gad5e725e66dc16a411544e25675fb9fba" compoundref="dbus-connection_8c" startline="2379" endline="2550">_dbus_connection_block_pending_call</referencedby>
        <referencedby refid="group__DBusConnectionInternals_1gadc46f7abfe925f9860fc8c64aeb29ad2" compoundref="dbus-connection_8c" startline="1948" endline="1955">_dbus_connection_close_possibly_shared</referencedby>
        <referencedby refid="group__DBusConnection_1ga10e68d9d2f41d655a4151ddeb807ff54" compoundref="dbus-connection_8c" startline="3641" endline="3661">dbus_connection_flush</referencedby>
        <referencedby refid="group__DBusConnection_1ga8d6431f17a9e53c9446d87c2ba8409f0" compoundref="dbus-connection_8c" startline="3535" endline="3592">dbus_connection_send_with_reply_and_block</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga2cdffe9215251b69cb39ff36b9f50e6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
        <definition>DBusConnection* _dbus_connection_new_for_transport</definition>
        <argsstring>(DBusTransport *transport)</argsstring>
        <name>_dbus_connection_new_for_transport</name>
        <param>
          <type><ref refid="structDBusTransport" kindref="compound">DBusTransport</ref> *</type>
          <declname>transport</declname>
        </param>
        <briefdescription>
<para>Creates a new connection for the given transport. </para>        </briefdescription>
        <detaileddescription>
<para>A transport represents a message stream that uses some concrete mechanism, such as UNIX domain sockets. May return <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if insufficient memory exists to create the connection.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transport</parametername>
</parameternamelist>
<parameterdescription>
<para>the transport. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new connection, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> on failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="1249" column="1" bodyfile="dbus/dbus-connection.c" bodystart="1249" bodyend="1409"/>
        <references refid="group__DBusSysdeps_1gae74c3fcf12acaeccdb152ef907de951c" compoundref="dbus-sysdeps-unix_8c" startline="2562" endline="2576">_dbus_atomic_inc</references>
        <references refid="group__DBusThreadsInternals_1ga20ec8aeb88b1f65445a4d3c1c0bd0048" compoundref="dbus-threads_8c" startline="107" endline="114">_dbus_cmutex_free_at_location</references>
        <references refid="group__DBusThreadsInternals_1ga89495162caac2ace36c6b9c2031bc962" compoundref="dbus-threads_8c" startline="77" endline="88">_dbus_cmutex_new_at_location</references>
        <references refid="group__DBusThreadsInternals_1ga29444a34b569fca22fac48067832aacd" compoundref="dbus-threads_8c" startline="224" endline="231">_dbus_condvar_free_at_location</references>
        <references refid="group__DBusThreadsInternals_1ga859c5830e3c212323c1d6dafee3858a1" compoundref="dbus-threads_8c" startline="199" endline="204">_dbus_condvar_new_at_location</references>
        <references refid="group__DBusResources_1ga9911dd8fa020299a2b517251ea0be399" compoundref="dbus-resources_8c" startline="88" endline="99">_dbus_counter_new</references>
        <references refid="group__DBusResources_1ga48d9b53d1a395ab3c4f1846ca569ef3f" compoundref="dbus-resources_8c" startline="124" endline="135">_dbus_counter_unref</references>
        <references refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" compoundref="dbus-memory_8c" startline="781">_dbus_current_generation</references>
        <references refid="group__DBusDataSlot_1ga6de49b3a1210202215d40a5a19806992" compoundref="dbus-dataslot_8c" startline="197" endline="201">_dbus_data_slot_list_init</references>
        <references refid="group__DBusSysdeps_1ga6890d4cde3afec0bf274ca2af8c9e204" compoundref="dbus-sysdeps-unix_8c" startline="2990" endline="2993">_dbus_disable_sigpipe</references>
        <references refid="group__DBusHashTable_1gac8e434348a354b9606d4c50c127a5eb4" compoundref="dbus-hash_8c" startline="285" endline="337">_dbus_hash_table_new</references>
        <references refid="group__DBusHashTable_1ga96b777e00764b44e0f3216fd8478f5a9" compoundref="dbus-hash_8c" startline="361" endline="410">_dbus_hash_table_unref</references>
        <references refid="group__DBusList_1gac20b9981531cef590d49a59240344cd8" compoundref="dbus-list_8c" startline="242" endline="245">_dbus_list_alloc_link</references>
        <references refid="group__DBusList_1ga6e824f717125ce40c549d5402e32610f" compoundref="dbus-list_8c" startline="254" endline="257">_dbus_list_free_link</references>
        <references refid="group__DBusObjectTree_1ga5920f14b487122f13a3d439952d5ed2e" compoundref="dbus-object-tree_8c" startline="92" endline="121">_dbus_object_tree_new</references>
        <references refid="group__DBusObjectTree_1ga7639e273ab160c422a7cef0cda60ded5" compoundref="dbus-object-tree_8c" startline="143" endline="155">_dbus_object_tree_unref</references>
        <references refid="group__DBusThreadsInternals_1gae1c95a3f47bcc78d32fc0a5a8ed37c91" compoundref="dbus-threads_8c" startline="94" endline="101">_dbus_rmutex_free_at_location</references>
        <references refid="group__DBusThreadsInternals_1ga191deedb97c76fae82bdbc8e1559a849" compoundref="dbus-threads_8c" startline="53" endline="64">_dbus_rmutex_new_at_location</references>
        <references refid="group__DBusTimeoutInternals_1ga1b399ef2d7f128e59bb32dbb5b590e1b" compoundref="dbus-timeout_8c" startline="211" endline="223">_dbus_timeout_list_free</references>
        <references refid="group__DBusTimeoutInternals_1ga5b122b35cdb3926b7dc2d084ddff9d62" compoundref="dbus-timeout_8c" startline="194" endline="203">_dbus_timeout_list_new</references>
        <references refid="group__DBusTransport_1ga31d6dbc864c9ea643d72521bbb1b7c56" compoundref="dbus-transport_8c" startline="460" endline="467">_dbus_transport_ref</references>
        <references refid="group__DBusTransport_1ga9aaa3f8bf429c94d4ed180dff36c503c" compoundref="dbus-transport_8c" startline="927" endline="941">_dbus_transport_set_connection</references>
        <references refid="group__DBusWatchInternals_1gac3f75c0da2c8c51e8708f45dd27f9e2d" compoundref="dbus-watch_8c" startline="249" endline="260">_dbus_watch_list_free</references>
        <references refid="group__DBusWatchInternals_1ga5d9db5d0af5916a5ec890eb38d5741eb" compoundref="dbus-watch_8c" startline="232" endline="241">_dbus_watch_list_new</references>
        <references refid="structDBusConnection_1a43d0bb9401103383e13ed3c99baf0daa" compoundref="dbus-connection_8c" startline="291">DBusConnection::client_serial</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2acb9bb9daa90f520d5fc9e84de3c5f017" compoundref="dbus-connection_8h" startline="82">DBUS_DISPATCH_COMPLETE</references>
        <references refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" compoundref="dbus-memory_8c" startline="701" endline="740">dbus_free</references>
        <references refid="group__DBusHashTable_1ggab0ab9767ffa5b6720a13b3d741630852a26446bd9fbb15c6c381b35a810207141" compoundref="dbus-hash_8h" startline="70">DBUS_HASH_INT</references>
        <references refid="group__DBusShared_1ga9ef6478aae637449ec0c5de1679f75ce" compoundref="dbus-shared_8h" startline="100">DBUS_INTERFACE_LOCAL</references>
        <references refid="group__DBusMessage_1ga6ce3213dfb17be7956affba40207a5a0" compoundref="dbus-message_8c" startline="1424" endline="1453">dbus_message_new_signal</references>
        <references refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" compoundref="dbus-message_8c" startline="1690" endline="1709">dbus_message_unref</references>
        <references refid="group__DBusMemory_1gaba9d823abda7f4cadbaf5177d3b8b793" compoundref="dbus-memory_8h" startline="59">dbus_new0</references>
        <references refid="group__DBusShared_1ga850990a54a46142ee7c5f8174cc932c1" compoundref="dbus-shared_8h" startline="82">DBUS_PATH_LOCAL</references>
        <references refid="structDBusConnection_1aa70afc41f6184604c027e7f71a314d7f" compoundref="dbus-connection_8c" startline="292">DBusConnection::disconnect_message_link</references>
        <references refid="structDBusConnection_1a48d141d4311211e921571043bdbaeefb" compoundref="dbus-connection_8c" startline="321">DBusConnection::disconnected_message_arrived</references>
        <references refid="structDBusConnection_1a3b2707b9d10d0643f91a8e027ae118b5" compoundref="dbus-connection_8c" startline="325">DBusConnection::disconnected_message_processed</references>
        <references refid="structDBusConnection_1a201f92bbc0947b503a36eaff9ae0ede9" compoundref="dbus-connection_8c" startline="263">DBusConnection::dispatch_cond</references>
        <references refid="structDBusConnection_1ad9e7bf73a48f4951b24ce8eec7bb7ac5" compoundref="dbus-connection_8c" startline="262">DBusConnection::dispatch_mutex</references>
        <references refid="structDBusConnection_1a2a9f22339f90157f308a532462218404" compoundref="dbus-connection_8c" startline="317">DBusConnection::exit_on_disconnect</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusConnection_1a32d14cefcb4daea257544397755d45ed" compoundref="dbus-connection_8c" startline="284">DBusConnection::filter_list</references>
        <references refid="structDBusConnection_1a6d87e03eea7aaff53f5574efcfb8c3e4" compoundref="dbus-connection_8c" startline="265">DBusConnection::io_path_cond</references>
        <references refid="structDBusConnection_1aaad1c7d6e6ba3e049ef790f4f9aa35cd" compoundref="dbus-connection_8c" startline="264">DBusConnection::io_path_mutex</references>
        <references refid="structDBusConnection_1af3bbd2ecba171ebb8e952eaa030971d7" compoundref="dbus-connection_8c" startline="302">DBusConnection::last_dispatch_status</references>
        <references refid="structDBusConnection_1a98e26cfd09ddbf0238f90bf4965641bf" compoundref="dbus-connection_8c" startline="260">DBusConnection::mutex</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1acd289771721a459f4f9cdeaca0fa87c2" compoundref="dbus-connection_8c" startline="304">DBusConnection::objects</references>
        <references refid="structDBusConnection_1a5dcb660883904035076579c6d2f46501" compoundref="dbus-connection_8c" startline="278">DBusConnection::outgoing_counter</references>
        <references refid="structDBusConnection_1ad8fa077f91fe62d0c10862e2ff9e86ca" compoundref="dbus-connection_8c" startline="289">DBusConnection::pending_replies</references>
        <references refid="structDBusConnection_1a6fbf0227071fc20ffd5b0e79aef58e92" compoundref="dbus-connection_8c" startline="258">DBusConnection::refcount</references>
        <references refid="structDBusConnection_1ab13bc36d7e6f91995768277ecbd5482c" compoundref="dbus-connection_8c" startline="319">DBusConnection::route_peer_messages</references>
        <references refid="structDBusConnection_1aae47138b9b2494b65072ff300d631aa8" compoundref="dbus-connection_8c" startline="315">DBusConnection::shareable</references>
        <references refid="structDBusConnection_1a0f805edcd9c09aaf45974510403dccbd" compoundref="dbus-connection_8c" startline="287">DBusConnection::slot_list</references>
        <references refid="structDBusConnection_1a773fb4ecd2738548dbbfbe6d1206da92" compoundref="dbus-connection_8c" startline="286">DBusConnection::slot_mutex</references>
        <references refid="structDBusConnection_1af3936ac5c968f2ac09bf05cf36025994" compoundref="dbus-connection_8c" startline="282">DBusConnection::timeouts</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
        <references refid="structDBusConnection_1abdb6a32972d924531fb2cd80c7fd6d37" compoundref="dbus-connection_8c" startline="281">DBusConnection::watches</references>
        <referencedby refid="group__DBusConnectionInternals_1ga12756797bd5c1918aa065f9c37ed7bba" compoundref="dbus-connection_8c" startline="1486" endline="1525">_dbus_connection_handle_watch</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga7151f75b5d2308ec80cfe893aba72aa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
        <definition>DBusConnection* _dbus_connection_ref_unlocked</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_ref_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Increments the reference count of a <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Requires that the caller already holds the connection lock.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the connection. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="1419" column="1" bodyfile="dbus/dbus-connection.c" bodystart="1419" bodyend="1433"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusSysdeps_1gae74c3fcf12acaeccdb152ef907de951c" compoundref="dbus-sysdeps-unix_8c" startline="2562" endline="2576">_dbus_atomic_inc</references>
        <references refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" compoundref="dbus-memory_8c" startline="781">_dbus_current_generation</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a6fbf0227071fc20ffd5b0e79aef58e92" compoundref="dbus-connection_8c" startline="258">DBusConnection::refcount</references>
        <referencedby refid="group__DBusConnectionInternals_1ga12756797bd5c1918aa065f9c37ed7bba" compoundref="dbus-connection_8c" startline="1486" endline="1525">_dbus_connection_handle_watch</referencedby>
        <referencedby refid="group__DBusConnectionInternals_1ga968196bee49659e75c54b53d7c85fa51" compoundref="dbus-connection_8c" startline="1044" endline="1049">_dbus_connection_remove_pending_call</referencedby>
        <referencedby refid="group__DBusConnectionInternals_1ga165dcfd8b995ff0edd19aebcf3e1a61a" compoundref="dbus-connection_8c" startline="905" endline="913">_dbus_connection_toggle_timeout_unlocked</referencedby>
        <referencedby refid="group__DBusObjectTree_1ga3babe73ed342b6963997ef2efd73ef75" compoundref="dbus-object-tree_8c" startline="623" endline="677">_dbus_object_tree_unregister_and_unlock</referencedby>
        <referencedby refid="group__DBusPendingCallInternals_1ga3f2300d7a768783bc2fae0991bcc55df" compoundref="dbus-pending-call_8c" startline="109" endline="161">_dbus_pending_call_new_unlocked</referencedby>
        <referencedby refid="group__DBusTransport_1gabe774b134a4bf8c8fc09e6186470874f" compoundref="dbus-transport_8c" startline="724" endline="812">_dbus_transport_try_to_authenticate</referencedby>
        <referencedby refid="group__DBusConnection_1ga66ba7df50d75f4bda6b6e942430b81c7" compoundref="dbus-connection_8c" startline="4549" endline="4862">dbus_connection_dispatch</referencedby>
        <referencedby refid="group__DBusConnection_1ga1e40d994ea162ce767e78de1c4988566" compoundref="dbus-connection_8c" startline="4091" endline="4119">dbus_connection_pop_message</referencedby>
        <referencedby refid="group__DBusConnection_1gae1cb64f4cf550949b23fd3a756b2f7d0" compoundref="dbus-connection_8c" startline="3302" endline="3328">dbus_connection_send</referencedby>
        <referencedby refid="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" compoundref="dbus-connection_8c" startline="2817" endline="2843">dbus_connection_unref</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga9ffbd9aa4f07cb30d92887e956a9fd43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_unref_unlocked</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_unref_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Decrements the reference count of a <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Requires that the caller already holds the connection lock.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="1442" column="1" bodyfile="dbus/dbus-connection.c" bodystart="1442" bodyend="1457"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusSysdeps_1ga3c50a069f795dceeb9172fe2b517bbdc" compoundref="dbus-sysdeps-unix_8c" startline="2585" endline="2599">_dbus_atomic_dec</references>
        <references refid="structDBusConnection_1a43d0bb9401103383e13ed3c99baf0daa" compoundref="dbus-connection_8c" startline="291">DBusConnection::client_serial</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a6fbf0227071fc20ffd5b0e79aef58e92" compoundref="dbus-connection_8c" startline="258">DBusConnection::refcount</references>
        <referencedby refid="group__DBusConnectionInternals_1ga12756797bd5c1918aa065f9c37ed7bba" compoundref="dbus-connection_8c" startline="1486" endline="1525">_dbus_connection_handle_watch</referencedby>
        <referencedby refid="group__DBusConnectionInternals_1ga968196bee49659e75c54b53d7c85fa51" compoundref="dbus-connection_8c" startline="1044" endline="1049">_dbus_connection_remove_pending_call</referencedby>
        <referencedby refid="group__DBusConnectionInternals_1ga165dcfd8b995ff0edd19aebcf3e1a61a" compoundref="dbus-connection_8c" startline="905" endline="913">_dbus_connection_toggle_timeout_unlocked</referencedby>
        <referencedby refid="group__DBusTransport_1gabe774b134a4bf8c8fc09e6186470874f" compoundref="dbus-transport_8c" startline="724" endline="812">_dbus_transport_try_to_authenticate</referencedby>
        <referencedby refid="group__DBusConnection_1ga1e40d994ea162ce767e78de1c4988566" compoundref="dbus-connection_8c" startline="4091" endline="4119">dbus_connection_pop_message</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga5523cac5ad41408bfa285ac97293ed46" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1gaf513803b030613a669cc7ef199f90a8b" kindref="member">dbus_uint32_t</ref></type>
        <definition>static dbus_uint32_t _dbus_connection_get_next_client_serial</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_get_next_client_serial</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="1460" column="1" bodyfile="dbus/dbus-connection.c" bodystart="1460" bodyend="1470"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga12756797bd5c1918aa065f9c37ed7bba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_connection_handle_watch</definition>
        <argsstring>(DBusWatch *watch, unsigned int condition, void *data)</argsstring>
        <name>_dbus_connection_handle_watch</name>
        <param>
          <type><ref refid="structDBusWatch" kindref="compound">DBusWatch</ref> *</type>
          <declname>watch</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>A callback for use with dbus_watch_new() to create a <ref refid="structDBusWatch" kindref="compound">DBusWatch</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000007"><xreftitle>Todo</xreftitle><xrefdescription><para>This is basically a hack - we could delete <ref refid="group__DBusTransport_1ga4a010098fe079eb6f201ff034d15fdff" kindref="member">_dbus_transport_handle_watch()</ref> and the virtual handle_watch in <ref refid="structDBusTransport" kindref="compound">DBusTransport</ref> if we got rid of it. The reason this is some work is threading, see the <ref refid="group__DBusConnectionInternals_1ga12756797bd5c1918aa065f9c37ed7bba" kindref="member">_dbus_connection_handle_watch()</ref> implementation.</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>watch</parametername>
</parameternamelist>
<parameterdescription>
<para>the watch. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>condition</parametername>
</parameternamelist>
<parameterdescription>
<para>the current condition of the file descriptors being watched. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>must be a pointer to a <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if the IO condition may not have been fully handled due to lack of memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="1486" column="1" bodyfile="dbus/dbus-connection.c" bodystart="1486" bodyend="1525"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusInternalsUtils_1ga0c4961ec784874f1b1f3aeccea8d3da1" compoundref="dbus-internals_8h" startline="145">_dbus_assert_not_reached</references>
        <references refid="group__DBusConnectionInternals_1gadc46f7abfe925f9860fc8c64aeb29ad2" compoundref="dbus-connection_8c" startline="1948" endline="1955">_dbus_connection_close_possibly_shared</references>
        <references refid="group__DBusConnectionInternals_1ga2cdffe9215251b69cb39ff36b9f50e6c" compoundref="dbus-connection_8c" startline="1249" endline="1409">_dbus_connection_new_for_transport</references>
        <references refid="group__DBusConnectionInternals_1ga7151f75b5d2308ec80cfe893aba72aa1" compoundref="dbus-connection_8c" startline="1419" endline="1433">_dbus_connection_ref_unlocked</references>
        <references refid="group__DBusConnectionInternals_1ga9ffbd9aa4f07cb30d92887e956a9fd43" compoundref="dbus-connection_8c" startline="1442" endline="1457">_dbus_connection_unref_unlocked</references>
        <references refid="group__DBusHashTable_1ga34bf277ee37f919bd00516b5ae4e12b5" compoundref="dbus-hash_8c" startline="613" endline="623">_dbus_hash_iter_get_value</references>
        <references refid="group__DBusHashTable_1ga1b0e6df8a8617ef0f8f25adfba3acc4c" compoundref="dbus-hash_8c" startline="517" endline="532">_dbus_hash_iter_init</references>
        <references refid="group__DBusHashTable_1ga723e61fcc91ca673e90ff872c07ea19c" compoundref="dbus-hash_8c" startline="543" endline="581">_dbus_hash_iter_next</references>
        <references refid="group__DBusHashTable_1gad48297fc27442c19a7c4bd4d1ef9ef77" compoundref="dbus-hash_8c" startline="1397" endline="1400">_dbus_hash_table_get_n_entries</references>
        <references refid="group__DBusHashTable_1ga43e98a91a11952824c544330e19f6c22" compoundref="dbus-hash_8c" startline="1214" endline="1230">_dbus_hash_table_insert_string</references>
        <references refid="group__DBusHashTable_1gad51eb3fe682721dd4f6a920ca87cb730" compoundref="dbus-hash_8c" startline="1049" endline="1062">_dbus_hash_table_lookup_string</references>
        <references refid="group__DBusHashTable_1gac8e434348a354b9606d4c50c127a5eb4" compoundref="dbus-hash_8c" startline="285" endline="337">_dbus_hash_table_new</references>
        <references refid="group__DBusHashTable_1ga388d50ce1a07bf0790b9f2ecdb08a396" compoundref="dbus-hash_8c" startline="1123" endline="1140">_dbus_hash_table_remove_string</references>
        <references refid="group__DBusHashTable_1ga96b777e00764b44e0f3216fd8478f5a9" compoundref="dbus-hash_8c" startline="361" endline="410">_dbus_hash_table_unref</references>
        <references refid="group__DBusList_1gacb96c9d3e9a869e63b8db4f8913a5a60" compoundref="dbus-list_8c" startline="649" endline="662">_dbus_list_pop_first</references>
        <references refid="group__DBusList_1gab4aa60e0466ac7075f3d1751909d6a52" compoundref="dbus-list_8c" startline="292" endline="304">_dbus_list_prepend</references>
        <references refid="group__DBusList_1ga202e6ac8ad3e4a9d4413e0248ffcf3e3" compoundref="dbus-list_8c" startline="415" endline="433">_dbus_list_remove</references>
        <references refid="group__DBusInternalsUtils_1ga3b56fdb9df58277ee69d9f56a73bf383" compoundref="dbus-internals_8h" startline="329">_DBUS_LOCK</references>
        <references refid="group__DBusMemoryInternals_1ga8dc6d5dd0a0e7901ab793da7403ee734" compoundref="dbus-memory_8c" startline="810" endline="821">_dbus_register_shutdown_func</references>
        <references refid="group__DBusInternalsUtils_1ga9d00d77f6595b9d7ac1baf59d44bf58c" compoundref="dbus-internals_8c" startline="527" endline="544">_dbus_strdup</references>
        <references refid="group__DBusTransport_1ga4a010098fe079eb6f201ff034d15fdff" compoundref="dbus-transport_8c" startline="889" endline="915">_dbus_transport_handle_watch</references>
        <references refid="group__DBusTransport_1ga0893897223056c89f33b2641a7b21cf8" compoundref="dbus-transport_8c" startline="367" endline="451">_dbus_transport_open</references>
        <references refid="group__DBusTransport_1gab7c53c32a2320c81aae8ce4345762e73" compoundref="dbus-transport_8c" startline="477" endline="491">_dbus_transport_unref</references>
        <references refid="group__DBusInternalsUtils_1ga1b7db80a2ea11235768ec8aa698df0a5" compoundref="dbus-internals_8h" startline="330">_DBUS_UNLOCK</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusAddress_1ga37a7009b07cf991ff07f3e86d71bf352" compoundref="dbus-address_8c" startline="189" endline="196">dbus_address_entries_free</references>
        <references refid="group__DBusAddress_1gae6f014689b49099e835b1f97d032034e" compoundref="dbus-address_8c" startline="244" endline="264">dbus_address_entry_get_value</references>
        <references refid="group__DBusConnection_1ga1e40d994ea162ce767e78de1c4988566" compoundref="dbus-connection_8c" startline="4091" endline="4119">dbus_connection_pop_message</references>
        <references refid="group__DBusConnection_1gae34751e15f114217e5ad10c663e2ef2e" compoundref="dbus-connection_8c" startline="2681" endline="2692">dbus_connection_ref</references>
        <references refid="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" compoundref="dbus-connection_8c" startline="2817" endline="2843">dbus_connection_unref</references>
        <references refid="group__DBusErrors_1gaac6c14ead14829ee4e090f39de6a7568" compoundref="dbus-errors_8c" startline="211" endline="226">dbus_error_free</references>
        <references refid="group__DBusErrorInternals_1ga961cc70e3891282a65205c4c8418d88e" compoundref="dbus-errors_8h" startline="62">DBUS_ERROR_INIT</references>
        <references refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" compoundref="dbus-memory_8c" startline="701" endline="740">dbus_free</references>
        <references refid="group__DBusHashTable_1ggab0ab9767ffa5b6720a13b3d741630852a481fd0166d28da725b3e97f15192434e" compoundref="dbus-hash_8h" startline="69">DBUS_HASH_STRING</references>
        <references refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" compoundref="dbus-message_8c" startline="1690" endline="1709">dbus_message_unref</references>
        <references refid="group__DBusErrors_1ga0a27fb9f1af0c2bfd105d7e8622b93f4" compoundref="dbus-errors_8c" startline="279" endline="292">dbus_move_error</references>
        <references refid="group__DBusAddress_1ga3cbf5947262b79601598276c720e2098" compoundref="dbus-address_8c" startline="363" endline="573">dbus_parse_address</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusConnection_1a336a7953a4a28e55f6e6a07acfa11df3" compoundref="dbus-connection_8c" startline="330">DBusConnection::have_connection_lock</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1ad1abb7ad98db87f32b4abda22df075bd" compoundref="dbus-connection_8c" startline="306">DBusConnection::server_guid</references>
        <references refid="structDBusConnection_1aae47138b9b2494b65072ff300d631aa8" compoundref="dbus-connection_8c" startline="315">DBusConnection::shareable</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gabd4fff56a505b7d6aa8d0adfbb1d6c3a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void close_connection_on_shutdown</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>close_connection_on_shutdown</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="1532" column="1" bodyfile="dbus/dbus-connection.c" bodystart="1532" bodyend="1545"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga8095cd57c65e347cbc526d807bc339ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void shared_connections_shutdown</definition>
        <argsstring>(void *data)</argsstring>
        <name>shared_connections_shutdown</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="1548" column="1" bodyfile="dbus/dbus-connection.c" bodystart="1548" bodyend="1601"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gaa09684c4ae5605755b9e75c3b7d7ac21" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t connection_lookup_shared</definition>
        <argsstring>(DBusAddressEntry *entry, DBusConnection **result)</argsstring>
        <name>connection_lookup_shared</name>
        <param>
          <type><ref refid="structDBusAddressEntry" kindref="compound">DBusAddressEntry</ref> *</type>
          <declname>entry</declname>
        </param>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> **</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="1604" column="1" bodyfile="dbus/dbus-connection.c" bodystart="1604" bodyend="1693"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gab470b395ab53910dd790bae8ce610997" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t connection_record_shared_unlocked</definition>
        <argsstring>(DBusConnection *connection, const char *guid)</argsstring>
        <name>connection_record_shared_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>guid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="1696" column="1" bodyfile="dbus/dbus-connection.c" bodystart="1696" bodyend="1771"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gaf55137a15282056a6f4034b782bb9bf5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void connection_forget_shared_unlocked</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>connection_forget_shared_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="1774" column="1" bodyfile="dbus/dbus-connection.c" bodystart="1774" bodyend="1809"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga061f246a7a7d9d42e783f6cfbba2d034" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
        <definition>static DBusConnection* connection_try_from_address_entry</definition>
        <argsstring>(DBusAddressEntry *entry, DBusError *error)</argsstring>
        <name>connection_try_from_address_entry</name>
        <param>
          <type><ref refid="structDBusAddressEntry" kindref="compound">DBusAddressEntry</ref> *</type>
          <declname>entry</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="1812" column="1" bodyfile="dbus/dbus-connection.c" bodystart="1812" bodyend="1840"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga7f2ed7477b09dc7693d09565328d5490" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
        <definition>static DBusConnection* _dbus_connection_open_internal</definition>
        <argsstring>(const char *address, dbus_bool_t shared, DBusError *error)</argsstring>
        <name>_dbus_connection_open_internal</name>
        <param>
          <type>const char *</type>
          <declname>address</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
          <declname>shared</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="1855" column="1" bodyfile="dbus/dbus-connection.c" bodystart="1855" bodyend="1937"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gadc46f7abfe925f9860fc8c64aeb29ad2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_close_possibly_shared</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_close_possibly_shared</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Closes a shared OR private connection, while <ref refid="group__DBusConnection_1ga2522ac5075dfe0a1535471f6e045e1ee" kindref="member">dbus_connection_close()</ref> can only be used on private connections. </para>        </briefdescription>
        <detaileddescription>
<para>Should only be called by the dbus code that owns the connection - an owner must be known, the open/close state is like malloc/free, not like ref/unref.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="1948" column="1" bodyfile="dbus/dbus-connection.c" bodystart="1948" bodyend="1955"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusConnectionInternals_1ga283f0254537c4bf4453dbed6fad2e21e" compoundref="dbus-connection_8c" startline="1198" endline="1237">_dbus_connection_do_iteration_unlocked</references>
        <references refid="group__DBusResources_1gae93240c77bfb66642453518c9bb90bc4" compoundref="dbus-resources_8c" startline="108" endline="115">_dbus_counter_ref</references>
        <references refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" compoundref="dbus-memory_8c" startline="781">_dbus_current_generation</references>
        <references refid="group__DBusList_1gac20b9981531cef590d49a59240344cd8" compoundref="dbus-list_8c" startline="242" endline="245">_dbus_list_alloc_link</references>
        <references refid="group__DBusList_1ga6e824f717125ce40c549d5402e32610f" compoundref="dbus-list_8c" startline="254" endline="257">_dbus_list_free_link</references>
        <references refid="group__DBusList_1gab3dd068e3bd8a319c0d12150785050a7" compoundref="dbus-list_8c" startline="333" endline="337">_dbus_list_prepend_link</references>
        <references refid="group__DBusMessageInternals_1gafaed2adc00b2ec54b2827ecb778bbe7e" compoundref="dbus-message_8c" startline="280" endline="312">_dbus_message_add_counter_link</references>
        <references refid="structDBusPreallocatedSend_1a465af3647772c89500df0b46f43d035b" compoundref="dbus-connection_8c" startline="242">DBusPreallocatedSend::connection</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="structDBusPreallocatedSend_1aae6c1bd98f78491482d5f59b6ef138d4" compoundref="dbus-connection_8c" startline="244">DBusPreallocatedSend::counter_link</references>
        <references refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" compoundref="dbus-list_8h" startline="38">DBusList::data</references>
        <references refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" compoundref="dbus-memory_8c" startline="701" endline="740">dbus_free</references>
        <references refid="group__DBusMessage_1gaac65c926e6253e49aa689b4f032fad45" compoundref="dbus-message_8c" startline="3450" endline="3462">dbus_message_get_destination</references>
        <references refid="group__DBusMessage_1ga1ad192bd4538cae556121a71b4e09d42" compoundref="dbus-message_8c" startline="3227" endline="3239">dbus_message_get_interface</references>
        <references refid="group__DBusMessage_1gaf5c6b705c53db07a5ae2c6b76f230cf9" compoundref="dbus-message_8c" startline="3313" endline="3325">dbus_message_get_member</references>
        <references refid="group__DBusMessage_1ga18adf731bb42d324fe2624407319e4af" compoundref="dbus-message_8c" startline="3096" endline="3108">dbus_message_get_path</references>
        <references refid="group__DBusMessage_1ga390710c25564c80025a006c376da2030" compoundref="dbus-message_8c" startline="1127" endline="1132">dbus_message_get_serial</references>
        <references refid="group__DBusMessage_1gaed63e4c2baaa50d782e8ebb7643def19" compoundref="dbus-message_8c" startline="3543" endline="3553">dbus_message_get_signature</references>
        <references refid="group__DBusMessage_1ga41cace31999105137772b6257ea540f9" compoundref="dbus-message_8c" startline="1722" endline="1727">dbus_message_get_type</references>
        <references refid="group__DBusMessageInternals_1ga3ecc9c24381af05289161f477ad6a578" compoundref="dbus-message_8c" startline="384" endline="397">dbus_message_lock</references>
        <references refid="group__DBusMessage_1ga834035e4817acd64adc8ca584bdf3982" compoundref="dbus-message_8c" startline="1667" endline="1680">dbus_message_ref</references>
        <references refid="group__DBusMessageInternals_1ga3dd30a62c63eb9972cc0c564f2a89c3b" compoundref="dbus-message_8c" startline="254" endline="261">dbus_message_set_serial</references>
        <references refid="group__DBusMessageInternals_1ga75bcb613a291eb7e427f77f2f3635b8f" compoundref="dbus-message_8c" startline="4691" endline="4706">dbus_message_type_to_string</references>
        <references refid="group__DBusMemory_1ga54ccb556e7964112a825a7f46c156ca0" compoundref="dbus-memory_8h" startline="58">dbus_new</references>
        <references refid="structDBusConnection_1a07025e177949c5e65d5f983ac5f5e878" compoundref="dbus-connection_8c" startline="275">DBusConnection::n_outgoing</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1a5dcb660883904035076579c6d2f46501" compoundref="dbus-connection_8c" startline="278">DBusConnection::outgoing_counter</references>
        <references refid="structDBusConnection_1a714fd51af8730c367b079594c7f756ae" compoundref="dbus-connection_8c" startline="267">DBusConnection::outgoing_messages</references>
        <references refid="structDBusPreallocatedSend_1ae164fe13f866bebbd714b526104c5bff" compoundref="dbus-connection_8c" startline="243">DBusPreallocatedSend::queue_link</references>
        <referencedby refid="group__DBusBusInternals_1ga0e7fe5d0dcaca7ecb4b5a7ace23d6286" compoundref="dbus-bus_8c" startline="387" endline="413">_dbus_bus_notify_shared_connection_disconnected_unlocked</referencedby>
        <referencedby refid="group__DBusConnectionInternals_1ga12756797bd5c1918aa065f9c37ed7bba" compoundref="dbus-connection_8c" startline="1486" endline="1525">_dbus_connection_handle_watch</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gaff78b4673889d2bc16cc68f03aa32afd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusPreallocatedSend" kindref="compound">DBusPreallocatedSend</ref> *</type>
        <definition>static DBusPreallocatedSend* _dbus_connection_preallocate_send_unlocked</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_preallocate_send_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="1958" column="1" bodyfile="dbus/dbus-connection.c" bodystart="1958" bodyend="1990"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gabcee6bb3b4a1183acf233f571a61fa67" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_connection_send_preallocated_unlocked_no_update</definition>
        <argsstring>(DBusConnection *connection, DBusPreallocatedSend *preallocated, DBusMessage *message, dbus_uint32_t *client_serial)</argsstring>
        <name>_dbus_connection_send_preallocated_unlocked_no_update</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusPreallocatedSend" kindref="compound">DBusPreallocatedSend</ref> *</type>
          <declname>preallocated</declname>
        </param>
        <param>
          <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1gaf513803b030613a669cc7ef199f90a8b" kindref="member">dbus_uint32_t</ref> *</type>
          <declname>client_serial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="1994" column="1" bodyfile="dbus/dbus-connection.c" bodystart="1994" bodyend="2065"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga8954e8db286afcc90414052fbc374bd5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_connection_send_preallocated_and_unlock</definition>
        <argsstring>(DBusConnection *connection, DBusPreallocatedSend *preallocated, DBusMessage *message, dbus_uint32_t *client_serial)</argsstring>
        <name>_dbus_connection_send_preallocated_and_unlock</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusPreallocatedSend" kindref="compound">DBusPreallocatedSend</ref> *</type>
          <declname>preallocated</declname>
        </param>
        <param>
          <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1gaf513803b030613a669cc7ef199f90a8b" kindref="member">dbus_uint32_t</ref> *</type>
          <declname>client_serial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="2068" column="1" bodyfile="dbus/dbus-connection.c" bodystart="2068" bodyend="2086"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga2974eb1c261305fafc635e14fc575d03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_connection_send_and_unlock</definition>
        <argsstring>(DBusConnection *connection, DBusMessage *message, dbus_uint32_t *client_serial)</argsstring>
        <name>_dbus_connection_send_and_unlock</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1gaf513803b030613a669cc7ef199f90a8b" kindref="member">dbus_uint32_t</ref> *</type>
          <declname>client_serial</declname>
        </param>
        <briefdescription>
<para>Like <ref refid="group__DBusConnection_1gae1cb64f4cf550949b23fd3a756b2f7d0" kindref="member">dbus_connection_send()</ref>, but assumes the connection is already locked on function entry, and unlocks before returning. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>client_serial</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for client serial of sent message </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on out-of-memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="2098" column="1" bodyfile="dbus/dbus-connection.c" bodystart="2098" bodyend="2119"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusObjectTree_1ga1c51e43233ce0f3855c128f2555317eb" compoundref="dbus-object-tree_8c" startline="718" endline="724">_dbus_object_tree_free_all_unlocked</referencedby>
        <referencedby refid="group__DBusConnection_1gae1cb64f4cf550949b23fd3a756b2f7d0" compoundref="dbus-connection_8c" startline="3302" endline="3328">dbus_connection_send</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga9f9665902c763bd1ddf9d9bc57d7a7ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_close_if_only_one_ref</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_close_if_only_one_ref</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Used internally to handle the semantics of <ref refid="group__DBusServer_1gaa14d9109e04adccffd9a40460c28c53b" kindref="member">dbus_server_set_new_connection_function()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>If the new connection function does not ref the connection, we want to close it.</para><para>A bit of a hack, probably the new connection function should have returned a value for whether to close, or should have had to close the connection itself if it didn&apos;t want it.</para><para>But, this works OK as long as the new connection function doesn&apos;t do anything crazy like keep the connection around without ref&apos;ing it.</para><para>We have to lock the connection across refcount check and close in case the new connection function spawns a thread that closes and unrefs. In that case, if the app thread closes and unrefs first, we&apos;ll harmlessly close again; if the app thread still has the ref, we&apos;ll close and then the app will close harmlessly. If the app unrefs without closing, the app is broken since if the app refs from the new connection function it is supposed to also close.</para><para>If we didn&apos;t atomically check the refcount and close with the lock held though, we could screw this up.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="2146" column="1" bodyfile="dbus/dbus-connection.c" bodystart="2146" bodyend="2160"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusSysdeps_1ga626c810359ba0e362367ce2ec6691aca" compoundref="dbus-sysdeps-unix_8c" startline="2609" endline="2623">_dbus_atomic_get</references>
        <references refid="group__DBusConnectionInternals_1gabaa6d26f6eca30782904af1ceb703bd1" compoundref="dbus-connection_8c" startline="885" endline="892">_dbus_connection_remove_timeout_unlocked</references>
        <references refid="group__DBusHashTable_1ga34bf277ee37f919bd00516b5ae4e12b5" compoundref="dbus-hash_8c" startline="613" endline="623">_dbus_hash_iter_get_value</references>
        <references refid="group__DBusHashTable_1ga1b0e6df8a8617ef0f8f25adfba3acc4c" compoundref="dbus-hash_8c" startline="517" endline="532">_dbus_hash_iter_init</references>
        <references refid="group__DBusHashTable_1ga723e61fcc91ca673e90ff872c07ea19c" compoundref="dbus-hash_8c" startline="543" endline="581">_dbus_hash_iter_next</references>
        <references refid="group__DBusHashTable_1ga0ef12d773a546f070cff91cbf1e8d16e" compoundref="dbus-hash_8c" startline="592" endline="605">_dbus_hash_iter_remove_entry</references>
        <references refid="group__DBusHashTable_1gad48297fc27442c19a7c4bd4d1ef9ef77" compoundref="dbus-hash_8c" startline="1397" endline="1400">_dbus_hash_table_get_n_entries</references>
        <references refid="group__DBusList_1ga1e26ce4fb4acb50593bd5ed2f4eeb3ae" compoundref="dbus-list_8c" startline="567" endline="570">_dbus_list_get_first_link</references>
        <references refid="group__DBusList_1gaede4ace46d5ee497d75074bfec4490a2" compoundref="dbus-list_8h" startline="90">_dbus_list_get_next_link</references>
        <references refid="group__DBusList_1ga40abea762d9cb44e5ec6b31b1769dc2e" compoundref="dbus-list_8c" startline="527" endline="532">_dbus_list_remove_link</references>
        <references refid="group__DBusPendingCallInternals_1ga6b10d157242e540fd18bd3db733dab5c" compoundref="dbus-pending-call_8c" startline="204" endline="218">_dbus_pending_call_complete</references>
        <references refid="group__DBusPendingCallInternals_1gaf5f3df36149bfe55d824eb08d00768fc" compoundref="dbus-pending-call_8c" startline="293" endline="298">_dbus_pending_call_get_reply_serial_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1gaa9acac047b61c9a0eaff1977151e9e08" compoundref="dbus-pending-call_8c" startline="279" endline="284">_dbus_pending_call_get_timeout_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1gaf1e630b966722af540502329ed028254" compoundref="dbus-pending-call_8c" startline="248" endline="253">_dbus_pending_call_is_timeout_added_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1ga1bc4de7652108d0629522a4e3adffcab" compoundref="dbus-pending-call_8c" startline="228" endline="239">_dbus_pending_call_queue_timeout_error_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1ga9d8987da3747604d370ffec2c5e1e10a" compoundref="dbus-pending-call_8c" startline="394" endline="403">_dbus_pending_call_ref_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1ga4b8cc560549160aecd924037a872009d" compoundref="dbus-pending-call_8c" startline="172" endline="194">_dbus_pending_call_set_reply_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1gafea13f8b9977d341e41201c407adea2a" compoundref="dbus-pending-call_8c" startline="263" endline="269">_dbus_pending_call_set_timeout_added_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1ga26f09beed0dd6323cca0452abf344567" compoundref="dbus-pending-call_8c" startline="457" endline="470">_dbus_pending_call_unref_and_unlock</references>
        <references refid="group__DBusSysdeps_1ga1153b4669819148af6b3f6f2b7c9183a" compoundref="dbus-sysdeps-unix_8c" startline="2870" endline="2888">_dbus_sleep_milliseconds</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="structDBusList_1a29ab457bcf9092252bb0c4282c727055" compoundref="dbus-list_8h" startline="38">DBusList::data</references>
        <references refid="group__DBusMessage_1ga94c43b2b237d842a6b91da6f94818d47" compoundref="dbus-message_8c" startline="1163" endline="1176">dbus_message_get_reply_serial</references>
        <references refid="group__DBusMessage_1ga17491f3b75b3203f6fc47dcc2e3b221b" compoundref="dbus-message_8c" startline="2656" endline="2753">dbus_message_iter_append_basic</references>
        <references refid="group__DBusMessage_1gaf733047c467ce21f4a53b65a388f1e9d" compoundref="dbus-message_8c" startline="2421" endline="2440">dbus_message_iter_init_append</references>
        <references refid="group__DBusMessage_1gab9e5bf8d87a95c5ca7026a791148ebd4" compoundref="dbus-message_8c" startline="1289" endline="1309">dbus_message_new</references>
        <references refid="group__DBusMessage_1ga892f9857707371c2a53cec6b54c843c7" compoundref="dbus-message_8c" startline="3371" endline="3384">dbus_message_set_error_name</references>
        <references refid="group__DBusMessage_1ga0e86aeb2dc6831ccc9a21fcbf8cc16f7" compoundref="dbus-message_8c" startline="2984" endline="2993">dbus_message_set_no_reply</references>
        <references refid="group__DBusMessage_1gaec08603ff3d49bbcded67d25188a23f1" compoundref="dbus-message_8c" startline="1143" endline="1154">dbus_message_set_reply_serial</references>
        <references refid="group__DBusProtocol_1ga2b9423d95066313d73eeea8eeaf86812" compoundref="dbus-protocol_8h" startline="238">DBUS_MESSAGE_TYPE_ERROR</references>
        <references refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" compoundref="dbus-message_8c" startline="1690" endline="1709">dbus_message_unref</references>
        <references refid="group__DBusPendingCall_1gadaba15a74ba4925cdef52d4791cd3147" compoundref="dbus-pending-call_8c" startline="597" endline="609">dbus_pending_call_unref</references>
        <references refid="group__DBusProtocol_1ga7eb77066dadf5415896b44c56d93acce" compoundref="dbus-protocol_8h" startline="102">DBUS_TYPE_STRING</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusConnection_1aacb3a29956aa7712db37916194fde869" compoundref="dbus-connection_8c" startline="268">DBusConnection::incoming_messages</references>
        <references refid="structDBusConnection_1a9bda45f2d5c9af5c187fc31d7c98b424" compoundref="dbus-connection_8c" startline="276">DBusConnection::n_incoming</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusConnection_1ad8fa077f91fe62d0c10862e2ff9e86ca" compoundref="dbus-connection_8c" startline="289">DBusConnection::pending_replies</references>
        <references refid="structDBusMessageFilter_1a2d2debd9a708cb7d4f8447c18f7458b9" compoundref="dbus-connection_8c" startline="230">DBusMessageFilter::refcount</references>
        <references refid="structDBusConnection_1a6fbf0227071fc20ffd5b0e79aef58e92" compoundref="dbus-connection_8c" startline="258">DBusConnection::refcount</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga8ab04586ec46c6c6fd633ae8419717f9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _dbus_memory_pause_based_on_timeout</definition>
        <argsstring>(int timeout_milliseconds)</argsstring>
        <name>_dbus_memory_pause_based_on_timeout</name>
        <param>
          <type>int</type>
          <declname>timeout_milliseconds</declname>
        </param>
        <briefdescription>
<para>When a function that blocks has been called with a timeout, and we run out of memory, the time to wait for memory is based on the timeout. </para>        </briefdescription>
        <detaileddescription>
<para>If the caller was willing to block a long time we wait a relatively long time for memory, if they were only willing to block briefly then we retry for memory at a rapid rate.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout_milliseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>the timeout requested for blocking </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="2173" column="1" bodyfile="dbus/dbus-connection.c" bodystart="2173" bodyend="2183"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga3a0f1530f6e0da5cf1f690324de94023" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
        <definition>static DBusMessage* generate_local_error_message</definition>
        <argsstring>(dbus_uint32_t serial, char *error_name, char *error_msg)</argsstring>
        <name>generate_local_error_message</name>
        <param>
          <type><ref refid="group__DBusTypes_1gaf513803b030613a669cc7ef199f90a8b" kindref="member">dbus_uint32_t</ref></type>
          <declname>serial</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>error_name</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>error_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="2186" column="1" bodyfile="dbus/dbus-connection.c" bodystart="2186" bodyend="2229"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga93c2fba8d3ad59f4d239f5e8a0d06d1f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
        <definition>static DBusMessage* check_for_reply_unlocked</definition>
        <argsstring>(DBusConnection *connection, dbus_uint32_t client_serial)</argsstring>
        <name>check_for_reply_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1gaf513803b030613a669cc7ef199f90a8b" kindref="member">dbus_uint32_t</ref></type>
          <declname>client_serial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="2262" column="1" bodyfile="dbus/dbus-connection.c" bodystart="2262" bodyend="2285"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga10fefadb2798c1408b4fb7806c93e466" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void connection_timeout_and_complete_all_pending_calls_unlocked</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>connection_timeout_and_complete_all_pending_calls_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="2288" column="1" bodyfile="dbus/dbus-connection.c" bodystart="2288" bodyend="2319"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga7ce8e7325dce58eeb45a5fc6fb533f38" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void complete_pending_call_and_unlock</definition>
        <argsstring>(DBusConnection *connection, DBusPendingCall *pending, DBusMessage *message)</argsstring>
        <name>complete_pending_call_and_unlock</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> *</type>
          <declname>pending</declname>
        </param>
        <param>
          <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="2322" column="1" bodyfile="dbus/dbus-connection.c" bodystart="2322" bodyend="2333"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1ga3dfc6e8ebd1d91154e2de2d6e2b63a03" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>static dbus_bool_t check_for_reply_and_update_dispatch_unlocked</definition>
        <argsstring>(DBusConnection *connection, DBusPendingCall *pending)</argsstring>
        <name>check_for_reply_and_update_dispatch_unlocked</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> *</type>
          <declname>pending</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="2336" column="1" bodyfile="dbus/dbus-connection.c" bodystart="2336" bodyend="2362"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gad5e725e66dc16a411544e25675fb9fba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_block_pending_call</definition>
        <argsstring>(DBusPendingCall *pending)</argsstring>
        <name>_dbus_connection_block_pending_call</name>
        <param>
          <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> *</type>
          <declname>pending</declname>
        </param>
        <briefdescription>
<para>Blocks until a pending call times out or gets a reply. </para>        </briefdescription>
        <detaileddescription>
<para>Does not re-enter the main loop or run filter/path-registered callbacks. The reply to the message will not be seen by filter callbacks.</para><para>Returns immediately if pending call already got a reply.</para><para><xrefsect id="todo_1_todo000008"><xreftitle>Todo</xreftitle><xrefdescription><para>could use performance improvements (it keeps scanning the whole message queue for example)</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pending</parametername>
</parameternamelist>
<parameterdescription>
<para>the pending call we block for a reply on </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="2379" column="1" bodyfile="dbus/dbus-connection.c" bodystart="2379" bodyend="2550"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusConnectionInternals_1ga283f0254537c4bf4453dbed6fad2e21e" compoundref="dbus-connection_8c" startline="1198" endline="1237">_dbus_connection_do_iteration_unlocked</references>
        <references refid="group__DBusSysdeps_1gab9951a7fd8c33188bf86314e7fd56300" compoundref="dbus-sysdeps-unix_8c" startline="2738" endline="2759">_dbus_get_monotonic_time</references>
        <references refid="group__DBusPendingCallInternals_1ga37bef4359b3c29629a57f5fe480690a1" compoundref="dbus-pending-call_8c" startline="480" endline="483">_dbus_pending_call_get_completed_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1ga68e5ff616e6a6563d83966c3d88b9b32" compoundref="dbus-pending-call_8c" startline="323" endline="329">_dbus_pending_call_get_connection_and_lock</references>
        <references refid="group__DBusPendingCallInternals_1gaf5f3df36149bfe55d824eb08d00768fc" compoundref="dbus-pending-call_8c" startline="293" endline="298">_dbus_pending_call_get_reply_serial_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1gaa9acac047b61c9a0eaff1977151e9e08" compoundref="dbus-pending-call_8c" startline="279" endline="284">_dbus_pending_call_get_timeout_unlocked</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2adf8e8a594ab338cb9cf7855b19e37e93" compoundref="dbus-connection_8h" startline="81">DBUS_DISPATCH_DATA_REMAINS</references>
        <references refid="group__DBusConnection_1ggabf250a32ff740b2a8c99136e0142d8d2a5af20a035f29cfa67fb8d69fb693b685" compoundref="dbus-connection_8h" startline="83">DBUS_DISPATCH_NEED_MEMORY</references>
        <references refid="group__DBusProtocol_1gaef6443e0bd8cdcc1606d985a775d07a7" compoundref="dbus-protocol_8h" startline="389">DBUS_ERROR_DISCONNECTED</references>
        <references refid="group__DBusPendingCall_1gacbf33ae8a1cc125628f9ea44d175c159" compoundref="dbus-pending-call_8c" startline="679" endline="690">dbus_pending_call_get_completed</references>
        <references refid="group__DBusPendingCall_1ga334f6c6621583e15fdaf1a3f93dd2221" compoundref="dbus-pending-call_8c" startline="577" endline="588">dbus_pending_call_ref</references>
        <references refid="group__DBusPendingCall_1gadaba15a74ba4925cdef52d4791cd3147" compoundref="dbus-pending-call_8c" startline="597" endline="609">dbus_pending_call_unref</references>
        <references refid="group__DBusTimeout_1ga67ba21b6189438875c6007ee79da5e37" compoundref="dbus-timeout_8c" startline="416" endline="419">dbus_timeout_get_interval</references>
        <references refid="structDBusConnection_1aa70afc41f6184604c027e7f71a314d7f" compoundref="dbus-connection_8c" startline="292">DBusConnection::disconnect_message_link</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusPendingCall_1ga67b99f749a7f477c7b5d70f2acee5452" compoundref="dbus-pending-call_8c" startline="737" endline="742">dbus_pending_call_block</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gac6dba97d98f486b87468ae8076349a66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int _dbus_connection_get_pending_fds_count</definition>
        <argsstring>(DBusConnection *connection)</argsstring>
        <name>_dbus_connection_get_pending_fds_count</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Return how many file descriptors are pending in the loader. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="2558" column="1" bodyfile="dbus/dbus-connection.c" bodystart="2558" bodyend="2561"/>
        <references refid="group__DBusTransport_1ga3545c064545957f73f583bf63d07c40c" compoundref="dbus-transport_8c" startline="1521" endline="1524">_dbus_transport_get_pending_fds_count</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusConnectionInternals_1gac84ff2ad1060326f8c1f94a171fefa98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_connection_set_pending_fds_function</definition>
        <argsstring>(DBusConnection *connection, DBusPendingFdsChangeFunction callback, void *data)</argsstring>
        <name>_dbus_connection_set_pending_fds_function</name>
        <param>
          <type><ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> *</type>
          <declname>connection</declname>
        </param>
        <param>
          <type>DBusPendingFdsChangeFunction</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Register a function to be called whenever the number of pending file descriptors in the loader change. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>the callback </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-connection.c" line="2571" column="1" bodyfile="dbus/dbus-connection.c" bodystart="2571" bodyend="2577"/>
        <references refid="group__DBusTransport_1gad6dccbcdc149e3305101db4b2ebae6d6" compoundref="dbus-transport_8c" startline="1534" endline="1540">_dbus_transport_set_pending_fds_function</references>
        <references refid="structDBusConnection_1a9855f1d7d5404770dd4aa09239c70b3b" compoundref="dbus-connection_8c" startline="280">DBusConnection::transport</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implementation details of <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref>. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
