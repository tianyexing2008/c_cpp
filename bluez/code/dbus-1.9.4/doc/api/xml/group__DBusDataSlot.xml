<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="group__DBusDataSlot" kind="group">
    <compoundname>DBusDataSlot</compoundname>
    <title>Data slots</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__DBusDataSlot_1ga49236838eb414100f691a22ad5210cb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_data_slot_allocator_init</definition>
        <argsstring>(DBusDataSlotAllocator *allocator, DBusGlobalLock lock)</argsstring>
        <name>_dbus_data_slot_allocator_init</name>
        <param>
          <type><ref refid="structDBusDataSlotAllocator" kindref="compound">DBusDataSlotAllocator</ref> *</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type>DBusGlobalLock</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
<para>Initializes a data slot allocator object, used to assign integer IDs for data slots. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>the allocator to initialize </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-dataslot.c" line="46" column="1" bodyfile="dbus/dbus-dataslot.c" bodystart="46" bodyend="55"/>
        <references refid="structDBusDataSlotAllocator_1a290fc1a48efc181da4e54dae572306b5" compoundref="dbus-dataslot_8h" startline="57">DBusDataSlotAllocator::allocated_slots</references>
        <references refid="structDBusDataSlotAllocator_1a5908a6f2e17e5feec5b77a2cfbc81dbd" compoundref="dbus-dataslot_8h" startline="60">DBusDataSlotAllocator::lock</references>
        <references refid="structDBusDataSlotAllocator_1a57702eaf2d6558cc15f12205aca90dda" compoundref="dbus-dataslot_8h" startline="58">DBusDataSlotAllocator::n_allocated_slots</references>
        <references refid="structDBusDataSlotAllocator_1ad68b0989a821eb266983052f8a402a4a" compoundref="dbus-dataslot_8h" startline="59">DBusDataSlotAllocator::n_used_slots</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusDataSlot_1gabc399733376c462c3010271a2d431e73" compoundref="dbus-dataslot_8c" startline="340" endline="347">_dbus_data_slot_list_free</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusDataSlot_1gaf61f2bd0148bace4f67a2d6d97b26ea9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_data_slot_allocator_alloc</definition>
        <argsstring>(DBusDataSlotAllocator *allocator, dbus_int32_t *slot_id_p)</argsstring>
        <name>_dbus_data_slot_allocator_alloc</name>
        <param>
          <type><ref refid="structDBusDataSlotAllocator" kindref="compound">DBusDataSlotAllocator</ref> *</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1gab18afa60e9b17b6e322735bda3d863d8" kindref="member">dbus_int32_t</ref> *</type>
          <declname>slot_id_p</declname>
        </param>
        <briefdescription>
<para>Allocates an integer ID to be used for storing data in a <ref refid="structDBusDataSlotList" kindref="compound">DBusDataSlotList</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>If the value at *slot_id_p is not -1, this function just increments the refcount for the existing slot ID. If the value is -1, a new slot ID is allocated and stored at *slot_id_p.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>the allocator </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slot_id_p</parametername>
</parameternamelist>
<parameterdescription>
<para>address to fill with the slot ID </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-dataslot.c" line="69" column="1" bodyfile="dbus/dbus-dataslot.c" bodystart="69" bodyend="140"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="structDBusDataSlotAllocator_1a290fc1a48efc181da4e54dae572306b5" compoundref="dbus-dataslot_8h" startline="57">DBusDataSlotAllocator::allocated_slots</references>
        <references refid="group__DBusMemory_1ga2d505f2960ccf343042d363170b27f9c" compoundref="dbus-memory_8c" startline="601" endline="692">dbus_realloc</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusDataSlotAllocator_1a5908a6f2e17e5feec5b77a2cfbc81dbd" compoundref="dbus-dataslot_8h" startline="60">DBusDataSlotAllocator::lock</references>
        <references refid="structDBusDataSlotAllocator_1a57702eaf2d6558cc15f12205aca90dda" compoundref="dbus-dataslot_8h" startline="58">DBusDataSlotAllocator::n_allocated_slots</references>
        <references refid="structDBusDataSlotAllocator_1ad68b0989a821eb266983052f8a402a4a" compoundref="dbus-dataslot_8h" startline="59">DBusDataSlotAllocator::n_used_slots</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusAllocatedSlot_1a554eaffc3334a90a86f618eaa713410c" compoundref="dbus-dataslot_8h" startline="49">DBusAllocatedSlot::refcount</references>
        <references refid="structDBusAllocatedSlot_1a849e5f8d951d159c45172ce825fb3a1e" compoundref="dbus-dataslot_8h" startline="48">DBusAllocatedSlot::slot_id</references>
        <referencedby refid="group__DBusDataSlot_1gabc399733376c462c3010271a2d431e73" compoundref="dbus-dataslot_8c" startline="340" endline="347">_dbus_data_slot_list_free</referencedby>
        <referencedby refid="group__DBusConnection_1ga728b15c71a492ad244e5a480f1156088" compoundref="dbus-connection_8c" startline="5920" endline="5924">dbus_connection_allocate_data_slot</referencedby>
        <referencedby refid="group__DBusMessage_1gafdde8db1152649d37c9f7e316ca59e56" compoundref="dbus-message_8c" startline="4560" endline="4564">dbus_message_allocate_data_slot</referencedby>
        <referencedby refid="group__DBusPendingCall_1ga95614dad0ada70e3a20d9878339e3109" compoundref="dbus-pending-call_8c" startline="759" endline="765">dbus_pending_call_allocate_data_slot</referencedby>
        <referencedby refid="group__DBusServer_1ga05d280cd92ea5bb0d49bbe5b1fb1d5c2" compoundref="dbus-server_8c" startline="1077" endline="1081">dbus_server_allocate_data_slot</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusDataSlot_1ga059c50a24cd9fc984e918e6159841633" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_data_slot_allocator_free</definition>
        <argsstring>(DBusDataSlotAllocator *allocator, dbus_int32_t *slot_id_p)</argsstring>
        <name>_dbus_data_slot_allocator_free</name>
        <param>
          <type><ref refid="structDBusDataSlotAllocator" kindref="compound">DBusDataSlotAllocator</ref> *</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1gab18afa60e9b17b6e322735bda3d863d8" kindref="member">dbus_int32_t</ref> *</type>
          <declname>slot_id_p</declname>
        </param>
        <briefdescription>
<para>Deallocates an ID previously allocated with <ref refid="group__DBusDataSlot_1gaf61f2bd0148bace4f67a2d6d97b26ea9" kindref="member">_dbus_data_slot_allocator_alloc()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Existing data stored on existing <ref refid="structDBusDataSlotList" kindref="compound">DBusDataSlotList</ref> objects with this ID will be freed when the data list is finalized, but may not be retrieved (and may only be replaced if someone else reallocates the slot). The slot value is reset to -1 if this is the last unref.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>the allocator </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slot_id_p</parametername>
</parameternamelist>
<parameterdescription>
<para>address where we store the slot </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-dataslot.c" line="154" column="1" bodyfile="dbus/dbus-dataslot.c" bodystart="154" bodyend="190"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusInternalsUtils_1ga0c4961ec784874f1b1f3aeccea8d3da1" compoundref="dbus-internals_8h" startline="145">_dbus_assert_not_reached</references>
        <references refid="structDBusDataSlotAllocator_1a290fc1a48efc181da4e54dae572306b5" compoundref="dbus-dataslot_8h" startline="57">DBusDataSlotAllocator::allocated_slots</references>
        <references refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" compoundref="dbus-memory_8c" startline="701" endline="740">dbus_free</references>
        <references refid="structDBusDataSlotAllocator_1a5908a6f2e17e5feec5b77a2cfbc81dbd" compoundref="dbus-dataslot_8h" startline="60">DBusDataSlotAllocator::lock</references>
        <references refid="structDBusDataSlotAllocator_1a57702eaf2d6558cc15f12205aca90dda" compoundref="dbus-dataslot_8h" startline="58">DBusDataSlotAllocator::n_allocated_slots</references>
        <references refid="structDBusDataSlotAllocator_1ad68b0989a821eb266983052f8a402a4a" compoundref="dbus-dataslot_8h" startline="59">DBusDataSlotAllocator::n_used_slots</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusAllocatedSlot_1a554eaffc3334a90a86f618eaa713410c" compoundref="dbus-dataslot_8h" startline="49">DBusAllocatedSlot::refcount</references>
        <references refid="structDBusAllocatedSlot_1a849e5f8d951d159c45172ce825fb3a1e" compoundref="dbus-dataslot_8h" startline="48">DBusAllocatedSlot::slot_id</references>
        <referencedby refid="group__DBusDataSlot_1gabc399733376c462c3010271a2d431e73" compoundref="dbus-dataslot_8c" startline="340" endline="347">_dbus_data_slot_list_free</referencedby>
        <referencedby refid="group__DBusConnection_1ga7dc8c73d8c3e733f5410d52be84239a0" compoundref="dbus-connection_8c" startline="5938" endline="5943">dbus_connection_free_data_slot</referencedby>
        <referencedby refid="group__DBusMessage_1ga23227ce2bd5c52d05581d3fe1232ae66" compoundref="dbus-message_8c" startline="4578" endline="4583">dbus_message_free_data_slot</referencedby>
        <referencedby refid="group__DBusPendingCall_1ga1eb6f342bba71b01266629f80be84617" compoundref="dbus-pending-call_8c" startline="779" endline="785">dbus_pending_call_free_data_slot</referencedby>
        <referencedby refid="group__DBusServer_1gac6ebc6105e32ab38ef0ac60dec6d5bc8" compoundref="dbus-server_8c" startline="1095" endline="1100">dbus_server_free_data_slot</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusDataSlot_1ga6de49b3a1210202215d40a5a19806992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_data_slot_list_init</definition>
        <argsstring>(DBusDataSlotList *list)</argsstring>
        <name>_dbus_data_slot_list_init</name>
        <param>
          <type><ref refid="structDBusDataSlotList" kindref="compound">DBusDataSlotList</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Initializes a slot list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list to initialize. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-dataslot.c" line="197" column="1" bodyfile="dbus/dbus-dataslot.c" bodystart="197" bodyend="201"/>
        <references refid="structDBusDataSlotList_1a2d6cb7670a940bc886c99cb892b44502" compoundref="dbus-dataslot_8h" startline="72">DBusDataSlotList::n_slots</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusDataSlotList_1a4dd0fc6cc10b9c48dd53f34335abd08e" compoundref="dbus-dataslot_8h" startline="71">DBusDataSlotList::slots</references>
        <referencedby refid="group__DBusConnectionInternals_1ga2cdffe9215251b69cb39ff36b9f50e6c" compoundref="dbus-connection_8c" startline="1249" endline="1409">_dbus_connection_new_for_transport</referencedby>
        <referencedby refid="group__DBusDataSlot_1gabc399733376c462c3010271a2d431e73" compoundref="dbus-dataslot_8c" startline="340" endline="347">_dbus_data_slot_list_free</referencedby>
        <referencedby refid="group__DBusPendingCallInternals_1ga3f2300d7a768783bc2fae0991bcc55df" compoundref="dbus-pending-call_8c" startline="109" endline="161">_dbus_pending_call_new_unlocked</referencedby>
        <referencedby refid="group__DBusServerInternals_1gaacfb3d29553f205b362c850cfda02fd9" compoundref="dbus-server_8c" startline="111" endline="184">_dbus_server_init_base</referencedby>
        <referencedby refid="group__DBusMessage_1ga94c43b2b237d842a6b91da6f94818d47" compoundref="dbus-message_8c" startline="1163" endline="1176">dbus_message_get_reply_serial</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusDataSlot_1gad2952f9f686d96e7114fc49ab7452e1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_data_slot_list_set</definition>
        <argsstring>(DBusDataSlotAllocator *allocator, DBusDataSlotList *list, int slot, void *data, DBusFreeFunction free_data_func, DBusFreeFunction *old_free_func, void **old_data)</argsstring>
        <name>_dbus_data_slot_list_set</name>
        <param>
          <type><ref refid="structDBusDataSlotAllocator" kindref="compound">DBusDataSlotAllocator</ref> *</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type><ref refid="structDBusDataSlotList" kindref="compound">DBusDataSlotList</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>slot</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref></type>
          <declname>free_data_func</declname>
        </param>
        <param>
          <type><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref> *</type>
          <declname>old_free_func</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>old_data</declname>
        </param>
        <briefdescription>
<para>Stores a pointer in the data slot list, along with an optional function to be used for freeing the data when the data is set again, or when the slot list is finalized. </para>        </briefdescription>
        <detaileddescription>
<para>The slot number must have been allocated with <ref refid="group__DBusDataSlot_1gaf61f2bd0148bace4f67a2d6d97b26ea9" kindref="member">_dbus_data_slot_allocator_alloc()</ref> for the same allocator passed in here. The same allocator has to be used with the slot list every time.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>the allocator to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the data slot list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slot</parametername>
</parameternamelist>
<parameterdescription>
<para>the slot number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to store </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_data_func</parametername>
</parameternamelist>
<parameterdescription>
<para>finalizer function for the data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>old_free_func</parametername>
</parameternamelist>
<parameterdescription>
<para>free function for any previously-existing data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>old_data</parametername>
</parameternamelist>
<parameterdescription>
<para>previously-existing data, should be freed with old_free_func </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if there was enough memory to store the data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-dataslot.c" line="221" column="1" bodyfile="dbus/dbus-dataslot.c" bodystart="221" bodyend="273"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusInternalsUtils_1ga0c4961ec784874f1b1f3aeccea8d3da1" compoundref="dbus-internals_8h" startline="145">_dbus_assert_not_reached</references>
        <references refid="structDBusDataSlotAllocator_1a290fc1a48efc181da4e54dae572306b5" compoundref="dbus-dataslot_8h" startline="57">DBusDataSlotAllocator::allocated_slots</references>
        <references refid="structDBusDataSlot_1a883c8c8946f13b6f5f3cf99f230159fd" compoundref="dbus-dataslot_8h" startline="38">data</references>
        <references refid="group__DBusMemory_1ga2d505f2960ccf343042d363170b27f9c" compoundref="dbus-memory_8c" startline="601" endline="692">dbus_realloc</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusDataSlot_1ab899f58869942556fb1b381ca3f3e2b2" compoundref="dbus-dataslot_8h" startline="39">free_data_func</references>
        <references refid="structDBusDataSlotAllocator_1a5908a6f2e17e5feec5b77a2cfbc81dbd" compoundref="dbus-dataslot_8h" startline="60">DBusDataSlotAllocator::lock</references>
        <references refid="structDBusDataSlotList_1a2d6cb7670a940bc886c99cb892b44502" compoundref="dbus-dataslot_8h" startline="72">DBusDataSlotList::n_slots</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusAllocatedSlot_1a849e5f8d951d159c45172ce825fb3a1e" compoundref="dbus-dataslot_8h" startline="48">DBusAllocatedSlot::slot_id</references>
        <references refid="structDBusDataSlotList_1a4dd0fc6cc10b9c48dd53f34335abd08e" compoundref="dbus-dataslot_8h" startline="71">DBusDataSlotList::slots</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusDataSlot_1gabc399733376c462c3010271a2d431e73" compoundref="dbus-dataslot_8c" startline="340" endline="347">_dbus_data_slot_list_free</referencedby>
        <referencedby refid="group__DBusPendingCallInternals_1ga7d4196ca35b8df842c05a02dbb71c269" compoundref="dbus-pending-call_8c" startline="502" endline="528">_dbus_pending_call_set_data_unlocked</referencedby>
        <referencedby refid="group__DBusConnection_1ga845b4942399f43dd4ac644de7cb9e3ff" compoundref="dbus-connection_8c" startline="5968" endline="5997">dbus_connection_set_data</referencedby>
        <referencedby refid="group__DBusMessage_1ga29331c4e9c2d53cbe60382056f6495a1" compoundref="dbus-message_8c" startline="4599" endline="4624">dbus_message_set_data</referencedby>
        <referencedby refid="group__DBusServer_1gab9ecb216dc9c40b0c7d370673fb9b269" compoundref="dbus-server_8c" startline="1116" endline="1145">dbus_server_set_data</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusDataSlot_1ga43f741229f0c38788442601e2750ec66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* _dbus_data_slot_list_get</definition>
        <argsstring>(DBusDataSlotAllocator *allocator, DBusDataSlotList *list, int slot)</argsstring>
        <name>_dbus_data_slot_list_get</name>
        <param>
          <type><ref refid="structDBusDataSlotAllocator" kindref="compound">DBusDataSlotAllocator</ref> *</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type><ref refid="structDBusDataSlotList" kindref="compound">DBusDataSlotList</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>slot</declname>
        </param>
        <briefdescription>
<para>Retrieves data previously set with _dbus_data_slot_list_set_data(). </para>        </briefdescription>
        <detaileddescription>
<para>The slot must still be allocated (must not have been freed).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>the allocator slot was allocated from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the data slot list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slot</parametername>
</parameternamelist>
<parameterdescription>
<para>the slot to get data from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the data, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if not found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-dataslot.c" line="285" column="1" bodyfile="dbus/dbus-dataslot.c" bodystart="285" bodyend="308"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusInternalsUtils_1ga0c4961ec784874f1b1f3aeccea8d3da1" compoundref="dbus-internals_8h" startline="145">_dbus_assert_not_reached</references>
        <references refid="structDBusDataSlotAllocator_1a290fc1a48efc181da4e54dae572306b5" compoundref="dbus-dataslot_8h" startline="57">DBusDataSlotAllocator::allocated_slots</references>
        <references refid="structDBusDataSlot_1a883c8c8946f13b6f5f3cf99f230159fd" compoundref="dbus-dataslot_8h" startline="38">data</references>
        <references refid="structDBusDataSlotAllocator_1a5908a6f2e17e5feec5b77a2cfbc81dbd" compoundref="dbus-dataslot_8h" startline="60">DBusDataSlotAllocator::lock</references>
        <references refid="structDBusDataSlotList_1a2d6cb7670a940bc886c99cb892b44502" compoundref="dbus-dataslot_8h" startline="72">DBusDataSlotList::n_slots</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusAllocatedSlot_1a849e5f8d951d159c45172ce825fb3a1e" compoundref="dbus-dataslot_8h" startline="48">DBusAllocatedSlot::slot_id</references>
        <references refid="structDBusDataSlotList_1a4dd0fc6cc10b9c48dd53f34335abd08e" compoundref="dbus-dataslot_8h" startline="71">DBusDataSlotList::slots</references>
        <referencedby refid="group__DBusDataSlot_1gabc399733376c462c3010271a2d431e73" compoundref="dbus-dataslot_8c" startline="340" endline="347">_dbus_data_slot_list_free</referencedby>
        <referencedby refid="group__DBusConnection_1ga433fae9844a66d9d078d238e6c723b95" compoundref="dbus-connection_8c" startline="6017" endline="6034">dbus_connection_get_data</referencedby>
        <referencedby refid="group__DBusMessage_1gabbde522fe2321618ee39df1a028a2ec6" compoundref="dbus-message_8c" startline="4635" endline="4647">dbus_message_get_data</referencedby>
        <referencedby refid="group__DBusPendingCall_1ga5749f73b7ec7a8fe4f2e6a839e292806" compoundref="dbus-pending-call_8c" startline="827" endline="841">dbus_pending_call_get_data</referencedby>
        <referencedby refid="group__DBusServer_1gac2bfa9f2e06c4347fefe537b233660d3" compoundref="dbus-server_8c" startline="1156" endline="1172">dbus_server_get_data</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusDataSlot_1ga3c96d2ca263ba397b4da2956a49ae282" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_data_slot_list_clear</definition>
        <argsstring>(DBusDataSlotList *list)</argsstring>
        <name>_dbus_data_slot_list_clear</name>
        <param>
          <type><ref refid="structDBusDataSlotList" kindref="compound">DBusDataSlotList</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Frees all data slots contained in the list, calling application-provided free functions if they exist. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list to clear </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-dataslot.c" line="317" column="1" bodyfile="dbus/dbus-dataslot.c" bodystart="317" bodyend="330"/>
        <references refid="structDBusDataSlot_1a883c8c8946f13b6f5f3cf99f230159fd" compoundref="dbus-dataslot_8h" startline="38">data</references>
        <references refid="structDBusDataSlot_1ab899f58869942556fb1b381ca3f3e2b2" compoundref="dbus-dataslot_8h" startline="39">free_data_func</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusDataSlotList_1a4dd0fc6cc10b9c48dd53f34335abd08e" compoundref="dbus-dataslot_8h" startline="71">DBusDataSlotList::slots</references>
        <referencedby refid="group__DBusDataSlot_1gabc399733376c462c3010271a2d431e73" compoundref="dbus-dataslot_8c" startline="340" endline="347">_dbus_data_slot_list_free</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusDataSlot_1gabc399733376c462c3010271a2d431e73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_data_slot_list_free</definition>
        <argsstring>(DBusDataSlotList *list)</argsstring>
        <name>_dbus_data_slot_list_free</name>
        <param>
          <type><ref refid="structDBusDataSlotList" kindref="compound">DBusDataSlotList</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Frees the data slot list and all data slots contained in it, calling application-provided free functions if they exist. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>the list to free </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-dataslot.c" line="340" column="1" bodyfile="dbus/dbus-dataslot.c" bodystart="340" bodyend="347"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusInternalsUtils_1ga0c4961ec784874f1b1f3aeccea8d3da1" compoundref="dbus-internals_8h" startline="145">_dbus_assert_not_reached</references>
        <references refid="group__DBusDataSlot_1gaf61f2bd0148bace4f67a2d6d97b26ea9" compoundref="dbus-dataslot_8c" startline="69" endline="140">_dbus_data_slot_allocator_alloc</references>
        <references refid="group__DBusDataSlot_1ga059c50a24cd9fc984e918e6159841633" compoundref="dbus-dataslot_8c" startline="154" endline="190">_dbus_data_slot_allocator_free</references>
        <references refid="group__DBusDataSlot_1ga49236838eb414100f691a22ad5210cb5" compoundref="dbus-dataslot_8c" startline="46" endline="55">_dbus_data_slot_allocator_init</references>
        <references refid="group__DBusDataSlot_1ga3c96d2ca263ba397b4da2956a49ae282" compoundref="dbus-dataslot_8c" startline="317" endline="330">_dbus_data_slot_list_clear</references>
        <references refid="group__DBusDataSlot_1gabc399733376c462c3010271a2d431e73" compoundref="dbus-dataslot_8c" startline="340" endline="347">_dbus_data_slot_list_free</references>
        <references refid="group__DBusDataSlot_1ga43f741229f0c38788442601e2750ec66" compoundref="dbus-dataslot_8c" startline="285" endline="308">_dbus_data_slot_list_get</references>
        <references refid="group__DBusDataSlot_1ga6de49b3a1210202215d40a5a19806992" compoundref="dbus-dataslot_8c" startline="197" endline="201">_dbus_data_slot_list_init</references>
        <references refid="group__DBusDataSlot_1gad2952f9f686d96e7114fc49ab7452e1a" compoundref="dbus-dataslot_8c" startline="221" endline="273">_dbus_data_slot_list_set</references>
        <references refid="group__DBusInternalsUtils_1ga05e902d8504a8a0e0b183fd2e20e329f" compoundref="dbus-internals_8h" startline="177">_DBUS_INT_TO_POINTER</references>
        <references refid="group__DBusInternalsUtils_1gabbd3526a2ecd65da80b9f74ac286273d" compoundref="dbus-internals_8h" startline="176">_DBUS_POINTER_TO_INT</references>
        <references refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" compoundref="dbus-memory_8c" startline="701" endline="740">dbus_free</references>
        <references refid="structDBusDataSlotList_1a2d6cb7670a940bc886c99cb892b44502" compoundref="dbus-dataslot_8h" startline="72">DBusDataSlotList::n_slots</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusDataSlotList_1a4dd0fc6cc10b9c48dd53f34335abd08e" compoundref="dbus-dataslot_8h" startline="71">DBusDataSlotList::slots</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusDataSlot_1gabc399733376c462c3010271a2d431e73" compoundref="dbus-dataslot_8c" startline="340" endline="347">_dbus_data_slot_list_free</referencedby>
        <referencedby refid="group__DBusPendingCallInternals_1ga9d8987da3747604d370ffec2c5e1e10a" compoundref="dbus-pending-call_8c" startline="394" endline="403">_dbus_pending_call_ref_unlocked</referencedby>
        <referencedby refid="group__DBusServerInternals_1ga93b5bca90e69122d5acbbeef2b4ca03e" compoundref="dbus-server_8c" startline="193" endline="218">_dbus_server_finalize_base</referencedby>
        <referencedby refid="group__DBusConnection_1gae34751e15f114217e5ad10c663e2ef2e" compoundref="dbus-connection_8c" startline="2681" endline="2692">dbus_connection_ref</referencedby>
        <referencedby refid="group__DBusMessage_1ga94c43b2b237d842a6b91da6f94818d47" compoundref="dbus-message_8c" startline="1163" endline="1176">dbus_message_get_reply_serial</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Storing data by ID. </para>    </briefdescription>
    <detaileddescription>
<para>Types and functions related to storing data by an allocated ID. This is used for <ref refid="group__DBusConnection_1ga845b4942399f43dd4ac644de7cb9e3ff" kindref="member">dbus_connection_set_data()</ref>, <ref refid="group__DBusServer_1gab9ecb216dc9c40b0c7d370673fb9b269" kindref="member">dbus_server_set_data()</ref>, etc. </para>    </detaileddescription>
  </compounddef>
</doxygen>
