<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="group__DBusThreads" kind="group">
    <compoundname>DBusThreads</compoundname>
    <title>Thread functions</title>
    <innerclass refid="structDBusThreadFunctions" prot="public">DBusThreadFunctions</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__DBusThreads_1gaf6212cb5e78b84cf5c6c6cb6e2b5aabe" prot="public" static="no">
        <name>DBusThreadFunctionsMask</name>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabeaa9c17d57ad09b9c4887e778a8d6da52a" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_MUTEX_NEW_MASK</name>
          <initializer>= 1 &lt;&lt; 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabeaee23dd95abbfc3af422434aa2c589d52" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_MUTEX_FREE_MASK</name>
          <initializer>= 1 &lt;&lt; 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabea17d0e235221f59a1670e4eb51cbede68" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_MUTEX_LOCK_MASK</name>
          <initializer>= 1 &lt;&lt; 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabea6365399a1289a0d377e1b3dabd33c20e" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_MUTEX_UNLOCK_MASK</name>
          <initializer>= 1 &lt;&lt; 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabea82590541c1771f21c817a0e7ba471704" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_CONDVAR_NEW_MASK</name>
          <initializer>= 1 &lt;&lt; 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabea3fc7bbf2846e4e5888f7f98c50065c12" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_CONDVAR_FREE_MASK</name>
          <initializer>= 1 &lt;&lt; 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabea2a6f7308b45fa5c8a39f3ff49b17eceb" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_CONDVAR_WAIT_MASK</name>
          <initializer>= 1 &lt;&lt; 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabeaf194eabe54860cdbd29f8eb5b9b3fca9" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_CONDVAR_WAIT_TIMEOUT_MASK</name>
          <initializer>= 1 &lt;&lt; 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabeaba0f4e0fc98da2abd45dc4a2114c138b" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_CONDVAR_WAKE_ONE_MASK</name>
          <initializer>= 1 &lt;&lt; 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabea32c2dffcc23715f0aa3cca4e82d64372" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_CONDVAR_WAKE_ALL_MASK</name>
          <initializer>= 1 &lt;&lt; 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabea962c080c48805d9dbfba11366c648acf" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_RECURSIVE_MUTEX_NEW_MASK</name>
          <initializer>= 1 &lt;&lt; 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabea5030e2b3ea98aee2924d5d0e58a53b40" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_RECURSIVE_MUTEX_FREE_MASK</name>
          <initializer>= 1 &lt;&lt; 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabea27fb7e6444c2beac2e7c404ed90412d4" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_RECURSIVE_MUTEX_LOCK_MASK</name>
          <initializer>= 1 &lt;&lt; 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabeae56d2ad3bd4b5a19a284b95bb002abb5" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_RECURSIVE_MUTEX_UNLOCK_MASK</name>
          <initializer>= 1 &lt;&lt; 13</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusThreads_1ggaf6212cb5e78b84cf5c6c6cb6e2b5aabea73e66eaf263d35a752416628eac9d817" prot="public">
          <name>DBUS_THREAD_FUNCTIONS_ALL_MASK</name>
          <initializer>= (1 &lt;&lt; 14) - 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Flags indicating which functions are present in <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Used to allow the library to detect older callers of <ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member">dbus_threads_init()</ref> if new possible functions are added to <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-threads.h" line="122" column="1" bodyfile="dbus/dbus-threads.h" bodystart="121" bodyend="138"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" prot="public" static="no">
        <type>struct <ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member">DBusMutex</ref></type>
        <definition>typedef struct DBusMutex DBusMutex</definition>
        <argsstring></argsstring>
        <name>DBusMutex</name>
        <briefdescription>
<para>An opaque mutex type provided by the <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref> implementation installed by <ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member">dbus_threads_init()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-threads.h" line="438" column="1" bodyfile="dbus/dbus-threads.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1gaa14cd16a336a85b5edbca3c237c3829e" prot="public" static="no">
        <type>struct <ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref></type>
        <definition>typedef struct DBusCondVar DBusCondVar</definition>
        <argsstring></argsstring>
        <name>DBusCondVar</name>
        <briefdescription>
<para>An opaque condition variable type provided by the <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref> implementation installed by <ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member">dbus_threads_init()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-threads.h" line="438" column="1" bodyfile="dbus/dbus-threads.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1ga3c071d0586484f396f78ecb630313b53" prot="public" static="no">
        <type><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member">DBusMutex</ref> *(*</type>
        <definition>typedef DBusMutex*(*  DBusMutexNewFunction) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>DBusMutexNewFunction</name>
        <briefdescription>
<para>Deprecated, provide DBusRecursiveMutexNewFunction instead. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-threads.h" line="46" column="1" bodyfile="dbus/dbus-threads.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1ga4edab3877bfc933141cb5ff88312c275" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusMutexFreeFunction) (DBusMutex *mutex)</definition>
        <argsstring>)(DBusMutex *mutex)</argsstring>
        <name>DBusMutexFreeFunction</name>
        <briefdescription>
<para>Deprecated, provide DBusRecursiveMutexFreeFunction instead. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-threads.h" line="48" column="1" bodyfile="dbus/dbus-threads.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1gab384a02862524eedfe95b9690753c687" prot="public" static="no">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref>(*</type>
        <definition>typedef dbus_bool_t(*  DBusMutexLockFunction) (DBusMutex *mutex)</definition>
        <argsstring>)(DBusMutex *mutex)</argsstring>
        <name>DBusMutexLockFunction</name>
        <briefdescription>
<para>Deprecated, provide DBusRecursiveMutexLockFunction instead. </para>        </briefdescription>
        <detaileddescription>
<para>Return value is lock success, but gets ignored in practice. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-threads.h" line="50" column="1" bodyfile="dbus/dbus-threads.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1gacf3c3edd338ed40c45a86f5730fd469a" prot="public" static="no">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref>(*</type>
        <definition>typedef dbus_bool_t(*  DBusMutexUnlockFunction) (DBusMutex *mutex)</definition>
        <argsstring>)(DBusMutex *mutex)</argsstring>
        <name>DBusMutexUnlockFunction</name>
        <briefdescription>
<para>Deprecated, provide DBusRecursiveMutexUnlockFunction instead. </para>        </briefdescription>
        <detaileddescription>
<para>Return value is unlock success, but gets ignored in practice. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-threads.h" line="52" column="1" bodyfile="dbus/dbus-threads.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1ga851e79e67071b88a86566ff28fdd5ce1" prot="public" static="no">
        <type><ref refid="group__DBusThreads_1ga4eb021cd6cd0830423eac2738e0ddc40" kindref="member">DBusMutex</ref> *(*</type>
        <definition>typedef DBusMutex*(*  DBusRecursiveMutexNewFunction) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>DBusRecursiveMutexNewFunction</name>
        <briefdescription>
<para>Creates a new recursively-lockable mutex, or returns <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if not enough memory. </para>        </briefdescription>
        <detaileddescription>
<para>Can only fail due to lack of memory. Found in <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref>. Do not just use PTHREAD_MUTEX_RECURSIVE for this, because it does not save/restore the recursion count when waiting on a condition. libdbus requires the Java-style behavior where the mutex is fully unlocked to wait on a condition. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-threads.h" line="61" column="1" bodyfile="dbus/dbus-threads.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1ga59b68fd20afc8ae683f7952ddca3cf6c" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusRecursiveMutexFreeFunction) (DBusMutex *mutex)</definition>
        <argsstring>)(DBusMutex *mutex)</argsstring>
        <name>DBusRecursiveMutexFreeFunction</name>
        <briefdescription>
<para>Frees a recursively-lockable mutex. </para>        </briefdescription>
        <detaileddescription>
<para>Found in <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-threads.h" line="64" column="1" bodyfile="dbus/dbus-threads.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1gac97c53c87b0f30fd5346c8d3e1543a08" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusRecursiveMutexLockFunction) (DBusMutex *mutex)</definition>
        <argsstring>)(DBusMutex *mutex)</argsstring>
        <name>DBusRecursiveMutexLockFunction</name>
        <briefdescription>
<para>Locks a recursively-lockable mutex. </para>        </briefdescription>
        <detaileddescription>
<para>Found in <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref>. Can only fail due to lack of memory. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-threads.h" line="68" column="1" bodyfile="dbus/dbus-threads.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1gadcae985ee1375a12fedc767e90bac3b8" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusRecursiveMutexUnlockFunction) (DBusMutex *mutex)</definition>
        <argsstring>)(DBusMutex *mutex)</argsstring>
        <name>DBusRecursiveMutexUnlockFunction</name>
        <briefdescription>
<para>Unlocks a recursively-lockable mutex. </para>        </briefdescription>
        <detaileddescription>
<para>Found in <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref>. Can only fail due to lack of memory. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-threads.h" line="72" column="1" bodyfile="dbus/dbus-threads.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1gab5a353de40fac6f391d182955874368b" prot="public" static="no">
        <type><ref refid="structDBusCondVar" kindref="compound">DBusCondVar</ref> *(*</type>
        <definition>typedef DBusCondVar*(*  DBusCondVarNewFunction) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>DBusCondVarNewFunction</name>
        <briefdescription>
<para>Creates a new condition variable. </para>        </briefdescription>
        <detaileddescription>
<para>Found in <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref>. Can only fail (returning <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>) due to lack of memory. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-threads.h" line="77" column="1" bodyfile="dbus/dbus-threads.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1gae459df8accd530029cdf53e2006c46d0" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusCondVarFreeFunction) (DBusCondVar *cond)</definition>
        <argsstring>)(DBusCondVar *cond)</argsstring>
        <name>DBusCondVarFreeFunction</name>
        <briefdescription>
<para>Frees a condition variable. </para>        </briefdescription>
        <detaileddescription>
<para>Found in <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-threads.h" line="80" column="1" bodyfile="dbus/dbus-threads.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1gad8b35a0b02463d0756dddb8b28b52d66" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusCondVarWaitFunction) (DBusCondVar *cond, DBusMutex *mutex)</definition>
        <argsstring>)(DBusCondVar *cond, DBusMutex *mutex)</argsstring>
        <name>DBusCondVarWaitFunction</name>
        <briefdescription>
<para>Waits on a condition variable. </para>        </briefdescription>
        <detaileddescription>
<para>Found in <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref>. Must work with either a recursive or nonrecursive mutex, whichever the thread implementation provides. Note that PTHREAD_MUTEX_RECURSIVE does not work with condition variables (does not save/restore the recursion count) so don&apos;t try using simply pthread_cond_wait() and a PTHREAD_MUTEX_RECURSIVE to implement this, it won&apos;t work right.</para><para>Has no error conditions. Must succeed if it returns. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-threads.h" line="92" column="1" bodyfile="dbus/dbus-threads.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1ga629b7534f21496149281235889de222e" prot="public" static="no">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref>(*</type>
        <definition>typedef dbus_bool_t(*  DBusCondVarWaitTimeoutFunction) (DBusCondVar *cond, DBusMutex *mutex, int timeout_milliseconds)</definition>
        <argsstring>)(DBusCondVar *cond, DBusMutex *mutex, int timeout_milliseconds)</argsstring>
        <name>DBusCondVarWaitTimeoutFunction</name>
        <briefdescription>
<para>Waits on a condition variable with a timeout. </para>        </briefdescription>
        <detaileddescription>
<para>Found in <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref>. Returns <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the wait did not time out, and <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if it did.</para><para>Has no error conditions. Must succeed if it returns. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-threads.h" line="101" column="1" bodyfile="dbus/dbus-threads.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1gac333e947171df6d99d59cd0c847e6df6" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusCondVarWakeOneFunction) (DBusCondVar *cond)</definition>
        <argsstring>)(DBusCondVar *cond)</argsstring>
        <name>DBusCondVarWakeOneFunction</name>
        <briefdescription>
<para>Wakes one waiting thread on a condition variable. </para>        </briefdescription>
        <detaileddescription>
<para>Found in <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref>.</para><para>Has no error conditions. Must succeed if it returns. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-threads.h" line="108" column="1" bodyfile="dbus/dbus-threads.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusThreads_1gad721dc686fd09d65dd932b7a35b079ac" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusCondVarWakeAllFunction) (DBusCondVar *cond)</definition>
        <argsstring>)(DBusCondVar *cond)</argsstring>
        <name>DBusCondVarWakeAllFunction</name>
        <briefdescription>
<para>Wakes all waiting threads on a condition variable. </para>        </briefdescription>
        <detaileddescription>
<para>Found in <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref>.</para><para>Has no error conditions. Must succeed if it returns. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-threads.h" line="114" column="1" bodyfile="dbus/dbus-threads.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_threads_init</definition>
        <argsstring>(const DBusThreadFunctions *functions)</argsstring>
        <name>dbus_threads_init</name>
        <param>
          <type>const <ref refid="structDBusThreadFunctions" kindref="compound">DBusThreadFunctions</ref> *</type>
          <declname>functions</declname>
        </param>
        <briefdescription>
<para>Initializes threads, like <ref refid="group__DBusThreads_1ga33b6cf3b8f1e41bad5508f84758818a7" kindref="member">dbus_threads_init_default()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>This version previously allowed user-specified threading primitives, but since D-Bus 1.6 it ignores them and behaves exactly like <ref refid="group__DBusThreads_1ga33b6cf3b8f1e41bad5508f84758818a7" kindref="member">dbus_threads_init_default()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>functions</parametername>
</parameternamelist>
<parameterdescription>
<para>ignored, formerly functions for using threads </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success, <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if no memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-threads.c" line="391" column="1" bodyfile="dbus/dbus-threads.c" bodystart="391" bodyend="412"/>
        <references refid="group__DBusMemoryInternals_1ga7c224d82013e2bdc181c1d85dcb6f295" compoundref="dbus-memory_8c" startline="781">_dbus_current_generation</references>
        <references refid="group__DBusSysdeps_1gae7be34dbffb6458578e86c59a26d4fad" compoundref="dbus-sysdeps-pthread_8c" startline="278" endline="288">_dbus_threads_init_platform_specific</references>
        <references refid="group__DBusSysdeps_1ga65d32daf6d876dd39b7410f3fa35b591" compoundref="dbus-sysdeps-pthread_8c" startline="293" endline="296">_dbus_threads_lock_platform_specific</references>
        <references refid="group__DBusSysdeps_1ga99c22b80d17ef18fa0a11f3a2a415403" compoundref="dbus-sysdeps-pthread_8c" startline="299" endline="302">_dbus_threads_unlock_platform_specific</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusThreads_1ga33b6cf3b8f1e41bad5508f84758818a7" compoundref="dbus-threads_8c" startline="438" endline="441">dbus_threads_init_default</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusThreads_1ga33b6cf3b8f1e41bad5508f84758818a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_threads_init_default</definition>
        <argsstring>(void)</argsstring>
        <name>dbus_threads_init_default</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initializes threads. </para>        </briefdescription>
        <detaileddescription>
<para>If this function is not called, the D-Bus library will not lock any data structures. If it is called, D-Bus will do locking, at some cost in efficiency.</para><para>Since D-Bus 1.7 it is safe to call this function from any thread, any number of times (but it must be called before any other libdbus API is used).</para><para>In D-Bus 1.6 or older, this function must be called in the main thread before any other thread starts. As a result, it is not sufficient to call this function in a library or plugin, unless the library or plugin imposes a similar requirement on its callers.</para><para><ref refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" kindref="member">dbus_shutdown()</ref> reverses the effects of this function when it resets all global state in libdbus.</para><para><simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success, <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if not enough memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-threads.c" line="438" column="1" bodyfile="dbus/dbus-threads.c" bodystart="438" bodyend="441"/>
        <references refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" compoundref="dbus-threads_8c" startline="391" endline="412">dbus_threads_init</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusThreadsInternals_1ga89495162caac2ace36c6b9c2031bc962" compoundref="dbus-threads_8c" startline="77" endline="88">_dbus_cmutex_new_at_location</referencedby>
        <referencedby refid="group__DBusThreadsInternals_1ga454b138bcbd419d38b3da6b707e46998" compoundref="dbus-threads_8c" startline="181" endline="187">_dbus_condvar_new</referencedby>
        <referencedby refid="group__DBusThreadsInternals_1ga8af2fd84773022e7e7ce1f21f0126203" compoundref="dbus-threads_8c" startline="278" endline="284">_dbus_condvar_wake_one</referencedby>
        <referencedby refid="group__DBusThreadsInternals_1ga191deedb97c76fae82bdbc8e1559a849" compoundref="dbus-threads_8c" startline="53" endline="64">_dbus_rmutex_new_at_location</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" kindref="member">dbus_threads_init()</ref> and <ref refid="group__DBusThreads_1ga33b6cf3b8f1e41bad5508f84758818a7" kindref="member">dbus_threads_init_default()</ref> </para>    </briefdescription>
    <detaileddescription>
<para>Functions and macros related to threads and thread locks.</para><para>If threads are initialized, the D-Bus library has locks on all global data structures. In addition, each <ref refid="structDBusConnection" kindref="compound">DBusConnection</ref> has a lock, so only one thread at a time can touch the connection. (See <ref refid="group__DBusConnection" kindref="compound">DBusConnection</ref> for more on connection locking.)</para><para>Most other objects, however, do not have locks - they can only be used from a single thread at a time, unless you lock them yourself. For example, a <ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> can&apos;t be modified from two threads at once. </para>    </detaileddescription>
  </compounddef>
</doxygen>
