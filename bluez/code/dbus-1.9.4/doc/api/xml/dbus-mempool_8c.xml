<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="dbus-mempool_8c" kind="file" language="C++">
    <compoundname>dbus-mempool.c</compoundname>
    <includes local="no">config.h</includes>
    <includes refid="dbus-mempool_8h" local="yes">dbus-mempool.h</includes>
    <includes refid="dbus-internals_8h" local="yes">dbus-internals.h</includes>
    <includes refid="dbus-valgrind-internal_8h" local="yes">dbus-valgrind-internal.h</includes>
    <incdepgraph>
      <node id="1917">
        <label>stdarg.h</label>
      </node>
      <node id="1911">
        <label>dbus/dbus-protocol.h</label>
        <link refid="dbus-protocol_8h_source"/>
      </node>
      <node id="1906">
        <label>dbus/dbus-macros.h</label>
        <link refid="dbus-macros_8h_source"/>
      </node>
      <node id="1913">
        <label>stdint.h</label>
      </node>
      <node id="1919">
        <label>sys/poll.h</label>
      </node>
      <node id="1912">
        <label>dbus/dbus-sysdeps.h</label>
        <link refid="dbus-sysdeps_8h_source"/>
        <childnode refid="1902" relation="include">
        </childnode>
        <childnode refid="1913" relation="include">
        </childnode>
        <childnode refid="1914" relation="include">
        </childnode>
        <childnode refid="1910" relation="include">
        </childnode>
        <childnode refid="1915" relation="include">
        </childnode>
        <childnode refid="1916" relation="include">
        </childnode>
        <childnode refid="1918" relation="include">
        </childnode>
        <childnode refid="1917" relation="include">
        </childnode>
        <childnode refid="1919" relation="include">
        </childnode>
      </node>
      <node id="1904">
        <label>dbus/dbus-internals.h</label>
        <link refid="dbus-internals_8h_source"/>
        <childnode refid="1905" relation="include">
        </childnode>
        <childnode refid="1908" relation="include">
        </childnode>
        <childnode refid="1910" relation="include">
        </childnode>
        <childnode refid="1912" relation="include">
        </childnode>
        <childnode refid="1920" relation="include">
        </childnode>
      </node>
      <node id="1907">
        <label>stddef.h</label>
      </node>
      <node id="1922">
        <label>dbus-valgrind-internal.h</label>
        <link refid="dbus-valgrind-internal_8h_source"/>
        <childnode refid="1902" relation="include">
        </childnode>
        <childnode refid="1904" relation="include">
        </childnode>
      </node>
      <node id="1916">
        <label>dbus/dbus-string.h</label>
        <link refid="dbus-string_8h_source"/>
        <childnode refid="1906" relation="include">
        </childnode>
        <childnode refid="1908" relation="include">
        </childnode>
        <childnode refid="1905" relation="include">
        </childnode>
        <childnode refid="1917" relation="include">
        </childnode>
      </node>
      <node id="1909">
        <label>dbus/dbus-arch-deps.h</label>
        <link refid="dbus-arch-deps_8h_source"/>
        <childnode refid="1906" relation="include">
        </childnode>
      </node>
      <node id="1918">
        <label>string.h</label>
      </node>
      <node id="1921">
        <label>dbus/dbus-threads.h</label>
        <link refid="dbus-threads_8h_source"/>
        <childnode refid="1906" relation="include">
        </childnode>
        <childnode refid="1908" relation="include">
        </childnode>
      </node>
      <node id="1901">
        <label>dbus-mempool.c</label>
        <link refid="dbus-mempool.c"/>
        <childnode refid="1902" relation="include">
        </childnode>
        <childnode refid="1903" relation="include">
        </childnode>
        <childnode refid="1904" relation="include">
        </childnode>
        <childnode refid="1922" relation="include">
        </childnode>
      </node>
      <node id="1903">
        <label>dbus-mempool.h</label>
        <link refid="dbus-mempool_8h_source"/>
        <childnode refid="1904" relation="include">
        </childnode>
        <childnode refid="1905" relation="include">
        </childnode>
        <childnode refid="1908" relation="include">
        </childnode>
      </node>
      <node id="1920">
        <label>dbus/dbus-threads-internal.h</label>
        <link refid="dbus-threads-internal_8h_source"/>
        <childnode refid="1906" relation="include">
        </childnode>
        <childnode refid="1908" relation="include">
        </childnode>
        <childnode refid="1921" relation="include">
        </childnode>
      </node>
      <node id="1902">
        <label>config.h</label>
      </node>
      <node id="1915">
        <label>dbus/dbus-file.h</label>
        <link refid="dbus-file_8h_source"/>
        <childnode refid="1916" relation="include">
        </childnode>
        <childnode refid="1910" relation="include">
        </childnode>
      </node>
      <node id="1910">
        <label>dbus/dbus-errors.h</label>
        <link refid="dbus-errors_8h_source"/>
        <childnode refid="1906" relation="include">
        </childnode>
        <childnode refid="1908" relation="include">
        </childnode>
        <childnode refid="1911" relation="include">
        </childnode>
      </node>
      <node id="1908">
        <label>dbus/dbus-types.h</label>
        <link refid="dbus-types_8h_source"/>
        <childnode refid="1907" relation="include">
        </childnode>
        <childnode refid="1909" relation="include">
        </childnode>
      </node>
      <node id="1914">
        <label>inttypes.h</label>
      </node>
      <node id="1905">
        <label>dbus/dbus-memory.h</label>
        <link refid="dbus-memory_8h_source"/>
        <childnode refid="1906" relation="include">
        </childnode>
        <childnode refid="1907" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structDBusFreedElement" prot="public">DBusFreedElement</innerclass>
    <innerclass refid="structDBusMemBlock" prot="public">DBusMemBlock</innerclass>
    <innerclass refid="structDBusMemPool" prot="public">DBusMemPool</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__DBusMemPoolInternals_1ga412163ea9cb4effae42afc1147d8b9b8" prot="public" static="no">
        <name>ELEMENT_PADDING</name>
        <initializer>4</initializer>
        <briefdescription>
<para>The dummy size of the variable-length &quot;elements&quot; field in <ref refid="structDBusMemBlock" kindref="compound">DBusMemBlock</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-mempool.c" line="70" column="9" bodyfile="dbus/dbus-mempool.c" bodystart="70" bodyend="-1"/>
        <referencedby refid="group__DBusMemPool_1ga0946d54f767b4f55238f5a39c8543df1" compoundref="dbus-mempool_8c" startline="214" endline="336">_dbus_mem_pool_alloc</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__DBusMemPoolInternals_1ga4210a89e140e1cccaba27cfabd254eb1" prot="public" static="no">
        <type>struct <ref refid="structDBusFreedElement" kindref="compound">DBusFreedElement</ref></type>
        <definition>typedef struct DBusFreedElement DBusFreedElement</definition>
        <argsstring></argsstring>
        <name>DBusFreedElement</name>
        <briefdescription>
<para>typedef so <ref refid="structDBusFreedElement" kindref="compound">DBusFreedElement</ref> struct can refer to itself. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-mempool.c" line="67" column="1" bodyfile="dbus/dbus-mempool.c" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusMemPoolInternals_1gadc586003d38772dd8336c4e103844a12" prot="public" static="no">
        <type>struct <ref refid="structDBusMemBlock" kindref="compound">DBusMemBlock</ref></type>
        <definition>typedef struct DBusMemBlock DBusMemBlock</definition>
        <argsstring></argsstring>
        <name>DBusMemBlock</name>
        <briefdescription>
<para>Typedef for <ref refid="structDBusMemBlock" kindref="compound">DBusMemBlock</ref> so the struct can recursively point to itself. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-mempool.c" line="67" column="1" bodyfile="dbus/dbus-mempool.c" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__DBusMemPool_1gaf1bae02bc5fcb879f77ff2c13ca03ac8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusMemPool" kindref="compound">DBusMemPool</ref> *</type>
        <definition>DBusMemPool* _dbus_mem_pool_new</definition>
        <argsstring>(int element_size, dbus_bool_t zero_elements)</argsstring>
        <name>_dbus_mem_pool_new</name>
        <param>
          <type>int</type>
          <declname>element_size</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
          <declname>zero_elements</declname>
        </param>
        <briefdescription>
<para>Creates a new memory pool, or returns <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> on failure. </para>        </briefdescription>
        <detaileddescription>
<para>Objects in the pool must be at least sizeof(void*) bytes each, due to the way memory pools work. To avoid creating 64 bit problems, this means at least 8 bytes on all platforms, unless you are 4 bytes on 32-bit and 8 bytes on 64-bit.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>element_size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of an element allocated from the pool. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zero_elements</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to zero-initialize elements </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the new pool or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-mempool.c" line="138" column="1" bodyfile="dbus/dbus-mempool.c" bodystart="138" bodyend="179"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="structDBusMemPool_1a23cd8af3ecb8cd88074b1934b1d7597c" compoundref="dbus-mempool_8c" startline="106">DBusMemPool::allocated_elements</references>
        <references refid="structDBusMemPool_1a45cdcee97621d5a2bd85edd90d87d8bf" compoundref="dbus-mempool_8c" startline="101">DBusMemPool::block_size</references>
        <references refid="group__DBusMemory_1gaba9d823abda7f4cadbaf5177d3b8b793" compoundref="dbus-memory_8h" startline="59">dbus_new0</references>
        <references refid="structDBusMemPool_1a690c2330fce2db5cfdbe6b810d70c92f" compoundref="dbus-mempool_8c" startline="100">DBusMemPool::element_size</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusMemPool_1a2ebffd5d3e0eb209b1d0fa5779609818" compoundref="dbus-mempool_8c" startline="102">DBusMemPool::zero_elements</references>
        <referencedby refid="group__DBusHashTable_1gac8e434348a354b9606d4c50c127a5eb4" compoundref="dbus-hash_8c" startline="285" endline="337">_dbus_hash_table_new</referencedby>
        <referencedby refid="group__DBusMemPool_1ga4e2feaefee7384ed940059e6c7b0a9d5" compoundref="dbus-mempool_8c" startline="347" endline="406">_dbus_mem_pool_dealloc</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusMemPool_1ga58e4f3def46410d5bb138a2b8f366b1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_mem_pool_free</definition>
        <argsstring>(DBusMemPool *pool)</argsstring>
        <name>_dbus_mem_pool_free</name>
        <param>
          <type><ref refid="structDBusMemPool" kindref="compound">DBusMemPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
<para>Frees a memory pool (and all elements allocated from it). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>the memory pool. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-mempool.c" line="187" column="1" bodyfile="dbus/dbus-mempool.c" bodystart="187" bodyend="204"/>
        <references refid="structDBusMemPool_1a4682e065e26ee0dc4d2a17023cb41b8b" compoundref="dbus-mempool_8c" startline="105">DBusMemPool::blocks</references>
        <references refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" compoundref="dbus-memory_8c" startline="701" endline="740">dbus_free</references>
        <references refid="structDBusFreedElement_1ac4819bebce960943155f9fbd4ab6e6c5" compoundref="dbus-mempool_8c" startline="63">DBusFreedElement::next</references>
        <references refid="structDBusMemBlock_1a88abbae4b7e92bfab8392c2aad2dae9b" compoundref="dbus-mempool_8c" startline="84">DBusMemBlock::next</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusHashTable_1ga96b777e00764b44e0f3216fd8478f5a9" compoundref="dbus-hash_8c" startline="361" endline="410">_dbus_hash_table_unref</referencedby>
        <referencedby refid="group__DBusMemPool_1ga4e2feaefee7384ed940059e6c7b0a9d5" compoundref="dbus-mempool_8c" startline="347" endline="406">_dbus_mem_pool_dealloc</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusMemPool_1ga0946d54f767b4f55238f5a39c8543df1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* _dbus_mem_pool_alloc</definition>
        <argsstring>(DBusMemPool *pool)</argsstring>
        <name>_dbus_mem_pool_alloc</name>
        <param>
          <type><ref refid="structDBusMemPool" kindref="compound">DBusMemPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
<para>Allocates an object from the memory pool. </para>        </briefdescription>
        <detaileddescription>
<para>The object must be freed with <ref refid="group__DBusMemPool_1ga4e2feaefee7384ed940059e6c7b0a9d5" kindref="member">_dbus_mem_pool_dealloc()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>the memory pool </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the allocated object or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if no memory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-mempool.c" line="214" column="1" bodyfile="dbus/dbus-mempool.c" bodystart="214" bodyend="336"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusInternalsUtils_1ga5627db5e165848477e620846f6414db1" compoundref="dbus-internals_8h" startline="231">_DBUS_INT_MAX</references>
        <references refid="structDBusMemPool_1a23cd8af3ecb8cd88074b1934b1d7597c" compoundref="dbus-mempool_8c" startline="106">DBusMemPool::allocated_elements</references>
        <references refid="structDBusMemPool_1a45cdcee97621d5a2bd85edd90d87d8bf" compoundref="dbus-mempool_8c" startline="101">DBusMemPool::block_size</references>
        <references refid="structDBusMemPool_1a4682e065e26ee0dc4d2a17023cb41b8b" compoundref="dbus-mempool_8c" startline="105">DBusMemPool::blocks</references>
        <references refid="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" compoundref="dbus-memory_8c" startline="461" endline="516">dbus_malloc</references>
        <references refid="group__DBusMemory_1gaa02722b030a091f6c14c4cb11a593623" compoundref="dbus-memory_8c" startline="531" endline="588">dbus_malloc0</references>
        <references refid="group__DBusMemPoolInternals_1ga412163ea9cb4effae42afc1147d8b9b8" compoundref="dbus-mempool_8c" startline="70">ELEMENT_PADDING</references>
        <references refid="structDBusMemPool_1a690c2330fce2db5cfdbe6b810d70c92f" compoundref="dbus-mempool_8c" startline="100">DBusMemPool::element_size</references>
        <references refid="structDBusMemBlock_1af685833ddb17150a20cbe538f23f3113" compoundref="dbus-mempool_8c" startline="92">DBusMemBlock::elements</references>
        <references refid="structDBusMemPool_1af02ff4ac188a7a04a02ab140e568886b" compoundref="dbus-mempool_8c" startline="104">DBusMemPool::free_elements</references>
        <references refid="structDBusFreedElement_1ac4819bebce960943155f9fbd4ab6e6c5" compoundref="dbus-mempool_8c" startline="63">DBusFreedElement::next</references>
        <references refid="structDBusMemBlock_1a88abbae4b7e92bfab8392c2aad2dae9b" compoundref="dbus-mempool_8c" startline="84">DBusMemBlock::next</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusMemBlock_1ad23a73654095952ea4e2c222c41e5441" compoundref="dbus-mempool_8c" startline="90">DBusMemBlock::used_so_far</references>
        <references refid="structDBusMemPool_1a2ebffd5d3e0eb209b1d0fa5779609818" compoundref="dbus-mempool_8c" startline="102">DBusMemPool::zero_elements</references>
        <referencedby refid="group__DBusHashTable_1gad169f3790ca67f8a0adafcdc88ef7188" compoundref="dbus-hash_8c" startline="418" endline="426">_dbus_hash_table_remove_all</referencedby>
        <referencedby refid="group__DBusMemPool_1ga4e2feaefee7384ed940059e6c7b0a9d5" compoundref="dbus-mempool_8c" startline="347" endline="406">_dbus_mem_pool_dealloc</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusMemPool_1ga4e2feaefee7384ed940059e6c7b0a9d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_mem_pool_dealloc</definition>
        <argsstring>(DBusMemPool *pool, void *element)</argsstring>
        <name>_dbus_mem_pool_dealloc</name>
        <param>
          <type><ref refid="structDBusMemPool" kindref="compound">DBusMemPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Deallocates an object previously created with <ref refid="group__DBusMemPool_1ga0946d54f767b4f55238f5a39c8543df1" kindref="member">_dbus_mem_pool_alloc()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The previous object must have come from this same pool. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>the memory pool </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para>the element earlier allocated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if there are no remaining allocated elements </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-mempool.c" line="347" column="1" bodyfile="dbus/dbus-mempool.c" bodystart="347" bodyend="406"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusInternalsUtils_1ga0c4961ec784874f1b1f3aeccea8d3da1" compoundref="dbus-internals_8h" startline="145">_dbus_assert_not_reached</references>
        <references refid="group__DBusMemPool_1ga0946d54f767b4f55238f5a39c8543df1" compoundref="dbus-mempool_8c" startline="214" endline="336">_dbus_mem_pool_alloc</references>
        <references refid="group__DBusMemPool_1ga4e2feaefee7384ed940059e6c7b0a9d5" compoundref="dbus-mempool_8c" startline="347" endline="406">_dbus_mem_pool_dealloc</references>
        <references refid="group__DBusMemPool_1ga58e4f3def46410d5bb138a2b8f366b1a" compoundref="dbus-mempool_8c" startline="187" endline="204">_dbus_mem_pool_free</references>
        <references refid="group__DBusMemPool_1gaf1bae02bc5fcb879f77ff2c13ca03ac8" compoundref="dbus-mempool_8c" startline="138" endline="179">_dbus_mem_pool_new</references>
        <references refid="group__DBusInternalsUtils_1gac153abad46f4eb80999a2b340d29d1f0" compoundref="dbus-internals_8h" startline="174">_DBUS_N_ELEMENTS</references>
        <references refid="structDBusMemPool_1a23cd8af3ecb8cd88074b1934b1d7597c" compoundref="dbus-mempool_8c" startline="106">DBusMemPool::allocated_elements</references>
        <references refid="structDBusMemPool_1a45cdcee97621d5a2bd85edd90d87d8bf" compoundref="dbus-mempool_8c" startline="101">DBusMemPool::block_size</references>
        <references refid="structDBusMemPool_1a4682e065e26ee0dc4d2a17023cb41b8b" compoundref="dbus-mempool_8c" startline="105">DBusMemPool::blocks</references>
        <references refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" compoundref="dbus-memory_8c" startline="701" endline="740">dbus_free</references>
        <references refid="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" compoundref="dbus-memory_8c" startline="461" endline="516">dbus_malloc</references>
        <references refid="group__DBusMemory_1gaa02722b030a091f6c14c4cb11a593623" compoundref="dbus-memory_8c" startline="531" endline="588">dbus_malloc0</references>
        <references refid="structDBusMemPool_1a690c2330fce2db5cfdbe6b810d70c92f" compoundref="dbus-mempool_8c" startline="100">DBusMemPool::element_size</references>
        <references refid="structDBusMemBlock_1af685833ddb17150a20cbe538f23f3113" compoundref="dbus-mempool_8c" startline="92">DBusMemBlock::elements</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusMemPool_1af02ff4ac188a7a04a02ab140e568886b" compoundref="dbus-mempool_8c" startline="104">DBusMemPool::free_elements</references>
        <references refid="structDBusFreedElement_1ac4819bebce960943155f9fbd4ab6e6c5" compoundref="dbus-mempool_8c" startline="63">DBusFreedElement::next</references>
        <references refid="structDBusMemBlock_1a88abbae4b7e92bfab8392c2aad2dae9b" compoundref="dbus-mempool_8c" startline="84">DBusMemBlock::next</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <references refid="structDBusMemBlock_1ad23a73654095952ea4e2c222c41e5441" compoundref="dbus-mempool_8c" startline="90">DBusMemBlock::used_so_far</references>
        <referencedby refid="group__DBusHashTable_1ga159dfec03d53e6e2ff485fc83aed2552" compoundref="dbus-hash_8c" startline="1339" endline="1350">_dbus_hash_table_free_preallocated_entry</referencedby>
        <referencedby refid="group__DBusHashTable_1gad169f3790ca67f8a0adafcdc88ef7188" compoundref="dbus-hash_8c" startline="418" endline="426">_dbus_hash_table_remove_all</referencedby>
        <referencedby refid="group__DBusMemPool_1ga4e2feaefee7384ed940059e6c7b0a9d5" compoundref="dbus-mempool_8c" startline="347" endline="406">_dbus_mem_pool_dealloc</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>mode:<sp/>C;<sp/>c-file-style:<sp/>&quot;gnu&quot;;<sp/>indent-tabs-mode:<sp/>nil;<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>dbus-mempool.h<sp/>Memory<sp/>pools</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2002,<sp/>2003<sp/><sp/>Red<sp/>Hat,<sp/>Inc.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Academic<sp/>Free<sp/>License<sp/>version<sp/>2.1</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>Street,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA<sp/><sp/>02110-1301<sp/><sp/>USA</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-mempool.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-internals.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-valgrind-internal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="group__DBusMemPoolInternals_1ga4210a89e140e1cccaba27cfabd254eb1" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDBusFreedElement" kindref="compound">DBusFreedElement</ref><sp/><ref refid="structDBusFreedElement" kindref="compound">DBusFreedElement</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="structDBusFreedElement" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDBusFreedElement" kindref="compound">DBusFreedElement</ref></highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63" refid="structDBusFreedElement_1ac4819bebce960943155f9fbd4ab6e6c5" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structDBusFreedElement" kindref="compound">DBusFreedElement</ref><sp/>*<ref refid="structDBusFreedElement_1ac4819bebce960943155f9fbd4ab6e6c5" kindref="member">next</ref>;<sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal">};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="group__DBusMemPoolInternals_1ga412163ea9cb4effae42afc1147d8b9b8" refkind="member"><highlight class="preprocessor">#define<sp/>ELEMENT_PADDING<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="group__DBusMemPoolInternals_1gadc586003d38772dd8336c4e103844a12" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDBusMemBlock" kindref="compound">DBusMemBlock</ref><sp/><ref refid="structDBusMemBlock" kindref="compound">DBusMemBlock</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="structDBusMemBlock" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDBusMemBlock" kindref="compound">DBusMemBlock</ref></highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84" refid="structDBusMemBlock_1a88abbae4b7e92bfab8392c2aad2dae9b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structDBusMemBlock" kindref="compound">DBusMemBlock</ref><sp/>*<ref refid="structDBusMemBlock_1a88abbae4b7e92bfab8392c2aad2dae9b" kindref="member">next</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>is<sp/>a<sp/>long<sp/>so<sp/>that<sp/>&quot;elements&quot;<sp/>is<sp/>aligned<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="structDBusMemBlock_1ad23a73654095952ea4e2c222c41e5441" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="structDBusMemBlock_1ad23a73654095952ea4e2c222c41e5441" kindref="member">used_so_far</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="92" refid="structDBusMemBlock_1af685833ddb17150a20cbe538f23f3113" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>elements[<ref refid="group__DBusMemPoolInternals_1ga412163ea9cb4effae42afc1147d8b9b8" kindref="member">ELEMENT_PADDING</ref>];<sp/></highlight></codeline>
<codeline lineno="93"><highlight class="normal">};</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="structDBusMemPool" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDBusMemPool" kindref="compound">DBusMemPool</ref></highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100" refid="structDBusMemPool_1a690c2330fce2db5cfdbe6b810d70c92f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structDBusMemPool_1a690c2330fce2db5cfdbe6b810d70c92f" kindref="member">element_size</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="101" refid="structDBusMemPool_1a45cdcee97621d5a2bd85edd90d87d8bf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structDBusMemPool_1a45cdcee97621d5a2bd85edd90d87d8bf" kindref="member">block_size</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="102" refid="structDBusMemPool_1a2ebffd5d3e0eb209b1d0fa5779609818" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zero_elements<sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="104" refid="structDBusMemPool_1af02ff4ac188a7a04a02ab140e568886b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structDBusFreedElement" kindref="compound">DBusFreedElement</ref><sp/>*<ref refid="structDBusMemPool_1af02ff4ac188a7a04a02ab140e568886b" kindref="member">free_elements</ref>;<sp/></highlight></codeline>
<codeline lineno="105" refid="structDBusMemPool_1a4682e065e26ee0dc4d2a17023cb41b8b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structDBusMemBlock" kindref="compound">DBusMemBlock</ref><sp/>*<ref refid="structDBusMemPool_1a4682e065e26ee0dc4d2a17023cb41b8b" kindref="member">blocks</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="106" refid="structDBusMemPool_1a23cd8af3ecb8cd88074b1934b1d7597c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structDBusMemPool_1a23cd8af3ecb8cd88074b1934b1d7597c" kindref="member">allocated_elements</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="107"><highlight class="normal">};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><ref refid="structDBusMemPool" kindref="compound">DBusMemPool</ref>*</highlight></codeline>
<codeline lineno="138" refid="group__DBusMemPool_1gaf1bae02bc5fcb879f77ff2c13ca03ac8" refkind="member"><highlight class="normal"><ref refid="group__DBusMemPool_1gaf1bae02bc5fcb879f77ff2c13ca03ac8" kindref="member">_dbus_mem_pool_new</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>element_size,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/>zero_elements)</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><ref refid="structDBusMemPool" kindref="compound">DBusMemPool</ref><sp/>*pool;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>pool<sp/>=<sp/><ref refid="group__DBusMemory_1gaba9d823abda7f4cadbaf5177d3b8b793" kindref="member">dbus_new0</ref><sp/>(<ref refid="structDBusMemPool" kindref="compound">DBusMemPool</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pool<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>the<sp/>element<sp/>size<sp/>at<sp/>least<sp/>8<sp/>bytes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(element_size<sp/>&lt;<sp/>8)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>element_size<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>these<sp/>assertions<sp/>are<sp/>equivalent<sp/>but<sp/>the<sp/>first<sp/>is<sp/>more<sp/>clear</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/>*<sp/>to<sp/>programmers<sp/>that<sp/>see<sp/>it<sp/>fail.</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><ref refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" kindref="member">_dbus_assert</ref><sp/>(element_size<sp/>&gt;=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*));</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><ref refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" kindref="member">_dbus_assert</ref><sp/>(element_size<sp/>&gt;=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(<ref refid="structDBusFreedElement" kindref="compound">DBusFreedElement</ref>));</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>align<sp/>the<sp/>element<sp/>size<sp/>to<sp/>a<sp/>pointer<sp/>boundary<sp/>so<sp/>we<sp/>won&apos;t<sp/>get<sp/>bus</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/>*<sp/>errors<sp/>under<sp/>other<sp/>architectures.<sp/><sp/></highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>pool-&gt;<ref refid="structDBusMemPool_1a690c2330fce2db5cfdbe6b810d70c92f" kindref="member">element_size</ref><sp/>=<sp/>_DBUS_ALIGN_VALUE<sp/>(element_size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>pool-&gt;<ref refid="structDBusMemPool_1a2ebffd5d3e0eb209b1d0fa5779609818" kindref="member">zero_elements</ref><sp/>=<sp/>zero_elements<sp/>!=<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>pool-&gt;<ref refid="structDBusMemPool_1a23cd8af3ecb8cd88074b1934b1d7597c" kindref="member">allocated_elements</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>pick<sp/>a<sp/>size<sp/>for<sp/>the<sp/>first<sp/>block;<sp/>it<sp/>increases</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/>*<sp/>for<sp/>each<sp/>block<sp/>we<sp/>need<sp/>to<sp/>allocate.<sp/>This<sp/>is</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/>*<sp/>actually<sp/>half<sp/>the<sp/>initial<sp/>block<sp/>size</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/>*<sp/>since<sp/>_dbus_mem_pool_alloc()<sp/>unconditionally</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/>*<sp/>doubles<sp/>it<sp/>prior<sp/>to<sp/>creating<sp/>a<sp/>new<sp/>block.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>pool-&gt;<ref refid="structDBusMemPool_1a45cdcee97621d5a2bd85edd90d87d8bf" kindref="member">block_size</ref><sp/>=<sp/>pool-&gt;<ref refid="structDBusMemPool_1a690c2330fce2db5cfdbe6b810d70c92f" kindref="member">element_size</ref><sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><ref refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" kindref="member">_dbus_assert</ref><sp/>((pool-&gt;<ref refid="structDBusMemPool_1a45cdcee97621d5a2bd85edd90d87d8bf" kindref="member">block_size</ref><sp/>%</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool-&gt;<ref refid="structDBusMemPool_1a690c2330fce2db5cfdbe6b810d70c92f" kindref="member">element_size</ref>)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>VALGRIND_CREATE_MEMPOOL<sp/>(pool,<sp/>0,<sp/>zero_elements);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pool;</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="group__DBusMemPool_1ga58e4f3def46410d5bb138a2b8f366b1a" refkind="member"><highlight class="normal"><ref refid="group__DBusMemPool_1ga58e4f3def46410d5bb138a2b8f366b1a" kindref="member">_dbus_mem_pool_free</ref><sp/>(<ref refid="structDBusMemPool" kindref="compound">DBusMemPool</ref><sp/>*pool)</highlight></codeline>
<codeline lineno="188"><highlight class="normal">{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><ref refid="structDBusMemBlock" kindref="compound">DBusMemBlock</ref><sp/>*block;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>VALGRIND_DESTROY_MEMPOOL<sp/>(pool);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>block<sp/>=<sp/>pool-&gt;<ref refid="structDBusMemPool_1a4682e065e26ee0dc4d2a17023cb41b8b" kindref="member">blocks</ref>;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(block<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMemBlock" kindref="compound">DBusMemBlock</ref><sp/>*<ref refid="structDBusFreedElement_1ac4819bebce960943155f9fbd4ab6e6c5" kindref="member">next</ref><sp/>=<sp/>block-&gt;<ref refid="structDBusMemBlock_1a88abbae4b7e92bfab8392c2aad2dae9b" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member">dbus_free</ref><sp/>(block);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>=<sp/><ref refid="structDBusFreedElement_1ac4819bebce960943155f9fbd4ab6e6c5" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member">dbus_free</ref><sp/>(pool);</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="214" refid="group__DBusMemPool_1ga0946d54f767b4f55238f5a39c8543df1" refkind="member"><highlight class="normal"><ref refid="group__DBusMemPool_1ga0946d54f767b4f55238f5a39c8543df1" kindref="member">_dbus_mem_pool_alloc</ref><sp/>(<ref refid="structDBusMemPool" kindref="compound">DBusMemPool</ref><sp/>*pool)</highlight></codeline>
<codeline lineno="215"><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_ENABLE_EMBEDDED_TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_dbus_disable_mem_pools<sp/>())</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMemBlock" kindref="compound">DBusMemBlock</ref><sp/>*block;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alloc_size;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>obviously<sp/>really<sp/>silly,<sp/>but<sp/>it&apos;s</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>debug-mode-only<sp/>code<sp/>that<sp/>is<sp/>compiled<sp/>out</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>when<sp/>tests<sp/>are<sp/>disabled<sp/>(_dbus_disable_mem_pools()</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>is<sp/>a<sp/>constant<sp/>expression<sp/>FALSE<sp/>so<sp/>this<sp/>block</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>should<sp/>vanish)</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>alloc_size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusMemPoolInternals_1gadc586003d38772dd8336c4e103844a12" kindref="member">DBusMemBlock</ref>)<sp/>-<sp/><ref refid="group__DBusMemPoolInternals_1ga412163ea9cb4effae42afc1147d8b9b8" kindref="member">ELEMENT_PADDING</ref><sp/>+</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool-&gt;<ref refid="structDBusMemPool_1a690c2330fce2db5cfdbe6b810d70c92f" kindref="member">element_size</ref>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(pool-&gt;<ref refid="structDBusMemPool_1a2ebffd5d3e0eb209b1d0fa5779609818" kindref="member">zero_elements</ref>)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>=<sp/><ref refid="group__DBusMemory_1gaa02722b030a091f6c14c4cb11a593623" kindref="member">dbus_malloc0</ref><sp/>(alloc_size);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>=<sp/><ref refid="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" kindref="member">dbus_malloc</ref><sp/>(alloc_size);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;<ref refid="structDBusMemBlock_1a88abbae4b7e92bfab8392c2aad2dae9b" kindref="member">next</ref><sp/>=<sp/>pool-&gt;<ref refid="structDBusMemPool_1a4682e065e26ee0dc4d2a17023cb41b8b" kindref="member">blocks</ref>;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool-&gt;<ref refid="structDBusMemPool_1a4682e065e26ee0dc4d2a17023cb41b8b" kindref="member">blocks</ref><sp/>=<sp/>block;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool-&gt;<ref refid="structDBusMemPool_1a23cd8af3ecb8cd88074b1934b1d7597c" kindref="member">allocated_elements</ref><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VALGRIND_MEMPOOL_ALLOC<sp/>(pool,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>&amp;block-&gt;<ref refid="structDBusMemBlock_1af685833ddb17150a20cbe538f23f3113" kindref="member">elements</ref>[0],</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool-&gt;<ref refid="structDBusMemPool_1a690c2330fce2db5cfdbe6b810d70c92f" kindref="member">element_size</ref>);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>&amp;block-&gt;<ref refid="structDBusMemBlock_1af685833ddb17150a20cbe538f23f3113" kindref="member">elements</ref>[0];</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_dbus_decrement_fail_alloc_counter<sp/>())</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>FAILING<sp/>mempool<sp/>alloc\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pool-&gt;<ref refid="structDBusMemPool_1af02ff4ac188a7a04a02ab140e568886b" kindref="member">free_elements</ref>)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusFreedElement" kindref="compound">DBusFreedElement</ref><sp/>*element<sp/>=<sp/>pool-&gt;<ref refid="structDBusMemPool_1af02ff4ac188a7a04a02ab140e568886b" kindref="member">free_elements</ref>;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool-&gt;<ref refid="structDBusMemPool_1af02ff4ac188a7a04a02ab140e568886b" kindref="member">free_elements</ref><sp/>=<sp/>pool-&gt;<ref refid="structDBusMemPool_1af02ff4ac188a7a04a02ab140e568886b" kindref="member">free_elements</ref>-&gt;<ref refid="structDBusFreedElement_1ac4819bebce960943155f9fbd4ab6e6c5" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VALGRIND_MEMPOOL_ALLOC<sp/>(pool,<sp/>element,<sp/>pool-&gt;<ref refid="structDBusMemPool_1a690c2330fce2db5cfdbe6b810d70c92f" kindref="member">element_size</ref>);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pool-&gt;<ref refid="structDBusMemPool_1a2ebffd5d3e0eb209b1d0fa5779609818" kindref="member">zero_elements</ref>)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset<sp/>(element,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>pool-&gt;<ref refid="structDBusMemPool_1a690c2330fce2db5cfdbe6b810d70c92f" kindref="member">element_size</ref>);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool-&gt;<ref refid="structDBusMemPool_1a23cd8af3ecb8cd88074b1934b1d7597c" kindref="member">allocated_elements</ref><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>element;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*element;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pool-&gt;<ref refid="structDBusMemPool_1a4682e065e26ee0dc4d2a17023cb41b8b" kindref="member">blocks</ref><sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>||</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool-&gt;<ref refid="structDBusMemPool_1a4682e065e26ee0dc4d2a17023cb41b8b" kindref="member">blocks</ref>-&gt;<ref refid="structDBusMemBlock_1ad23a73654095952ea4e2c222c41e5441" kindref="member">used_so_far</ref><sp/>==<sp/>pool-&gt;<ref refid="structDBusMemPool_1a45cdcee97621d5a2bd85edd90d87d8bf" kindref="member">block_size</ref>)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Need<sp/>a<sp/>new<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMemBlock" kindref="compound">DBusMemBlock</ref><sp/>*block;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alloc_size;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_ENABLE_EMBEDDED_TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>saved_counter;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pool-&gt;<ref refid="structDBusMemPool_1a45cdcee97621d5a2bd85edd90d87d8bf" kindref="member">block_size</ref><sp/>&lt;=<sp/><ref refid="group__DBusInternalsUtils_1ga5627db5e165848477e620846f6414db1" kindref="member">_DBUS_INT_MAX</ref><sp/>/<sp/>4)<sp/></highlight><highlight class="comment">/*<sp/>avoid<sp/>overflow<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>use<sp/>a<sp/>larger<sp/>block<sp/>size<sp/>for<sp/>our<sp/>next<sp/>block<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool-&gt;<ref refid="structDBusMemPool_1a45cdcee97621d5a2bd85edd90d87d8bf" kindref="member">block_size</ref><sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" kindref="member">_dbus_assert</ref><sp/>((pool-&gt;<ref refid="structDBusMemPool_1a45cdcee97621d5a2bd85edd90d87d8bf" kindref="member">block_size</ref><sp/>%</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool-&gt;<ref refid="structDBusMemPool_1a690c2330fce2db5cfdbe6b810d70c92f" kindref="member">element_size</ref>)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc_size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(<ref refid="group__DBusMemPoolInternals_1gadc586003d38772dd8336c4e103844a12" kindref="member">DBusMemBlock</ref>)<sp/>-<sp/><ref refid="group__DBusMemPoolInternals_1ga412163ea9cb4effae42afc1147d8b9b8" kindref="member">ELEMENT_PADDING</ref><sp/>+<sp/>pool-&gt;<ref refid="structDBusMemPool_1a45cdcee97621d5a2bd85edd90d87d8bf" kindref="member">block_size</ref>;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal">#ifdef<sp/>DBUS_ENABLE_EMBEDDED_TESTS</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>save/restore<sp/>the<sp/>counter,<sp/>so<sp/>that<sp/>memory<sp/>pools<sp/>won&apos;t</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>cause<sp/>a<sp/>given<sp/>function<sp/>to<sp/>have<sp/>different<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>allocations<sp/>on<sp/>different<sp/>invocations.<sp/>i.e.<sp/><sp/>when<sp/>testing</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>we<sp/>want<sp/>consistent<sp/>alloc<sp/>patterns.<sp/>So<sp/>we<sp/>skip<sp/>our</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>malloc<sp/>here<sp/>for<sp/>purposes<sp/>of<sp/>failed<sp/>alloc<sp/>simulation.</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>saved_counter<sp/>=<sp/>_dbus_get_fail_alloc_counter<sp/>();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_set_fail_alloc_counter<sp/>(<ref refid="group__DBusInternalsUtils_1ga5627db5e165848477e620846f6414db1" kindref="member">_DBUS_INT_MAX</ref>);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pool-&gt;<ref refid="structDBusMemPool_1a2ebffd5d3e0eb209b1d0fa5779609818" kindref="member">zero_elements</ref>)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>=<sp/><ref refid="group__DBusMemory_1gaa02722b030a091f6c14c4cb11a593623" kindref="member">dbus_malloc0</ref><sp/>(alloc_size);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>=<sp/><ref refid="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" kindref="member">dbus_malloc</ref><sp/>(alloc_size);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_ENABLE_EMBEDDED_TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_dbus_set_fail_alloc_counter<sp/>(saved_counter);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" kindref="member">_dbus_assert</ref><sp/>(saved_counter<sp/>==<sp/>_dbus_get_fail_alloc_counter<sp/>());</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block<sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;<ref refid="structDBusMemBlock_1ad23a73654095952ea4e2c222c41e5441" kindref="member">used_so_far</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;<ref refid="structDBusMemBlock_1a88abbae4b7e92bfab8392c2aad2dae9b" kindref="member">next</ref><sp/>=<sp/>pool-&gt;<ref refid="structDBusMemPool_1a4682e065e26ee0dc4d2a17023cb41b8b" kindref="member">blocks</ref>;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool-&gt;<ref refid="structDBusMemPool_1a4682e065e26ee0dc4d2a17023cb41b8b" kindref="member">blocks</ref><sp/>=<sp/>block;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element<sp/>=<sp/>&amp;pool-&gt;<ref refid="structDBusMemPool_1a4682e065e26ee0dc4d2a17023cb41b8b" kindref="member">blocks</ref>-&gt;<ref refid="structDBusMemBlock_1af685833ddb17150a20cbe538f23f3113" kindref="member">elements</ref>[pool-&gt;<ref refid="structDBusMemPool_1a4682e065e26ee0dc4d2a17023cb41b8b" kindref="member">blocks</ref>-&gt;<ref refid="structDBusMemBlock_1ad23a73654095952ea4e2c222c41e5441" kindref="member">used_so_far</ref>];</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool-&gt;<ref refid="structDBusMemPool_1a4682e065e26ee0dc4d2a17023cb41b8b" kindref="member">blocks</ref>-&gt;<ref refid="structDBusMemBlock_1ad23a73654095952ea4e2c222c41e5441" kindref="member">used_so_far</ref><sp/>+=<sp/>pool-&gt;<ref refid="structDBusMemPool_1a690c2330fce2db5cfdbe6b810d70c92f" kindref="member">element_size</ref>;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool-&gt;<ref refid="structDBusMemPool_1a23cd8af3ecb8cd88074b1934b1d7597c" kindref="member">allocated_elements</ref><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VALGRIND_MEMPOOL_ALLOC<sp/>(pool,<sp/>element,<sp/>pool-&gt;<ref refid="structDBusMemPool_1a690c2330fce2db5cfdbe6b810d70c92f" kindref="member">element_size</ref>);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>element;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="347" refid="group__DBusMemPool_1ga4e2feaefee7384ed940059e6c7b0a9d5" refkind="member"><highlight class="normal"><ref refid="group__DBusMemPool_1ga4e2feaefee7384ed940059e6c7b0a9d5" kindref="member">_dbus_mem_pool_dealloc</ref><sp/>(<ref refid="structDBusMemPool" kindref="compound">DBusMemPool</ref><sp/>*pool,</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*element)</highlight></codeline>
<codeline lineno="349"><highlight class="normal">{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>VALGRIND_MEMPOOL_FREE<sp/>(pool,<sp/>element);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_ENABLE_EMBEDDED_TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_dbus_disable_mem_pools<sp/>())</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMemBlock" kindref="compound">DBusMemBlock</ref><sp/>*block;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusMemBlock" kindref="compound">DBusMemBlock</ref><sp/>*prev;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>mmm,<sp/>fast.<sp/>;-)<sp/>debug-only<sp/>code,<sp/>so<sp/>doesn&apos;t<sp/>matter.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>=<sp/>pool-&gt;<ref refid="structDBusMemPool_1a4682e065e26ee0dc4d2a17023cb41b8b" kindref="member">blocks</ref>;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(block<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block-&gt;<ref refid="structDBusMemBlock_1af685833ddb17150a20cbe538f23f3113" kindref="member">elements</ref><sp/>==<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>element)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev-&gt;<ref refid="structDBusMemBlock_1a88abbae4b7e92bfab8392c2aad2dae9b" kindref="member">next</ref><sp/>=<sp/>block-&gt;<ref refid="structDBusMemBlock_1a88abbae4b7e92bfab8392c2aad2dae9b" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool-&gt;<ref refid="structDBusMemPool_1a4682e065e26ee0dc4d2a17023cb41b8b" kindref="member">blocks</ref><sp/>=<sp/>block-&gt;<ref refid="structDBusMemBlock_1a88abbae4b7e92bfab8392c2aad2dae9b" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member">dbus_free</ref><sp/>(block);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" kindref="member">_dbus_assert</ref><sp/>(pool-&gt;<ref refid="structDBusMemPool_1a23cd8af3ecb8cd88074b1934b1d7597c" kindref="member">allocated_elements</ref><sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool-&gt;<ref refid="structDBusMemPool_1a23cd8af3ecb8cd88074b1934b1d7597c" kindref="member">allocated_elements</ref><sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pool-&gt;<ref refid="structDBusMemPool_1a23cd8af3ecb8cd88074b1934b1d7597c" kindref="member">allocated_elements</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" kindref="member">_dbus_assert</ref><sp/>(pool-&gt;<ref refid="structDBusMemPool_1a4682e065e26ee0dc4d2a17023cb41b8b" kindref="member">blocks</ref><sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pool-&gt;<ref refid="structDBusMemPool_1a4682e065e26ee0dc4d2a17023cb41b8b" kindref="member">blocks</ref><sp/>==<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>block;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>=<sp/>block-&gt;<ref refid="structDBusMemBlock_1a88abbae4b7e92bfab8392c2aad2dae9b" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusInternalsUtils_1ga0c4961ec784874f1b1f3aeccea8d3da1" kindref="member">_dbus_assert_not_reached</ref><sp/>(</highlight><highlight class="stringliteral">&quot;freed<sp/>nonexistent<sp/>block&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDBusFreedElement" kindref="compound">DBusFreedElement</ref><sp/>*freed;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>freed<sp/>=<sp/>element;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>used<sp/>for<sp/>internal<sp/>mempool<sp/>administration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VALGRIND_MAKE_MEM_UNDEFINED<sp/>(freed,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(*freed));</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>freed-&gt;<ref refid="structDBusFreedElement_1ac4819bebce960943155f9fbd4ab6e6c5" kindref="member">next</ref><sp/>=<sp/>pool-&gt;<ref refid="structDBusMemPool_1af02ff4ac188a7a04a02ab140e568886b" kindref="member">free_elements</ref>;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pool-&gt;<ref refid="structDBusMemPool_1af02ff4ac188a7a04a02ab140e568886b" kindref="member">free_elements</ref><sp/>=<sp/>freed;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" kindref="member">_dbus_assert</ref><sp/>(pool-&gt;<ref refid="structDBusMemPool_1a23cd8af3ecb8cd88074b1934b1d7597c" kindref="member">allocated_elements</ref><sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pool-&gt;<ref refid="structDBusMemPool_1a23cd8af3ecb8cd88074b1934b1d7597c" kindref="member">allocated_elements</ref><sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pool-&gt;<ref refid="structDBusMemPool_1a23cd8af3ecb8cd88074b1934b1d7597c" kindref="member">allocated_elements</ref><sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_ENABLE_STATS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal">_dbus_mem_pool_get_stats<sp/>(<ref refid="structDBusMemPool" kindref="compound">DBusMemPool</ref><sp/><sp/><sp/>*pool,</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1gaf513803b030613a669cc7ef199f90a8b" kindref="member">dbus_uint32_t</ref><sp/>*in_use_p,</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1gaf513803b030613a669cc7ef199f90a8b" kindref="member">dbus_uint32_t</ref><sp/>*in_free_list_p,</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1gaf513803b030613a669cc7ef199f90a8b" kindref="member">dbus_uint32_t</ref><sp/>*allocated_p)</highlight></codeline>
<codeline lineno="414"><highlight class="normal">{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><ref refid="structDBusMemBlock" kindref="compound">DBusMemBlock</ref><sp/>*block;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><ref refid="structDBusFreedElement" kindref="compound">DBusFreedElement</ref><sp/>*freed;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1gaf513803b030613a669cc7ef199f90a8b" kindref="member">dbus_uint32_t</ref><sp/>in_use<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1gaf513803b030613a669cc7ef199f90a8b" kindref="member">dbus_uint32_t</ref><sp/>in_free_list<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><ref refid="group__DBusTypes_1gaf513803b030613a669cc7ef199f90a8b" kindref="member">dbus_uint32_t</ref><sp/>allocated<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pool<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>in_use<sp/>=<sp/>pool-&gt;<ref refid="structDBusMemPool_1a690c2330fce2db5cfdbe6b810d70c92f" kindref="member">element_size</ref><sp/>*<sp/>pool-&gt;<ref refid="structDBusMemPool_1a23cd8af3ecb8cd88074b1934b1d7597c" kindref="member">allocated_elements</ref>;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(freed<sp/>=<sp/>pool-&gt;<ref refid="structDBusMemPool_1af02ff4ac188a7a04a02ab140e568886b" kindref="member">free_elements</ref>;<sp/>freed<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;<sp/>freed<sp/>=<sp/>freed-&gt;<ref refid="structDBusFreedElement_1ac4819bebce960943155f9fbd4ab6e6c5" kindref="member">next</ref>)</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in_free_list<sp/>+=<sp/>pool-&gt;<ref refid="structDBusMemPool_1a690c2330fce2db5cfdbe6b810d70c92f" kindref="member">element_size</ref>;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(block<sp/>=<sp/>pool-&gt;<ref refid="structDBusMemPool_1a4682e065e26ee0dc4d2a17023cb41b8b" kindref="member">blocks</ref>;<sp/>block<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;<sp/>block<sp/>=<sp/>block-&gt;<ref refid="structDBusMemBlock_1a88abbae4b7e92bfab8392c2aad2dae9b" kindref="member">next</ref>)</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block<sp/>==<sp/>pool-&gt;<ref refid="structDBusMemPool_1a4682e065e26ee0dc4d2a17023cb41b8b" kindref="member">blocks</ref>)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocated<sp/>+=<sp/>pool-&gt;<ref refid="structDBusMemPool_1a45cdcee97621d5a2bd85edd90d87d8bf" kindref="member">block_size</ref>;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocated<sp/>+=<sp/>block-&gt;<ref refid="structDBusMemBlock_1ad23a73654095952ea4e2c222c41e5441" kindref="member">used_so_far</ref>;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(in_use_p<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>*in_use_p<sp/>=<sp/>in_use;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(in_free_list_p<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>*in_free_list_p<sp/>=<sp/>in_free_list;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allocated_p<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>*allocated_p<sp/>=<sp/>allocated;</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DBUS_ENABLE_STATS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="preprocessor">#ifdef<sp/>DBUS_ENABLE_EMBEDDED_TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dbus-test.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal">time_for_size<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="459"><highlight class="normal">{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_ENABLE_VERBOSE_MODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>clock_t<sp/>start;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>clock_t<sp/>end;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FREE_ARRAY_SIZE<sp/>512</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>N_ITERATIONS<sp/>FREE_ARRAY_SIZE<sp/>*<sp/>512</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*to_free[FREE_ARRAY_SIZE];</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><ref refid="structDBusMemPool" kindref="compound">DBusMemPool</ref><sp/>*pool;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;Timings<sp/>for<sp/>size<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>size);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>malloc\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_ENABLE_VERBOSE_MODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>start<sp/>=<sp/>clock<sp/>();</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>N_ITERATIONS)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>to_free[j]<sp/>=<sp/><ref refid="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" kindref="member">dbus_malloc</ref><sp/>(size);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" kindref="member">_dbus_assert</ref><sp/>(to_free[j]<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);<sp/></highlight><highlight class="comment">/*<sp/>in<sp/>a<sp/>real<sp/>app<sp/>of<sp/>course<sp/>this<sp/>is<sp/>wrong<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>FREE_ARRAY_SIZE)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>FREE_ARRAY_SIZE)</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member">dbus_free</ref><sp/>(to_free[j]);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_ENABLE_VERBOSE_MODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>end<sp/>=<sp/>clock<sp/>();</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>created/destroyed<sp/>%d<sp/>elements<sp/>in<sp/>%g<sp/>seconds\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N_ITERATIONS,<sp/>(end<sp/>-<sp/>start)<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>CLOCKS_PER_SEC);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>mempools\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>start<sp/>=<sp/>clock<sp/>();</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>pool<sp/>=<sp/><ref refid="group__DBusMemPool_1gaf1bae02bc5fcb879f77ff2c13ca03ac8" kindref="member">_dbus_mem_pool_new</ref><sp/>(size,<sp/><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>N_ITERATIONS)</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>to_free[j]<sp/>=<sp/><ref refid="group__DBusMemPool_1ga0946d54f767b4f55238f5a39c8543df1" kindref="member">_dbus_mem_pool_alloc</ref><sp/>(pool);<sp/></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" kindref="member">_dbus_assert</ref><sp/>(to_free[j]<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);<sp/><sp/></highlight><highlight class="comment">/*<sp/>in<sp/>a<sp/>real<sp/>app<sp/>of<sp/>course<sp/>this<sp/>is<sp/>wrong<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>FREE_ARRAY_SIZE)</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>FREE_ARRAY_SIZE)</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemPool_1ga4e2feaefee7384ed940059e6c7b0a9d5" kindref="member">_dbus_mem_pool_dealloc</ref><sp/>(pool,<sp/>to_free[j]);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemPool_1ga58e4f3def46410d5bb138a2b8f366b1a" kindref="member">_dbus_mem_pool_free</ref><sp/>(pool);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_ENABLE_VERBOSE_MODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>end<sp/>=<sp/>clock<sp/>();</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>created/destroyed<sp/>%d<sp/>elements<sp/>in<sp/>%g<sp/>seconds\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N_ITERATIONS,<sp/>(end<sp/>-<sp/>start)<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>CLOCKS_PER_SEC);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>zeroed<sp/>malloc\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>start<sp/>=<sp/>clock<sp/>();</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>N_ITERATIONS)</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>to_free[j]<sp/>=<sp/><ref refid="group__DBusMemory_1gaa02722b030a091f6c14c4cb11a593623" kindref="member">dbus_malloc0</ref><sp/>(size);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" kindref="member">_dbus_assert</ref><sp/>(to_free[j]<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);<sp/></highlight><highlight class="comment">/*<sp/>in<sp/>a<sp/>real<sp/>app<sp/>of<sp/>course<sp/>this<sp/>is<sp/>wrong<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>FREE_ARRAY_SIZE)</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>FREE_ARRAY_SIZE)</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" kindref="member">dbus_free</ref><sp/>(to_free[j]);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_ENABLE_VERBOSE_MODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>end<sp/>=<sp/>clock<sp/>();</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>created/destroyed<sp/>%d<sp/>elements<sp/>in<sp/>%g<sp/>seconds\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N_ITERATIONS,<sp/>(end<sp/>-<sp/>start)<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>CLOCKS_PER_SEC);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>zeroed<sp/>mempools\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>start<sp/>=<sp/>clock<sp/>();</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>pool<sp/>=<sp/><ref refid="group__DBusMemPool_1gaf1bae02bc5fcb879f77ff2c13ca03ac8" kindref="member">_dbus_mem_pool_new</ref><sp/>(size,<sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>N_ITERATIONS)</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>to_free[j]<sp/>=<sp/><ref refid="group__DBusMemPool_1ga0946d54f767b4f55238f5a39c8543df1" kindref="member">_dbus_mem_pool_alloc</ref><sp/>(pool);<sp/></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" kindref="member">_dbus_assert</ref><sp/>(to_free[j]<sp/>!=<sp/><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);<sp/><sp/></highlight><highlight class="comment">/*<sp/>in<sp/>a<sp/>real<sp/>app<sp/>of<sp/>course<sp/>this<sp/>is<sp/>wrong<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>FREE_ARRAY_SIZE)</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>FREE_ARRAY_SIZE)</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemPool_1ga4e2feaefee7384ed940059e6c7b0a9d5" kindref="member">_dbus_mem_pool_dealloc</ref><sp/>(pool,<sp/>to_free[j]);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><ref refid="group__DBusMemPool_1ga58e4f3def46410d5bb138a2b8f366b1a" kindref="member">_dbus_mem_pool_free</ref><sp/>(pool);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBUS_ENABLE_VERBOSE_MODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>end<sp/>=<sp/>clock<sp/>();</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>_dbus_verbose<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>created/destroyed<sp/>%d<sp/>elements<sp/>in<sp/>%g<sp/>seconds\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N_ITERATIONS,<sp/>(end<sp/>-<sp/>start)<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>CLOCKS_PER_SEC);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></highlight></codeline>
<codeline lineno="632"><highlight class="normal">_dbus_mem_pool_test<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="633"><highlight class="normal">{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>element_sizes[]<sp/>=<sp/>{<sp/>4,<sp/>8,<sp/>16,<sp/>50,<sp/>124<sp/>};</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/><ref refid="group__DBusInternalsUtils_1gac153abad46f4eb80999a2b340d29d1f0" kindref="member">_DBUS_N_ELEMENTS</ref><sp/>(element_sizes))</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>time_for_size<sp/>(element_sizes[i]);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DBUS_ENABLE_EMBEDDED_TESTS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="dbus/dbus-mempool.c"/>
  </compounddef>
</doxygen>
