<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="dbus-pending-call_8h" kind="file" language="C++">
    <compoundname>dbus-pending-call.h</compoundname>
    <includes refid="dbus-macros_8h" local="no">dbus/dbus-macros.h</includes>
    <includes refid="dbus-types_8h" local="no">dbus/dbus-types.h</includes>
    <includes refid="dbus-connection_8h" local="no">dbus/dbus-connection.h</includes>
    <includedby refid="dbus_8h" local="no">dbus.h</includedby>
    <includedby refid="dbus-connection_8c" local="yes">dbus-connection.c</includedby>
    <includedby refid="dbus-pending-call_8c" local="yes">dbus-pending-call.c</includedby>
    <incdepgraph>
      <node id="2358">
        <label>stdarg.h</label>
      </node>
      <node id="2353">
        <label>dbus/dbus-connection.h</label>
        <link refid="dbus-connection_8h_source"/>
        <childnode refid="2354" relation="include">
        </childnode>
        <childnode refid="2356" relation="include">
        </childnode>
        <childnode refid="2357" relation="include">
        </childnode>
        <childnode refid="2359" relation="include">
        </childnode>
      </node>
      <node id="2355">
        <label>dbus/dbus-protocol.h</label>
        <link refid="dbus-protocol_8h_source"/>
      </node>
      <node id="2349">
        <label>dbus/dbus-macros.h</label>
        <link refid="dbus-macros_8h_source"/>
      </node>
      <node id="2359">
        <label>dbus/dbus-shared.h</label>
        <link refid="dbus-shared_8h_source"/>
      </node>
      <node id="2351">
        <label>stddef.h</label>
      </node>
      <node id="2352">
        <label>dbus/dbus-arch-deps.h</label>
        <link refid="dbus-arch-deps_8h_source"/>
        <childnode refid="2349" relation="include">
        </childnode>
      </node>
      <node id="2357">
        <label>dbus/dbus-message.h</label>
        <link refid="dbus-message_8h_source"/>
        <childnode refid="2349" relation="include">
        </childnode>
        <childnode refid="2350" relation="include">
        </childnode>
        <childnode refid="2352" relation="include">
        </childnode>
        <childnode refid="2356" relation="include">
        </childnode>
        <childnode refid="2354" relation="include">
        </childnode>
        <childnode refid="2358" relation="include">
        </childnode>
      </node>
      <node id="2348">
        <label>dbus-pending-call.h</label>
        <link refid="dbus-pending-call.h"/>
        <childnode refid="2349" relation="include">
        </childnode>
        <childnode refid="2350" relation="include">
        </childnode>
        <childnode refid="2353" relation="include">
        </childnode>
      </node>
      <node id="2354">
        <label>dbus/dbus-errors.h</label>
        <link refid="dbus-errors_8h_source"/>
        <childnode refid="2349" relation="include">
        </childnode>
        <childnode refid="2350" relation="include">
        </childnode>
        <childnode refid="2355" relation="include">
        </childnode>
      </node>
      <node id="2350">
        <label>dbus/dbus-types.h</label>
        <link refid="dbus-types_8h_source"/>
        <childnode refid="2351" relation="include">
        </childnode>
        <childnode refid="2352" relation="include">
        </childnode>
      </node>
      <node id="2356">
        <label>dbus/dbus-memory.h</label>
        <link refid="dbus-memory_8h_source"/>
        <childnode refid="2349" relation="include">
        </childnode>
        <childnode refid="2351" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2363">
        <label>dbus-connection.c</label>
        <link refid="dbus-connection_8c_source"/>
      </node>
      <node id="2362">
        <label>dbus-asv-util.c</label>
        <link refid="dbus-asv-util_8c_source"/>
      </node>
      <node id="2361">
        <label>dbus.h</label>
        <link refid="dbus_8h_source"/>
        <childnode refid="2362" relation="include">
        </childnode>
      </node>
      <node id="2364">
        <label>dbus-pending-call.c</label>
        <link refid="dbus-pending-call_8c_source"/>
      </node>
      <node id="2360">
        <label>dbus-pending-call.h</label>
        <link refid="dbus-pending-call.h"/>
        <childnode refid="2361" relation="include">
        </childnode>
        <childnode refid="2363" relation="include">
        </childnode>
        <childnode refid="2364" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__DBusPendingCall_1ga21384c9c5b0da54f7d0a92012522f213" prot="public" static="no">
        <name>DBUS_TIMEOUT_INFINITE</name>
        <initializer>((int) 0x7fffffff)</initializer>
        <briefdescription>
<para>An integer constant representing an infinite timeout. </para>        </briefdescription>
        <detaileddescription>
<para>This has the numeric value 0x7fffffff (the largest 32-bit signed integer).</para><para>For source compatibility with D-Bus versions earlier than 1.4.12, use 0x7fffffff, or INT32_MAX (assuming your platform has it). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-pending-call.h" line="41" column="9" bodyfile="dbus/dbus-pending-call.h" bodystart="41" bodyend="-1"/>
        <referencedby refid="group__DBusPendingCallInternals_1ga3f2300d7a768783bc2fae0991bcc55df" compoundref="dbus-pending-call_8c" startline="109" endline="161">_dbus_pending_call_new_unlocked</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__DBusPendingCall_1gabdc138a303699e88756d6c5988a16b05" prot="public" static="no">
        <name>DBUS_TIMEOUT_USE_DEFAULT</name>
        <initializer>(-1)</initializer>
        <briefdescription>
<para>An integer constant representing a request to use the default timeout. </para>        </briefdescription>
        <detaileddescription>
<para>This has numeric value -1.</para><para>For source compatibility with D-Bus versions earlier than 1.4.12, use a literal -1. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-pending-call.h" line="42" column="9" bodyfile="dbus/dbus-pending-call.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__DBusPendingCall_1ga334f6c6621583e15fdaf1a3f93dd2221" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> *</type>
        <definition>DBUS_EXPORT DBusPendingCall * dbus_pending_call_ref</definition>
        <argsstring>(DBusPendingCall *pending)</argsstring>
        <name>dbus_pending_call_ref</name>
        <param>
          <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> *</type>
          <declname>pending</declname>
        </param>
        <briefdescription>
<para>Increments the reference count on a pending call. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pending</parametername>
</parameternamelist>
<parameterdescription>
<para>the pending call object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the pending call object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-pending-call.c" line="577" column="1" bodyfile="dbus/dbus-pending-call.c" bodystart="577" bodyend="588"/>
        <references refid="group__DBusSysdeps_1gae74c3fcf12acaeccdb152ef907de951c" compoundref="dbus-sysdeps-unix_8c" startline="2562" endline="2576">_dbus_atomic_inc</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusPendingCall_1a952e3c744db112d49bbaffe0fe45048d" compoundref="dbus-pending-call_8c" startline="64">DBusPendingCall::refcount</references>
        <referencedby refid="group__DBusConnectionInternals_1gad5e725e66dc16a411544e25675fb9fba" compoundref="dbus-connection_8c" startline="2379" endline="2550">_dbus_connection_block_pending_call</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusPendingCall_1gadaba15a74ba4925cdef52d4791cd3147" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_pending_call_unref</definition>
        <argsstring>(DBusPendingCall *pending)</argsstring>
        <name>dbus_pending_call_unref</name>
        <param>
          <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> *</type>
          <declname>pending</declname>
        </param>
        <briefdescription>
<para>Decrements the reference count on a pending call, freeing it if the count reaches 0. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pending</parametername>
</parameternamelist>
<parameterdescription>
<para>the pending call object </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-pending-call.c" line="597" column="1" bodyfile="dbus/dbus-pending-call.c" bodystart="597" bodyend="609"/>
        <references refid="group__DBusSysdeps_1ga3c50a069f795dceeb9172fe2b517bbdc" compoundref="dbus-sysdeps-unix_8c" startline="2585" endline="2599">_dbus_atomic_dec</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusPendingCall_1a952e3c744db112d49bbaffe0fe45048d" compoundref="dbus-pending-call_8c" startline="64">DBusPendingCall::refcount</references>
        <referencedby refid="group__DBusConnectionInternals_1gad5e725e66dc16a411544e25675fb9fba" compoundref="dbus-connection_8c" startline="2379" endline="2550">_dbus_connection_block_pending_call</referencedby>
        <referencedby refid="group__DBusConnectionInternals_1ga9f9665902c763bd1ddf9d9bc57d7a7ba" compoundref="dbus-connection_8c" startline="2146" endline="2160">_dbus_connection_close_if_only_one_ref</referencedby>
        <referencedby refid="group__DBusConnection_1gaa215df7ab7ca6dce7be153c6b9cc80ba" compoundref="dbus-connection_8c" startline="3399" endline="3500">dbus_connection_send_with_reply</referencedby>
        <referencedby refid="group__DBusConnection_1ga8d6431f17a9e53c9446d87c2ba8409f0" compoundref="dbus-connection_8c" startline="3535" endline="3592">dbus_connection_send_with_reply_and_block</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusPendingCall_1ga16b67b418b1dc27cfdda6b20f7447670" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_pending_call_set_notify</definition>
        <argsstring>(DBusPendingCall *pending, DBusPendingCallNotifyFunction function, void *user_data, DBusFreeFunction free_user_data)</argsstring>
        <name>dbus_pending_call_set_notify</name>
        <param>
          <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> *</type>
          <declname>pending</declname>
        </param>
        <param>
          <type><ref refid="group__DBusConnection_1ga0934446fa9009211ca180fc1a01813b4" kindref="member">DBusPendingCallNotifyFunction</ref></type>
          <declname>function</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <param>
          <type><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref></type>
          <declname>free_user_data</declname>
        </param>
        <briefdescription>
<para>Sets a notification function to be called when the reply is received or the pending call times out. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pending</parametername>
</parameternamelist>
<parameterdescription>
<para>the pending call </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>notifier function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to pass to notifier function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_user_data</parametername>
</parameternamelist>
<parameterdescription>
<para>function to free the user data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if not enough memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-pending-call.c" line="622" column="1" bodyfile="dbus/dbus-pending-call.c" bodystart="622" bodyend="645"/>
        <references refid="group__DBusPendingCallInternals_1ga7d4196ca35b8df842c05a02dbb71c269" compoundref="dbus-pending-call_8c" startline="502" endline="528">_dbus_pending_call_set_data_unlocked</references>
        <references refid="structDBusPendingCall_1adaee5e70f04e503f25b8c4202fd4747f" compoundref="dbus-pending-call_8c" startline="70">DBusPendingCall::connection</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusPendingCall_1a057527b236383b2f3436f4ed5ddc2d4b" compoundref="dbus-pending-call_8c" startline="68">DBusPendingCall::function</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusPendingCall_1ga6530d18f891d3ca5f5df87ea7c2b155c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_pending_call_cancel</definition>
        <argsstring>(DBusPendingCall *pending)</argsstring>
        <name>dbus_pending_call_cancel</name>
        <param>
          <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> *</type>
          <declname>pending</declname>
        </param>
        <briefdescription>
<para>Cancels the pending call, such that any reply or error received will just be ignored. </para>        </briefdescription>
        <detaileddescription>
<para>Drops the dbus library&apos;s internal reference to the <ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> so will free the call if nobody else is holding a reference. However you usually get a reference from <ref refid="group__DBusConnection_1gaa215df7ab7ca6dce7be153c6b9cc80ba" kindref="member">dbus_connection_send_with_reply()</ref> so probably your app owns a ref also.</para><para>Note that canceling a pending call will <emphasis>not</emphasis> simulate a timed-out call; if a call times out, then a timeout error reply is received. If you cancel the call, no reply is received unless the the reply was already received before you canceled.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pending</parametername>
</parameternamelist>
<parameterdescription>
<para>the pending call </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-pending-call.c" line="663" column="1" bodyfile="dbus/dbus-pending-call.c" bodystart="663" bodyend="669"/>
        <references refid="group__DBusConnectionInternals_1ga968196bee49659e75c54b53d7c85fa51" compoundref="dbus-connection_8c" startline="1044" endline="1049">_dbus_connection_remove_pending_call</references>
        <references refid="structDBusPendingCall_1adaee5e70f04e503f25b8c4202fd4747f" compoundref="dbus-pending-call_8c" startline="70">DBusPendingCall::connection</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusPendingCall_1gacbf33ae8a1cc125628f9ea44d175c159" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_pending_call_get_completed</definition>
        <argsstring>(DBusPendingCall *pending)</argsstring>
        <name>dbus_pending_call_get_completed</name>
        <param>
          <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> *</type>
          <declname>pending</declname>
        </param>
        <briefdescription>
<para>Checks whether the pending call has received a reply yet, or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pending</parametername>
</parameternamelist>
<parameterdescription>
<para>the pending call </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if a reply has been received </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-pending-call.c" line="679" column="1" bodyfile="dbus/dbus-pending-call.c" bodystart="679" bodyend="690"/>
        <references refid="structDBusPendingCall_1ac9b0b400f7d555e4e2b3eb1e5f4c26aa" compoundref="dbus-pending-call_8c" startline="78">DBusPendingCall::completed</references>
        <references refid="structDBusPendingCall_1adaee5e70f04e503f25b8c4202fd4747f" compoundref="dbus-pending-call_8c" startline="70">DBusPendingCall::connection</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusConnectionInternals_1gad5e725e66dc16a411544e25675fb9fba" compoundref="dbus-connection_8c" startline="2379" endline="2550">_dbus_connection_block_pending_call</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusPendingCall_1ga5a738928c2369fef093ce00658903d06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref> *</type>
        <definition>DBUS_EXPORT DBusMessage * dbus_pending_call_steal_reply</definition>
        <argsstring>(DBusPendingCall *pending)</argsstring>
        <name>dbus_pending_call_steal_reply</name>
        <param>
          <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> *</type>
          <declname>pending</declname>
        </param>
        <briefdescription>
<para>Gets the reply, or returns <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if none has been received yet. </para>        </briefdescription>
        <detaileddescription>
<para>Ownership of the reply message passes to the caller. This function can only be called once per pending call, since the reply message is tranferred to the caller.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pending</parametername>
</parameternamelist>
<parameterdescription>
<para>the pending call </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the reply message or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-pending-call.c" line="702" column="1" bodyfile="dbus/dbus-pending-call.c" bodystart="702" bodyend="719"/>
        <references refid="structDBusPendingCall_1ac9b0b400f7d555e4e2b3eb1e5f4c26aa" compoundref="dbus-pending-call_8c" startline="78">DBusPendingCall::completed</references>
        <references refid="structDBusPendingCall_1adaee5e70f04e503f25b8c4202fd4747f" compoundref="dbus-pending-call_8c" startline="70">DBusPendingCall::connection</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusPendingCall_1a30c043b7cc468ab01fce6596dac1da57" compoundref="dbus-pending-call_8c" startline="71">DBusPendingCall::reply</references>
        <referencedby refid="group__DBusConnection_1ga8d6431f17a9e53c9446d87c2ba8409f0" compoundref="dbus-connection_8c" startline="3535" endline="3592">dbus_connection_send_with_reply_and_block</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusPendingCall_1ga67b99f749a7f477c7b5d70f2acee5452" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_pending_call_block</definition>
        <argsstring>(DBusPendingCall *pending)</argsstring>
        <name>dbus_pending_call_block</name>
        <param>
          <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> *</type>
          <declname>pending</declname>
        </param>
        <briefdescription>
<para>Block until the pending call is completed. </para>        </briefdescription>
        <detaileddescription>
<para>The blocking is as with <ref refid="group__DBusConnection_1ga8d6431f17a9e53c9446d87c2ba8409f0" kindref="member">dbus_connection_send_with_reply_and_block()</ref>; it does not enter the main loop or process other messages, it simply waits for the reply in question.</para><para>If the pending call is already completed, this function returns immediately.</para><para><xrefsect id="todo_1_todo000045"><xreftitle>Todo</xreftitle><xrefdescription><para>when you start blocking, the timeout is reset, but it should really only use time remaining since the pending call was created. This requires storing timestamps instead of intervals in the timeout</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pending</parametername>
</parameternamelist>
<parameterdescription>
<para>the pending call </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-pending-call.c" line="737" column="1" bodyfile="dbus/dbus-pending-call.c" bodystart="737" bodyend="742"/>
        <references refid="group__DBusConnectionInternals_1gad5e725e66dc16a411544e25675fb9fba" compoundref="dbus-connection_8c" startline="2379" endline="2550">_dbus_connection_block_pending_call</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusConnection_1ga8d6431f17a9e53c9446d87c2ba8409f0" compoundref="dbus-connection_8c" startline="3535" endline="3592">dbus_connection_send_with_reply_and_block</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusPendingCall_1ga95614dad0ada70e3a20d9878339e3109" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_pending_call_allocate_data_slot</definition>
        <argsstring>(dbus_int32_t *slot_p)</argsstring>
        <name>dbus_pending_call_allocate_data_slot</name>
        <param>
          <type><ref refid="group__DBusTypes_1gab18afa60e9b17b6e322735bda3d863d8" kindref="member">dbus_int32_t</ref> *</type>
          <declname>slot_p</declname>
        </param>
        <briefdescription>
<para>Allocates an integer ID to be used for storing application-specific data on any <ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The allocated ID may then be used with <ref refid="group__DBusPendingCall_1ga9295e7e602c41c6501b69bc995907e1b" kindref="member">dbus_pending_call_set_data()</ref> and <ref refid="group__DBusPendingCall_1ga5749f73b7ec7a8fe4f2e6a839e292806" kindref="member">dbus_pending_call_get_data()</ref>. The passed-in slot must be initialized to -1, and is filled in with the slot ID. If the passed-in slot is not -1, it&apos;s assumed to be already allocated, and its refcount is incremented.</para><para>The allocated slot is global, i.e. all <ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> objects will have a slot with the given integer ID reserved.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slot_p</parametername>
</parameternamelist>
<parameterdescription>
<para>address of a global variable storing the slot </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on failure (no memory) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-pending-call.c" line="759" column="1" bodyfile="dbus/dbus-pending-call.c" bodystart="759" bodyend="765"/>
        <references refid="group__DBusDataSlot_1gaf61f2bd0148bace4f67a2d6d97b26ea9" compoundref="dbus-dataslot_8c" startline="69" endline="140">_dbus_data_slot_allocator_alloc</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusPendingCallInternals_1ga3f2300d7a768783bc2fae0991bcc55df" compoundref="dbus-pending-call_8c" startline="109" endline="161">_dbus_pending_call_new_unlocked</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusPendingCall_1ga1eb6f342bba71b01266629f80be84617" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>DBUS_EXPORT void dbus_pending_call_free_data_slot</definition>
        <argsstring>(dbus_int32_t *slot_p)</argsstring>
        <name>dbus_pending_call_free_data_slot</name>
        <param>
          <type><ref refid="group__DBusTypes_1gab18afa60e9b17b6e322735bda3d863d8" kindref="member">dbus_int32_t</ref> *</type>
          <declname>slot_p</declname>
        </param>
        <briefdescription>
<para>Deallocates a global ID for <ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> data slots. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="group__DBusPendingCall_1ga5749f73b7ec7a8fe4f2e6a839e292806" kindref="member">dbus_pending_call_get_data()</ref> and <ref refid="group__DBusPendingCall_1ga9295e7e602c41c6501b69bc995907e1b" kindref="member">dbus_pending_call_set_data()</ref> may no longer be used with this slot. Existing data stored on existing <ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> objects will be freed when the <ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> is finalized, but may not be retrieved (and may only be replaced if someone else reallocates the slot). When the refcount on the passed-in slot reaches 0, it is set to -1.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slot_p</parametername>
</parameternamelist>
<parameterdescription>
<para>address storing the slot to deallocate </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-pending-call.c" line="779" column="1" bodyfile="dbus/dbus-pending-call.c" bodystart="779" bodyend="785"/>
        <references refid="group__DBusDataSlot_1ga059c50a24cd9fc984e918e6159841633" compoundref="dbus-dataslot_8c" startline="154" endline="190">_dbus_data_slot_allocator_free</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusPendingCallInternals_1ga3f2300d7a768783bc2fae0991bcc55df" compoundref="dbus-pending-call_8c" startline="109" endline="161">_dbus_pending_call_new_unlocked</referencedby>
        <referencedby refid="group__DBusPendingCallInternals_1ga9d8987da3747604d370ffec2c5e1e10a" compoundref="dbus-pending-call_8c" startline="394" endline="403">_dbus_pending_call_ref_unlocked</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusPendingCall_1ga9295e7e602c41c6501b69bc995907e1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>DBUS_EXPORT dbus_bool_t dbus_pending_call_set_data</definition>
        <argsstring>(DBusPendingCall *pending, dbus_int32_t slot, void *data, DBusFreeFunction free_data_func)</argsstring>
        <name>dbus_pending_call_set_data</name>
        <param>
          <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> *</type>
          <declname>pending</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1gab18afa60e9b17b6e322735bda3d863d8" kindref="member">dbus_int32_t</ref></type>
          <declname>slot</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref></type>
          <declname>free_data_func</declname>
        </param>
        <briefdescription>
<para>Stores a pointer on a <ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref>, along with an optional function to be used for freeing the data when the data is set again, or when the pending call is finalized. </para>        </briefdescription>
        <detaileddescription>
<para>The slot number must have been allocated with <ref refid="group__DBusPendingCall_1ga95614dad0ada70e3a20d9878339e3109" kindref="member">dbus_pending_call_allocate_data_slot()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pending</parametername>
</parameternamelist>
<parameterdescription>
<para>the pending_call </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slot</parametername>
</parameternamelist>
<parameterdescription>
<para>the slot number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to store </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_data_func</parametername>
</parameternamelist>
<parameterdescription>
<para>finalizer function for the data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if there was enough memory to store the data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-pending-call.c" line="801" column="1" bodyfile="dbus/dbus-pending-call.c" bodystart="801" bodyend="816"/>
        <references refid="group__DBusPendingCallInternals_1ga7d4196ca35b8df842c05a02dbb71c269" compoundref="dbus-pending-call_8c" startline="502" endline="528">_dbus_pending_call_set_data_unlocked</references>
        <references refid="structDBusPendingCall_1adaee5e70f04e503f25b8c4202fd4747f" compoundref="dbus-pending-call_8c" startline="70">DBusPendingCall::connection</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusPendingCall_1ga5749f73b7ec7a8fe4f2e6a839e292806" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>DBUS_EXPORT void * dbus_pending_call_get_data</definition>
        <argsstring>(DBusPendingCall *pending, dbus_int32_t slot)</argsstring>
        <name>dbus_pending_call_get_data</name>
        <param>
          <type><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref> *</type>
          <declname>pending</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1gab18afa60e9b17b6e322735bda3d863d8" kindref="member">dbus_int32_t</ref></type>
          <declname>slot</declname>
        </param>
        <briefdescription>
<para>Retrieves data previously set with <ref refid="group__DBusPendingCall_1ga9295e7e602c41c6501b69bc995907e1b" kindref="member">dbus_pending_call_set_data()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The slot must still be allocated (must not have been freed).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pending</parametername>
</parameternamelist>
<parameterdescription>
<para>the pending_call </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slot</parametername>
</parameternamelist>
<parameterdescription>
<para>the slot to get data from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the data, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if not found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-pending-call.c" line="827" column="1" bodyfile="dbus/dbus-pending-call.c" bodystart="827" bodyend="841"/>
        <references refid="group__DBusDataSlot_1ga43f741229f0c38788442601e2750ec66" compoundref="dbus-dataslot_8c" startline="285" endline="308">_dbus_data_slot_list_get</references>
        <references refid="structDBusPendingCall_1adaee5e70f04e503f25b8c4202fd4747f" compoundref="dbus-pending-call_8c" startline="70">DBusPendingCall::connection</references>
        <references refid="group__DBusPendingCallInternals_1ga99fcbae5b8f2ed2cc019cab85f63d4e4" compoundref="dbus-pending-call_8c" startline="53">CONNECTION_LOCK</references>
        <references refid="group__DBusPendingCallInternals_1gab21a3014fa3cacf2a580e079321abc33" compoundref="dbus-pending-call_8c" startline="57">CONNECTION_UNLOCK</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusPendingCall_1ad1b1c044ae4f9f94b05b4a5eb2f3917a" compoundref="dbus-pending-call_8c" startline="66">DBusPendingCall::slot_list</references>
        <referencedby refid="group__DBusPendingCallInternals_1ga6b10d157242e540fd18bd3db733dab5c" compoundref="dbus-pending-call_8c" startline="204" endline="218">_dbus_pending_call_complete</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>mode:<sp/>C;<sp/>c-file-style:<sp/>&quot;gnu&quot;;<sp/>indent-tabs-mode:<sp/>nil;<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>dbus-pending-call.h<sp/>Object<sp/>representing<sp/>a<sp/>call<sp/>in<sp/>progress.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2002,<sp/>2003<sp/>Red<sp/>Hat<sp/>Inc.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Academic<sp/>Free<sp/>License<sp/>version<sp/>2.1</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>Street,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA<sp/><sp/>02110-1301<sp/><sp/>USA</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined<sp/>(DBUS_INSIDE_DBUS_H)<sp/>&amp;&amp;<sp/>!defined<sp/>(DBUS_COMPILATION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;Only<sp/>&lt;dbus/dbus.h&gt;<sp/>can<sp/>be<sp/>included<sp/>directly,<sp/>this<sp/>file<sp/>may<sp/>disappear<sp/>or<sp/>change<sp/>contents.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DBUS_PENDING_CALL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DBUS_PENDING_CALL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dbus/dbus-macros.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dbus/dbus-types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dbus/dbus-connection.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><ref refid="group__DBusMacros_1ga875146b01015e9ced22b25d76d549ab2" kindref="member">DBUS_BEGIN_DECLS</ref></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="group__DBusPendingCall_1ga21384c9c5b0da54f7d0a92012522f213" refkind="member"><highlight class="preprocessor">#define<sp/>DBUS_TIMEOUT_INFINITE<sp/>((int)<sp/>0x7fffffff)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="group__DBusPendingCall_1gabdc138a303699e88756d6c5988a16b05" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DBUS_TIMEOUT_USE_DEFAULT<sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref>*<sp/><ref refid="group__DBusPendingCall_1ga334f6c6621583e15fdaf1a3f93dd2221" kindref="member">dbus_pending_call_ref</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pending);</highlight></codeline>
<codeline lineno="46"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCall_1gadaba15a74ba4925cdef52d4791cd3147" kindref="member">dbus_pending_call_unref</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pending);</highlight></codeline>
<codeline lineno="48"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><sp/><ref refid="group__DBusPendingCall_1ga16b67b418b1dc27cfdda6b20f7447670" kindref="member">dbus_pending_call_set_notify</ref><sp/><sp/><sp/><sp/>(<ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pending,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusConnection_1ga0934446fa9009211ca180fc1a01813b4" kindref="member">DBusPendingCallNotifyFunction</ref><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*user_data,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_user_data);</highlight></codeline>
<codeline lineno="53"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCall_1ga6530d18f891d3ca5f5df87ea7c2b155c" kindref="member">dbus_pending_call_cancel</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pending);</highlight></codeline>
<codeline lineno="55"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><sp/><ref refid="group__DBusPendingCall_1gacbf33ae8a1cc125628f9ea44d175c159" kindref="member">dbus_pending_call_get_completed</ref><sp/>(<ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pending);</highlight></codeline>
<codeline lineno="57"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><ref refid="structDBusMessage" kindref="compound">DBusMessage</ref>*<sp/><ref refid="group__DBusPendingCall_1ga5a738928c2369fef093ce00658903d06" kindref="member">dbus_pending_call_steal_reply</ref><sp/><sp/><sp/>(<ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pending);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCall_1ga67b99f749a7f477c7b5d70f2acee5452" kindref="member">dbus_pending_call_block</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pending);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><ref refid="group__DBusPendingCall_1ga95614dad0ada70e3a20d9878339e3109" kindref="member">dbus_pending_call_allocate_data_slot</ref><sp/>(<ref refid="group__DBusTypes_1gab18afa60e9b17b6e322735bda3d863d8" kindref="member">dbus_int32_t</ref><sp/><sp/><sp/><sp/><sp/>*slot_p);</highlight></codeline>
<codeline lineno="64"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCall_1ga1eb6f342bba71b01266629f80be84617" kindref="member">dbus_pending_call_free_data_slot</ref><sp/><sp/><sp/><sp/><sp/>(<ref refid="group__DBusTypes_1gab18afa60e9b17b6e322735bda3d863d8" kindref="member">dbus_int32_t</ref><sp/><sp/><sp/><sp/><sp/>*slot_p);</highlight></codeline>
<codeline lineno="66"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref><sp/><ref refid="group__DBusPendingCall_1ga9295e7e602c41c6501b69bc995907e1b" kindref="member">dbus_pending_call_set_data</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref><sp/><sp/>*pending,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1gab18afa60e9b17b6e322735bda3d863d8" kindref="member">dbus_int32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>slot,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusMemory_1ga061bcded226d76c7d7de35beaa165cb5" kindref="member">DBusFreeFunction</ref><sp/><sp/>free_data_func);</highlight></codeline>
<codeline lineno="71"><highlight class="normal">DBUS_EXPORT</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusPendingCall_1ga5749f73b7ec7a8fe4f2e6a839e292806" kindref="member">dbus_pending_call_get_data</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structDBusPendingCall" kindref="compound">DBusPendingCall</ref><sp/><sp/>*pending,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__DBusTypes_1gab18afa60e9b17b6e322735bda3d863d8" kindref="member">dbus_int32_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>slot);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><ref refid="group__DBusMacros_1gae4a9263a43f8220f6e1c0fd07cf6e59a" kindref="member">DBUS_END_DECLS</ref></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DBUS_PENDING_CALL_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="dbus/dbus-pending-call.h"/>
  </compounddef>
</doxygen>
