<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="group__DBusSysdeps" kind="group">
    <compoundname>DBusSysdeps</compoundname>
    <title>Internal system-dependent API</title>
    <innerclass refid="structDBusAtomic" prot="public">DBusAtomic</innerclass>
    <innerclass refid="structDBusPollFD" prot="public">DBusPollFD</innerclass>
    <innerclass refid="structDBusStat" prot="public">DBusStat</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__DBusSysdeps_1gab77d7c590819f95d97f78c5544e714c4" prot="public" static="no">
        <name>DBusSystemLogSeverity</name>
        <enumvalue id="group__DBusSysdeps_1ggab77d7c590819f95d97f78c5544e714c4a301e4e4ce297b3824eb5a260cd4ef120" prot="public">
          <name>DBUS_SYSTEM_LOG_INFO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusSysdeps_1ggab77d7c590819f95d97f78c5544e714c4a7eff36b9cec37560437999185fcd4938" prot="public">
          <name>DBUS_SYSTEM_LOG_WARNING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusSysdeps_1ggab77d7c590819f95d97f78c5544e714c4a1eede8622c2bbc079788bdbeec3f4d63" prot="public">
          <name>DBUS_SYSTEM_LOG_SECURITY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__DBusSysdeps_1ggab77d7c590819f95d97f78c5544e714c4a0b1a66022d4cc3fa70b39ede634c9fa0" prot="public">
          <name>DBUS_SYSTEM_LOG_FATAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="453" column="1" bodyfile="dbus/dbus-sysdeps.h" bodystart="453" bodyend="458"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__DBusSysdeps_1ga1eff6303266888ec466cddba6c03aa40" prot="public" static="no">
        <type>unsigned long</type>
        <definition>typedef unsigned long dbus_pid_t</definition>
        <argsstring></argsstring>
        <name>dbus_pid_t</name>
        <briefdescription>
<para>A process ID. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="96" column="1" bodyfile="dbus/dbus-sysdeps.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusSysdeps_1ga186e987b700f9ddc6cea8aa0db82b151" prot="public" static="no">
        <type>unsigned long</type>
        <definition>typedef unsigned long dbus_uid_t</definition>
        <argsstring></argsstring>
        <name>dbus_uid_t</name>
        <briefdescription>
<para>A user ID. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="98" column="1" bodyfile="dbus/dbus-sysdeps.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusSysdeps_1ga2f5c2e418b81ec2a86594f56ec6d7627" prot="public" static="no">
        <type>unsigned long</type>
        <definition>typedef unsigned long dbus_gid_t</definition>
        <argsstring></argsstring>
        <name>dbus_gid_t</name>
        <briefdescription>
<para>A group ID. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="100" column="1" bodyfile="dbus/dbus-sysdeps.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusSysdeps_1ga208bb797a458b9cc721b317d9c95d233" prot="public" static="no">
        <type>struct <ref refid="structDBusAtomic" kindref="compound">DBusAtomic</ref></type>
        <definition>typedef struct DBusAtomic DBusAtomic</definition>
        <argsstring></argsstring>
        <name>DBusAtomic</name>
        <briefdescription>
<para>Opaque type representing an atomically-modifiable integer that can be used from multiple threads. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="217" column="1" bodyfile="dbus/dbus-sysdeps.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusSysdeps_1ga54409fb809f59d2b497592c49df04c52" prot="public" static="no">
        <type>struct <ref refid="structDBusDirIter" kindref="compound">DBusDirIter</ref></type>
        <definition>typedef struct DBusDirIter DBusDirIter</definition>
        <argsstring></argsstring>
        <name>DBusDirIter</name>
        <briefdescription>
<para>Opaque type for reading a directory listing. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="347" column="1" bodyfile="dbus/dbus-sysdeps.h" bodystart="350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusSysdeps_1gad53562d2dfbcd5b0132140a958d9efe6" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(*  DBusSignalHandler) (int sig)</definition>
        <argsstring>)(int sig)</argsstring>
        <name>DBusSignalHandler</name>
        <briefdescription>
<para>A UNIX signal handler. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="443" column="1" bodyfile="dbus/dbus-sysdeps.h" bodystart="443" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusSysdeps_1ga24015a2f75b94c1307360755ce97f869" prot="public" static="no">
        <type>union <ref refid="unionDBusGUID" kindref="compound">DBusGUID</ref></type>
        <definition>typedef union DBusGUID DBusGUID</definition>
        <argsstring></argsstring>
        <name>DBusGUID</name>
        <briefdescription>
<para>Type representing a universally unique ID. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000063"><xreftitle>Todo</xreftitle><xrefdescription><para>rename to UUID instead of GUID </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="502" column="1" bodyfile="dbus/dbus-sysdeps.h" bodystart="509" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__DBusSysdeps_1ga064d89fe6400aac228895eea96117769" prot="public" static="no">
        <type>struct DBusRLimit</type>
        <definition>typedef struct DBusRLimit DBusRLimit</definition>
        <argsstring></argsstring>
        <name>DBusRLimit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="557" column="1" bodyfile="dbus/dbus-sysdeps.h" bodystart="567" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__DBusSysdeps_1ga83c51771d3c4e612522bd5ad72e6ad7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_abort</definition>
        <argsstring>(void)</argsstring>
        <name>_dbus_abort</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Aborts the program with SIGABRT (dumping core). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.c" line="77" column="1" bodyfile="dbus/dbus-sysdeps.c" bodystart="77" bodyend="93"/>
        <references refid="group__DBusSysdeps_1ga8646ab2ef727fcc862c7904113c88a8d" compoundref="dbus-sysdeps-unix_8c" startline="3133" endline="3160">_dbus_print_backtrace</references>
        <references refid="group__DBusSysdeps_1gab846071a4de54cb7e518654f9375313a" compoundref="dbus-sysdeps_8c" startline="185" endline="193">_dbus_getenv</references>
        <references refid="group__DBusSysdeps_1ga1b30aa55e8758ed6e1b62e0f86866543" compoundref="dbus-sysdeps-unix_8c" startline="2501" endline="2504">_dbus_pid_for_log</references>
        <references refid="group__DBusSysdeps_1ga1153b4669819148af6b3f6f2b7c9183a" compoundref="dbus-sysdeps-unix_8c" startline="2870" endline="2888">_dbus_sleep_milliseconds</references>
        <references refid="group__DBusSysdeps_1ga203e3257b50597a8fe7757c920474a20" compoundref="dbus-sysdeps-unix_8c" startline="2961" endline="2964">_dbus_exit</references>
        <referencedby refid="group__DBusInternalsUtils_1gabea2c16d6d3fe7c4eb5b9496fc877f84" compoundref="dbus-internals_8c" startline="230" endline="247">_dbus_warn</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1ga63f2f8a068454b781f214ba596e313b4" compoundref="dbus-internals_8c" startline="258" endline="277">_dbus_warn_check_failed</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1ga9912f2c86e49357eb9729729dd46f50d" compoundref="dbus-internals_8c" startline="912" endline="924">_dbus_real_assert</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1ga3de125028afc39ab16e6585add8ad181" compoundref="dbus-internals_8c" startline="937" endline="944">_dbus_real_assert_not_reached</referencedby>
        <referencedby refid="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" compoundref="dbus-memory_8c" startline="461" endline="516">dbus_malloc</referencedby>
        <referencedby refid="group__DBusMemory_1gaa02722b030a091f6c14c4cb11a593623" compoundref="dbus-memory_8c" startline="531" endline="588">dbus_malloc0</referencedby>
        <referencedby refid="group__DBusMemory_1ga2d505f2960ccf343042d363170b27f9c" compoundref="dbus-memory_8c" startline="601" endline="692">dbus_realloc</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga02da720105c2a2397b7c687c5ca81174" compoundref="dbus-sysdeps-win_8c" startline="583" endline="644">_dbus_write_socket_two</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga3ecdae905f2d9e95fd35891b20f06532" compoundref="dbus-sysdeps-win_8c" startline="2280" endline="2315">_dbus_get_tmpdir</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gab846071a4de54cb7e518654f9375313a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * _dbus_getenv</definition>
        <argsstring>(const char *varname)</argsstring>
        <name>_dbus_getenv</name>
        <param>
          <type>const char *</type>
          <declname>varname</declname>
        </param>
        <briefdescription>
<para>Wrapper for getenv(). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>varname</parametername>
</parameternamelist>
<parameterdescription>
<para>name of environment variable </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value of environment variable or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if unset </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.c" line="185" column="1" bodyfile="dbus/dbus-sysdeps.c" bodystart="185" bodyend="193"/>
        <references refid="group__DBusSysdeps_1ga6c14c6bf4dd98b3fe3a114e9f5630148" compoundref="dbus-sysdeps-unix_8c" startline="4127" endline="4170">_dbus_check_setuid</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusSysdeps_1ga83c51771d3c4e612522bd5ad72e6ad7a" compoundref="dbus-sysdeps_8c" startline="77" endline="93">_dbus_abort</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga3cc5a5734416858fa58f3166ed181a64" compoundref="dbus-sysdeps-unix_8c" startline="3900" endline="3963">_dbus_append_keyring_directory_for_credentials</referencedby>
        <referencedby refid="group__DBusSysdeps_1gaca61af8681a48862835ea8cfd263f5ab" compoundref="dbus-sysdeps-util-unix_8c" startline="85" endline="165">_dbus_become_daemon</referencedby>
        <referencedby refid="group__DBusSysdeps_1gabc4712c0db91f11854cdd933027355af" compoundref="dbus-sysdeps-unix_8c" startline="3574" endline="3663">_dbus_get_autolaunch_address</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga079d34a9d90759e6b3ebebab424c696e" compoundref="dbus-sysdeps-util-unix_8c" startline="1309" endline="1379">_dbus_get_standard_session_servicedirs</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1ga3de125028afc39ab16e6585add8ad181" compoundref="dbus-internals_8c" startline="937" endline="944">_dbus_real_assert_not_reached</referencedby>
        <referencedby refid="group__DBusServerLaunchd_1ga5d09a40275e9a28d35ef3474875487a2" compoundref="dbus-server-launchd_8c" startline="66" endline="209">_dbus_server_new_for_launchd</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1gaed0b5af565252185dedf99df5da8efc5" compoundref="dbus-spawn-win_8c" startline="644" endline="756">_dbus_spawn_async_with_babysitter</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1ga63f2f8a068454b781f214ba596e313b4" compoundref="dbus-internals_8c" startline="258" endline="277">_dbus_warn_check_failed</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga38d9b871ec4fb30371d1187d8c9d3ef9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_clearenv</definition>
        <argsstring>(void)</argsstring>
        <name>_dbus_clearenv</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Wrapper for clearenv(). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.c" line="201" column="1" bodyfile="dbus/dbus-sysdeps.c" bodystart="201" bodyend="215"/>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga9393ded03e3b9812e4ba99b437ea992d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_split_paths_and_append</definition>
        <argsstring>(DBusString *dirs, const char *suffix, DBusList **dir_list)</argsstring>
        <name>_dbus_split_paths_and_append</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>dirs</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>suffix</declname>
        </param>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>dir_list</declname>
        </param>
        <briefdescription>
<para>Split paths into a list of char strings. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dirs</parametername>
</parameternamelist>
<parameterdescription>
<para>string with pathes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>suffix</parametername>
</parameternamelist>
<parameterdescription>
<para>string concated to each path in dirs </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir_list</parametername>
</parameternamelist>
<parameterdescription>
<para>contains a list of splitted pathes return <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> is pathes could be splittes,<ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> in oom case </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.c" line="226" column="1" bodyfile="dbus/dbus-sysdeps.c" bodystart="226" bodyend="337"/>
        <references refid="group__DBusSysdeps_1gae3a3fdc0c6001e367584bb016aca495d" compoundref="dbus-sysdeps-unix_8c" startline="2825" endline="2852">_dbus_concat_dir_and_file</references>
        <references refid="group__DBusList_1gad99045e79db46159babe69718f343053" compoundref="dbus-list_8c" startline="270" endline="280">_dbus_list_append</references>
        <references refid="group__DBusList_1gaa36d13444a050a923941c53650b72f9d" compoundref="dbus-list_8c" startline="542" endline="557">_dbus_list_clear</references>
        <references refid="group__DBusList_1ga8dd69084b53361803a765e6d53d5b9d1" compoundref="dbus-list_8c" startline="759" endline="774">_dbus_list_foreach</references>
        <references refid="group__DBusString_1gaa92c6ab2c5e24cbefef0a3f3fc76f98b" compoundref="dbus-string_8c" startline="1988" endline="2000">_dbus_string_chop_white</references>
        <references refid="group__DBusString_1ga7e509d4f959d19d96f83250e62287b06" compoundref="dbus-string_8c" startline="672" endline="685">_dbus_string_copy_data</references>
        <references refid="group__DBusString_1gaf5f13bc7ac7a623516930d26ae2589bf" compoundref="dbus-string_8c" startline="1374" endline="1388">_dbus_string_copy_len</references>
        <references refid="group__DBusString_1ga5fe47873b2838339107c3e1f03d1a703" compoundref="dbus-string_8c" startline="1603" endline="1611">_dbus_string_find</references>
        <references refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" compoundref="dbus-string_8c" startline="259" endline="277">_dbus_string_free</references>
        <references refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" compoundref="dbus-string_8c" startline="175" endline="178">_dbus_string_init</references>
        <references refid="group__DBusString_1ga374640ddfa2f0b27a8356e2379ba8043" compoundref="dbus-string_8c" startline="190" endline="197">_dbus_string_init_const</references>
        <references refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" compoundref="dbus-memory_8c" startline="701" endline="740">dbus_free</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusSysdeps_1ga079d34a9d90759e6b3ebebab424c696e" compoundref="dbus-sysdeps-util-unix_8c" startline="1309" endline="1379">_dbus_get_standard_session_servicedirs</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga5193160c3dc144af34b250cfb5b0a61e" compoundref="dbus-sysdeps-util-unix_8c" startline="1401" endline="1424">_dbus_get_standard_system_servicedirs</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga6c14c6bf4dd98b3fe3a114e9f5630148" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_check_setuid</definition>
        <argsstring>(void)</argsstring>
        <name>_dbus_check_setuid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para><bold>NOTE</bold>: If you modify this function, please also consider making the corresponding change in GLib. </para>        </briefdescription>
        <detaileddescription>
<para>See glib/gutils.c:g_check_setuid().</para><para>Returns TRUE if the current process was executed as setuid (or an equivalent __libc_enable_secure is available). See: <ulink url="http://osdir.com/ml/linux.lfs.hardened/2007-04/msg00032.html">http://osdir.com/ml/linux.lfs.hardened/2007-04/msg00032.html</ulink> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="90" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="4127" bodyend="4170"/>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusSysdeps_1gabc4712c0db91f11854cdd933027355af" compoundref="dbus-sysdeps-unix_8c" startline="3574" endline="3663">_dbus_get_autolaunch_address</referencedby>
        <referencedby refid="group__DBusSysdeps_1gab846071a4de54cb7e518654f9375313a" compoundref="dbus-sysdeps_8c" startline="185" endline="193">_dbus_getenv</referencedby>
        <referencedby refid="group__DBusKeyring_1ga6dad1720cf97ca6017c39330bec8d09f" compoundref="dbus-keyring_8c" startline="709" endline="838">_dbus_keyring_new_for_credentials</referencedby>
        <referencedby refid="group__DBusSysdepsUnix_1ga6425e8cf4a38c71a48309b436322d4db" compoundref="dbus-sysdeps-unix_8c" startline="3731" endline="3779">_dbus_lookup_launchd_socket</referencedby>
        <referencedby refid="group__DBusSysdeps_1gae7be34dbffb6458578e86c59a26d4fad" compoundref="dbus-sysdeps-pthread_8c" startline="278" endline="288">_dbus_threads_init_platform_specific</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gaae48868ce818ad287cdae113aabcc858" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char **</type>
        <definition>char** _dbus_get_environment</definition>
        <argsstring>(void)</argsstring>
        <name>_dbus_get_environment</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets a <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>-terminated list of key=value pairs from the environment. </para>        </briefdescription>
        <detaileddescription>
<para>Use dbus_free_string_array to free it.</para><para><simplesect kind="return"><para>the environment or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> on OOM </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="93" column="1" bodyfile="dbus/dbus-sysdeps-util.c" bodystart="49" bodyend="81"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusInternalsUtils_1ga0c4961ec784874f1b1f3aeccea8d3da1" compoundref="dbus-internals_8h" startline="145">_dbus_assert_not_reached</references>
        <references refid="group__DBusInternalsUtils_1ga6d80876bcae54f47cde79d0bce20321d" compoundref="dbus-sysdeps-util-unix_8c" startline="689" endline="695">_dbus_path_is_absolute</references>
        <references refid="group__DBusInternalsUtils_1ga9d00d77f6595b9d7ac1baf59d44bf58c" compoundref="dbus-internals_8c" startline="527" endline="544">_dbus_strdup</references>
        <references refid="group__DBusString_1ga84f39f1bf398697920637d2982248c72" compoundref="dbus-string_8c" startline="2151" endline="2177">_dbus_string_equal_c_str</references>
        <references refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" compoundref="dbus-string_8c" startline="259" endline="277">_dbus_string_free</references>
        <references refid="group__DBusString_1gafa79c1113fa75419dcc5ee4290e06608" compoundref="dbus-sysdeps-util-unix_8c" startline="1132" endline="1171">_dbus_string_get_dirname</references>
        <references refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" compoundref="dbus-string_8c" startline="175" endline="178">_dbus_string_init</references>
        <references refid="group__DBusString_1ga374640ddfa2f0b27a8356e2379ba8043" compoundref="dbus-string_8c" startline="190" endline="197">_dbus_string_init_const</references>
        <references refid="group__DBusInternalsUtils_1gabea2c16d6d3fe7c4eb5b9496fc877f84" compoundref="dbus-internals_8c" startline="230" endline="247">_dbus_warn</references>
        <references refid="group__DBusMemory_1gac200b2dbc8b3f6ecac4d42426fb97b40" compoundref="dbus-memory_8c" startline="749" endline="764">dbus_free_string_array</references>
        <references refid="group__DBusMemory_1gaba9d823abda7f4cadbaf5177d3b8b793" compoundref="dbus-memory_8h" startline="59">dbus_new0</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga701f9b3087c196404f66ff95b4ace0b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_close_socket</definition>
        <argsstring>(int fd, DBusError *error)</argsstring>
        <name>_dbus_close_socket</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Socket interface. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000062"><xreftitle>Todo</xreftitle><xrefdescription><para>Use for the file descriptors a struct<itemizedlist>
<listitem><para>struct DBusSocket{ int d; }; - instead of int to get type-safety which will be checked by the compiler.</para></listitem></itemizedlist>
</para></xrefdescription></xrefsect></para><para>Socket interface.</para><para>Should not be used on non-socket file descriptors or handles.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>the socket </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for an error </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if error is set</para></simplesect>
Socket interface.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>the file descriptor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>error object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if error set </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="127" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="204" bodyend="208"/>
        <references refid="group__DBusSysdepsUnix_1gac448479a1674e3b86cee9a4bdc7eba03" compoundref="dbus-sysdeps-unix_8c" startline="3025" endline="3042">_dbus_close</references>
        <references refid="group__DBusInternalsUtils_1ga2212aa0e5732257598a6597748c658e4" compoundref="dbus-sysdeps_8c" startline="614" endline="698">_dbus_error_from_errno</references>
        <references refid="group__DBusInternalsUtils_1ga56de84795d6df4162ad79b3be7af7588" compoundref="dbus-sysdeps_8c" startline="773" endline="776">_dbus_strerror_from_errno</references>
        <references refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="419">dbus_set_error</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusInternalsUtils_1ga525b5fdb780ddf6891918466965e6eb6" compoundref="dbus-spawn-win_8c" startline="149" endline="158">_dbus_babysitter_ref</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1ga3205e9f8672271794aeb9d451e2fcc4a" compoundref="dbus-spawn-win_8c" startline="187" endline="265">_dbus_babysitter_unref</referencedby>
        <referencedby refid="group__DBusServerUnix_1gaec00cdf4977b9bd33621df684406a779" compoundref="dbus-server-unix_8c" startline="54" endline="226">_dbus_server_listen_platform_specific</referencedby>
        <referencedby refid="group__DBusServerUnix_1ga21ce093bda6ce6c7f94d1d894b6b4358" compoundref="dbus-server-unix_8c" startline="237" endline="310">_dbus_server_new_for_domain_socket</referencedby>
        <referencedby refid="group__DBusServerSocket_1ga047d05c427e9a1fc5823fdfdcec5c5f6" compoundref="dbus-server-socket_8c" startline="391" endline="514">_dbus_server_new_for_tcp_socket</referencedby>
        <referencedby refid="group__DBusTransportUnix_1gada3df30a229b4d29ccf30af83bd88fcc" compoundref="dbus-transport-unix_8c" startline="58" endline="112">_dbus_transport_new_for_domain_socket</referencedby>
        <referencedby refid="group__DBusTransportSocket_1ga166dbf1d38f06321025408167d214860" compoundref="dbus-transport-socket_8c" startline="1348" endline="1416">_dbus_transport_new_for_tcp_socket</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga6fe72fa1c0484ac5594b08145ea19530" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int _dbus_read_socket</definition>
        <argsstring>(int fd, DBusString *buffer, int count)</argsstring>
        <name>_dbus_read_socket</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Like <ref refid="group__DBusSysdepsUnix_1gaf52cb1d5b9fc5611808ce32eff898c28" kindref="member">_dbus_read()</ref>, but only works on sockets so is available on Windows. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>the socket </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>string to append data to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>max amount of data to read </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of bytes appended to the string</para></simplesect>
Like <ref refid="group__DBusSysdepsUnix_1gaf52cb1d5b9fc5611808ce32eff898c28" kindref="member">_dbus_read()</ref>, but only works on sockets so is available on Windows.</para><para>Thin wrapper around the read() system call that appends the data it reads to the <ref refid="structDBusString" kindref="compound">DBusString</ref> buffer. It appends up to the given count, and returns the same value and same errno as read(). The only exception is that <ref refid="group__DBusSysdeps_1ga6fe72fa1c0484ac5594b08145ea19530" kindref="member">_dbus_read_socket()</ref> handles EINTR for you. <ref refid="group__DBusSysdeps_1ga6fe72fa1c0484ac5594b08145ea19530" kindref="member">_dbus_read_socket()</ref> can return ENOMEM, even though regular UNIX read doesn&apos;t.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>the file descriptor to read from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer to append data to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount of data to read </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of bytes read or -1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="129" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="220" bodyend="225"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusSysdepsUnix_1gaf52cb1d5b9fc5611808ce32eff898c28" compoundref="dbus-sysdeps-unix_8c" startline="628" endline="675">_dbus_read</references>
        <references refid="group__DBusString_1ga7a73fb373398606e6e1d0a86c4587a3c" compoundref="dbus-string_8c" startline="490" endline="501">_dbus_string_get_data_len</references>
        <references refid="group__DBusString_1ga8f13997d90ceed2f437706e6b7804d9b" compoundref="dbus-string_8c" startline="760" endline="771">_dbus_string_lengthen</references>
        <references refid="group__DBusString_1ga08c423b93c28dd746dcb93e0461ab95c" compoundref="dbus-string_8c" startline="802" endline="809">_dbus_string_set_length</references>
        <references refid="group__DBusMarshal_1ga3926bb35edf78d114cf0c341fe3258e0" compoundref="dbus-marshal-basic_8c" startline="1360" endline="1388">_dbus_verbose_bytes_of_string</references>
        <referencedby refid="group__DBusSysdeps_1ga9906c86bebb51358f0d8df6a42af30f6" compoundref="dbus-sysdeps-win_8c" startline="1936" endline="1977">_dbus_read_credentials_socket</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga14aa692ac7e9aab777b9f565c4b8933b" compoundref="dbus-sysdeps-unix_8c" startline="276" endline="433">_dbus_read_socket_with_unix_fds</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga346cadd9b0f7d0ae1cd19007b2e4c2de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int _dbus_write_socket</definition>
        <argsstring>(int fd, const DBusString *buffer, int start, int len)</argsstring>
        <name>_dbus_write_socket</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Like <ref refid="group__DBusSysdepsUnix_1ga3a789bcdfd3d468c2bf917fa5081b27f" kindref="member">_dbus_write()</ref>, but only supports sockets and is thus available on Windows. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>the file descriptor to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer to write data from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>the first byte in the buffer to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes to try to write </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of bytes written or -1 on error</para></simplesect>
Like <ref refid="group__DBusSysdepsUnix_1ga3a789bcdfd3d468c2bf917fa5081b27f" kindref="member">_dbus_write()</ref>, but only supports sockets and is thus available on Windows.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>the file descriptor to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer to write data from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>the first byte in the buffer to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes to try to write </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of bytes written or -1 on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="132" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="238" bodyend="261"/>
        <references refid="group__DBusInternalsUtils_1ga56de84795d6df4162ad79b3be7af7588" compoundref="dbus-sysdeps_8c" startline="773" endline="776">_dbus_strerror_from_errno</references>
        <references refid="group__DBusMarshal_1ga3926bb35edf78d114cf0c341fe3258e0" compoundref="dbus-marshal-basic_8c" startline="1360" endline="1388">_dbus_verbose_bytes_of_string</references>
        <references refid="group__DBusSysdepsUnix_1ga3a789bcdfd3d468c2bf917fa5081b27f" compoundref="dbus-sysdeps-unix_8c" startline="688" endline="711">_dbus_write</references>
        <referencedby refid="group__DBusSysdeps_1ga14aa692ac7e9aab777b9f565c4b8933b" compoundref="dbus-sysdeps-unix_8c" startline="276" endline="433">_dbus_read_socket_with_unix_fds</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga6cc9916aa1dde4d44072ee85b5691b5b" compoundref="dbus-sysdeps-win_8c" startline="1859" endline="1915">_dbus_send_credentials_socket</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga02da720105c2a2397b7c687c5ca81174" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int _dbus_write_socket_two</definition>
        <argsstring>(int fd, const DBusString *buffer1, int start1, int len1, const DBusString *buffer2, int start2, int len2)</argsstring>
        <name>_dbus_write_socket_two</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>buffer1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len1</declname>
        </param>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>buffer2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len2</declname>
        </param>
        <briefdescription>
<para>Like <ref refid="group__DBusSysdepsUnix_1ga506a183b1f6970d1bfca165ab3de4736" kindref="member">_dbus_write_two()</ref> but only works on sockets and is thus available on Windows. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>the file descriptor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer1</parametername>
</parameternamelist>
<parameterdescription>
<para>first buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start1</parametername>
</parameternamelist>
<parameterdescription>
<para>first byte to write in first buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len1</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to write from first buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer2</parametername>
</parameternamelist>
<parameterdescription>
<para>second buffer, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start2</parametername>
</parameternamelist>
<parameterdescription>
<para>first byte to write in second buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len2</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to write in second buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>total bytes written from both buffers, or -1 on error</para></simplesect>
Like <ref refid="group__DBusSysdepsUnix_1ga506a183b1f6970d1bfca165ab3de4736" kindref="member">_dbus_write_two()</ref> but only works on sockets and is thus available on Windows.</para><para>The return value is the number of bytes written in the first buffer, plus the number written in the second. If the first buffer is written successfully and an error occurs writing the second, the number of bytes in the first is returned (i.e. the error is ignored), on systems that don&apos;t have writev. Handles EINTR for you. The second buffer may be <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>the file descriptor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer1</parametername>
</parameternamelist>
<parameterdescription>
<para>first buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start1</parametername>
</parameternamelist>
<parameterdescription>
<para>first byte to write in first buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len1</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to write from first buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer2</parametername>
</parameternamelist>
<parameterdescription>
<para>second buffer, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start2</parametername>
</parameternamelist>
<parameterdescription>
<para>first byte to write in second buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len2</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to write in second buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>total bytes written from both buffers, or -1 on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="136" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="549" bodyend="603"/>
        <references refid="group__DBusSysdeps_1ga83c51771d3c4e612522bd5ad72e6ad7a" compoundref="dbus-sysdeps_8c" startline="77" endline="93">_dbus_abort</references>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusInternalsUtils_1ga0c4961ec784874f1b1f3aeccea8d3da1" compoundref="dbus-internals_8h" startline="145">_dbus_assert_not_reached</references>
        <references refid="group__DBusInternalsUtils_1ga3b56fdb9df58277ee69d9f56a73bf383" compoundref="dbus-internals_8h" startline="329">_DBUS_LOCK</references>
        <references refid="group__DBusInternalsUtils_1ga56de84795d6df4162ad79b3be7af7588" compoundref="dbus-sysdeps_8c" startline="773" endline="776">_dbus_strerror_from_errno</references>
        <references refid="group__DBusInternalsUtils_1ga1b7db80a2ea11235768ec8aa698df0a5" compoundref="dbus-internals_8h" startline="330">_DBUS_UNLOCK</references>
        <references refid="group__DBusSysdepsUnix_1ga506a183b1f6970d1bfca165ab3de4736" compoundref="dbus-sysdeps-unix_8c" startline="734" endline="799">_dbus_write_two</references>
        <references refid="group__DBusInternalsUtils_1gaec42589166158b1385d5f5439318cda2" compoundref="dbus-internals_8h" startline="179">_DBUS_ZERO</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusSysdeps_1ga14aa692ac7e9aab777b9f565c4b8933b" compoundref="dbus-sysdeps-unix_8c" startline="276" endline="433">_dbus_read_socket_with_unix_fds</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga14aa692ac7e9aab777b9f565c4b8933b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int _dbus_read_socket_with_unix_fds</definition>
        <argsstring>(int fd, DBusString *buffer, int count, int *fds, int *n_fds)</argsstring>
        <name>_dbus_read_socket_with_unix_fds</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>fds</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n_fds</declname>
        </param>
        <briefdescription>
<para>Like <ref refid="group__DBusSysdeps_1ga6fe72fa1c0484ac5594b08145ea19530" kindref="member">_dbus_read_socket()</ref> but also tries to read unix fds from the socket. </para>        </briefdescription>
        <detaileddescription>
<para>When there are more fds to read than space in the array passed this function will fail with ENOSPC.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>the socket </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>string to append data to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>max amount of data to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fds</parametername>
</parameternamelist>
<parameterdescription>
<para>array to place read file descriptors in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_fds</parametername>
</parameternamelist>
<parameterdescription>
<para>on input space in fds array, on output how many fds actually got read </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of bytes appended to string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="144" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="276" bodyend="433"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusSysdepsUnix_1ga000b1d83b0188e2db82d766b6665bb83" compoundref="dbus-sysdeps-unix_8c" startline="3003" endline="3015">_dbus_fd_set_close_on_exec</references>
        <references refid="group__DBusSysdeps_1ga6fe72fa1c0484ac5594b08145ea19530" compoundref="dbus-sysdeps-unix_8c" startline="220" endline="225">_dbus_read_socket</references>
        <references refid="group__DBusString_1ga7a73fb373398606e6e1d0a86c4587a3c" compoundref="dbus-string_8c" startline="490" endline="501">_dbus_string_get_data_len</references>
        <references refid="group__DBusString_1ga8f13997d90ceed2f437706e6b7804d9b" compoundref="dbus-string_8c" startline="760" endline="771">_dbus_string_lengthen</references>
        <references refid="group__DBusString_1ga08c423b93c28dd746dcb93e0461ab95c" compoundref="dbus-string_8c" startline="802" endline="809">_dbus_string_set_length</references>
        <references refid="group__DBusMarshal_1ga3926bb35edf78d114cf0c341fe3258e0" compoundref="dbus-marshal-basic_8c" startline="1360" endline="1388">_dbus_verbose_bytes_of_string</references>
        <references refid="group__DBusSysdeps_1ga346cadd9b0f7d0ae1cd19007b2e4c2de" compoundref="dbus-sysdeps-unix_8c" startline="238" endline="261">_dbus_write_socket</references>
        <references refid="group__DBusSysdeps_1ga02da720105c2a2397b7c687c5ca81174" compoundref="dbus-sysdeps-unix_8c" startline="549" endline="603">_dbus_write_socket_two</references>
        <references refid="group__DBusInternalsUtils_1gaec42589166158b1385d5f5439318cda2" compoundref="dbus-internals_8h" startline="179">_DBUS_ZERO</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gabcdf774b69a022d5d6771cd127a41bcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int _dbus_write_socket_with_unix_fds</definition>
        <argsstring>(int fd, const DBusString *buffer, int start, int len, const int *fds, int n_fds)</argsstring>
        <name>_dbus_write_socket_with_unix_fds</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>fds</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_fds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="149" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="436" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gaadbce91e0ff63d2a7895bae1639fba81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int _dbus_write_socket_with_unix_fds_two</definition>
        <argsstring>(int fd, const DBusString *buffer1, int start1, int len1, const DBusString *buffer2, int start2, int len2, const int *fds, int n_fds)</argsstring>
        <name>_dbus_write_socket_with_unix_fds_two</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>buffer1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len1</declname>
        </param>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>buffer2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len2</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>fds</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_fds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="155" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="457" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gabc28993ee2ec72dc86f3656a26f18430" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_socket_is_invalid</definition>
        <argsstring>(int fd)</argsstring>
        <name>_dbus_socket_is_invalid</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="165" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="606" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gaa3adf90f6e47d30eeacf0a27d1a09ee5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int _dbus_connect_tcp_socket</definition>
        <argsstring>(const char *host, const char *port, const char *family, DBusError *error)</argsstring>
        <name>_dbus_connect_tcp_socket</name>
        <param>
          <type>const char *</type>
          <declname>host</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>family</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Creates a socket and connects to a socket at the given host and port. </para>        </briefdescription>
        <detaileddescription>
<para>The connection fd is returned, and is set up as nonblocking.</para><para>This will set FD_CLOEXEC for the socket returned</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>host</parametername>
</parameternamelist>
<parameterdescription>
<para>the host name to connect to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>the port to connect to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>family</parametername>
</parameternamelist>
<parameterdescription>
<para>the address family to listen on, NULL for all </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for error code </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>connection file descriptor or -1 on error</para></simplesect>
The connection fd is returned, and is set up as nonblocking.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>host</parametername>
</parameternamelist>
<parameterdescription>
<para>the host name to connect to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>the port to connect to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>family</parametername>
</parameternamelist>
<parameterdescription>
<para>the address family to listen on, NULL for all </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for error code </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>connection file descriptor or -1 on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="167" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="1262" bodyend="1268"/>
        <references refid="group__DBusSysdepsUnix_1gac448479a1674e3b86cee9a4bdc7eba03" compoundref="dbus-sysdeps-unix_8c" startline="3025" endline="3042">_dbus_close</references>
        <references refid="group__DBusInternalsUtils_1ga2212aa0e5732257598a6597748c658e4" compoundref="dbus-sysdeps_8c" startline="614" endline="698">_dbus_error_from_errno</references>
        <references refid="group__DBusInternalsUtils_1ga56de84795d6df4162ad79b3be7af7588" compoundref="dbus-sysdeps_8c" startline="773" endline="776">_dbus_strerror_from_errno</references>
        <references refid="group__DBusString_1ga100c5ce0696822c5a4cfbdfaba674d96" compoundref="dbus-string_8c" startline="935" endline="948">_dbus_string_append</references>
        <references refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" compoundref="dbus-string_8c" startline="259" endline="277">_dbus_string_free</references>
        <references refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" compoundref="dbus-string_8c" startline="175" endline="178">_dbus_string_init</references>
        <references refid="group__DBusString_1ga374640ddfa2f0b27a8356e2379ba8043" compoundref="dbus-string_8c" startline="190" endline="197">_dbus_string_init_const</references>
        <references refid="group__DBusInternalsUtils_1gaec42589166158b1385d5f5439318cda2" compoundref="dbus-internals_8h" startline="179">_DBUS_ZERO</references>
        <references refid="group__DBusProtocol_1ga3fa04eb600edda4afc2dd9fe2e0f8b02" compoundref="dbus-protocol_8h" startline="367">DBUS_ERROR_BAD_ADDRESS</references>
        <references refid="group__DBusProtocol_1gacf5321b161193ad66d5bdf5c910a9792" compoundref="dbus-protocol_8h" startline="391">DBUS_ERROR_INVALID_ARGS</references>
        <references refid="group__DBusProtocol_1gac32eaf0b92f798307853cd4fe0cf11c2" compoundref="dbus-protocol_8h" startline="357">DBUS_ERROR_NO_MEMORY</references>
        <references refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="419">dbus_set_error</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga8eaa78f8111092e35aa482d908f5e4c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int _dbus_connect_tcp_socket_with_nonce</definition>
        <argsstring>(const char *host, const char *port, const char *family, const char *noncefile, DBusError *error)</argsstring>
        <name>_dbus_connect_tcp_socket_with_nonce</name>
        <param>
          <type>const char *</type>
          <declname>host</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>family</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>noncefile</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="171" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="1271" bodyend="1367"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gafdae31b3b61299dbaaccfcb1205a6f30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int _dbus_listen_tcp_socket</definition>
        <argsstring>(const char *host, const char *port, const char *family, DBusString *retport, int **fds_p, DBusError *error)</argsstring>
        <name>_dbus_listen_tcp_socket</name>
        <param>
          <type>const char *</type>
          <declname>host</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>family</declname>
        </param>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>retport</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>fds_p</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Creates a socket and binds it to the given path, then listens on the socket. </para>        </briefdescription>
        <detaileddescription>
<para>The socket is set to be nonblocking. In case of port=0 a random free port is used and returned in the port parameter. If inaddr_any is specified, the hostname is ignored.</para><para>This will set FD_CLOEXEC for the socket returned</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>host</parametername>
</parameternamelist>
<parameterdescription>
<para>the host name to listen on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>the port to listen on, if zero a free port will be used </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>family</parametername>
</parameternamelist>
<parameterdescription>
<para>the address family to listen on, NULL for all </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>retport</parametername>
</parameternamelist>
<parameterdescription>
<para>string to return the actual port listened on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fds_p</parametername>
</parameternamelist>
<parameterdescription>
<para>location to store returned file descriptors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for errors </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of listening file descriptors or -1 on error</para></simplesect>
The socket is set to be nonblocking. In case of port=0 a random free port is used and returned in the port parameter. If inaddr_any is specified, the hostname is ignored.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>host</parametername>
</parameternamelist>
<parameterdescription>
<para>the host name to listen on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>the port to listen on, if zero a free port will be used </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>family</parametername>
</parameternamelist>
<parameterdescription>
<para>the address family to listen on, NULL for all </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>retport</parametername>
</parameternamelist>
<parameterdescription>
<para>string to return the actual port listened on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fds_p</parametername>
</parameternamelist>
<parameterdescription>
<para>location to store returned file descriptors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for errors </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of listening file descriptors or -1 on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="176" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="1386" bodyend="1582"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusSysdepsUnix_1gac448479a1674e3b86cee9a4bdc7eba03" compoundref="dbus-sysdeps-unix_8c" startline="3025" endline="3042">_dbus_close</references>
        <references refid="group__DBusInternalsUtils_1ga2212aa0e5732257598a6597748c658e4" compoundref="dbus-sysdeps_8c" startline="614" endline="698">_dbus_error_from_errno</references>
        <references refid="group__DBusInternalsUtils_1ga56de84795d6df4162ad79b3be7af7588" compoundref="dbus-sysdeps_8c" startline="773" endline="776">_dbus_strerror_from_errno</references>
        <references refid="group__DBusString_1ga100c5ce0696822c5a4cfbdfaba674d96" compoundref="dbus-string_8c" startline="935" endline="948">_dbus_string_append</references>
        <references refid="group__DBusInternalsUtils_1gabea2c16d6d3fe7c4eb5b9496fc877f84" compoundref="dbus-internals_8c" startline="230" endline="247">_dbus_warn</references>
        <references refid="group__DBusInternalsUtils_1gaec42589166158b1385d5f5439318cda2" compoundref="dbus-internals_8h" startline="179">_DBUS_ZERO</references>
        <references refid="group__DBusProtocol_1ga3fa04eb600edda4afc2dd9fe2e0f8b02" compoundref="dbus-protocol_8h" startline="367">DBUS_ERROR_BAD_ADDRESS</references>
        <references refid="group__DBusProtocol_1gacf5321b161193ad66d5bdf5c910a9792" compoundref="dbus-protocol_8h" startline="391">DBUS_ERROR_INVALID_ARGS</references>
        <references refid="group__DBusProtocol_1ga445d7ad73da94c796ef441df2dcc3cc8" compoundref="dbus-protocol_8h" startline="365">DBUS_ERROR_IO_ERROR</references>
        <references refid="group__DBusProtocol_1gac32eaf0b92f798307853cd4fe0cf11c2" compoundref="dbus-protocol_8h" startline="357">DBUS_ERROR_NO_MEMORY</references>
        <references refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" compoundref="dbus-memory_8c" startline="701" endline="740">dbus_free</references>
        <references refid="group__DBusMemory_1ga2d505f2960ccf343042d363170b27f9c" compoundref="dbus-memory_8c" startline="601" endline="692">dbus_realloc</references>
        <references refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="419">dbus_set_error</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusServerSocket_1ga047d05c427e9a1fc5823fdfdcec5c5f6" compoundref="dbus-server-socket_8c" startline="391" endline="514">_dbus_server_new_for_tcp_socket</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga687f4393a365474ec16f02e40c418cce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int _dbus_accept</definition>
        <argsstring>(int listen_fd)</argsstring>
        <name>_dbus_accept</name>
        <param>
          <type>int</type>
          <declname>listen_fd</declname>
        </param>
        <briefdescription>
<para>Accepts a connection on a listening socket. </para>        </briefdescription>
        <detaileddescription>
<para>Handles EINTR for you.</para><para>This will enable FD_CLOEXEC for the returned socket.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listen_fd</parametername>
</parameternamelist>
<parameterdescription>
<para>the listen file descriptor </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the connection fd of the client, or -1 on error</para></simplesect>
Handles EINTR for you.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listen_fd</parametername>
</parameternamelist>
<parameterdescription>
<para>the listen file descriptor </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the connection fd of the client, or -1 on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="182" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="2029" bodyend="2073"/>
        <references refid="group__DBusSysdepsUnix_1ga000b1d83b0188e2db82d766b6665bb83" compoundref="dbus-sysdeps-unix_8c" startline="3003" endline="3015">_dbus_fd_set_close_on_exec</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga9906c86bebb51358f0d8df6a42af30f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_read_credentials_socket</definition>
        <argsstring>(int client_fd, DBusCredentials *credentials, DBusError *error)</argsstring>
        <name>_dbus_read_credentials_socket</name>
        <param>
          <type>int</type>
          <declname>client_fd</declname>
          <defname>handle</defname>
        </param>
        <param>
          <type><ref refid="structDBusCredentials" kindref="compound">DBusCredentials</ref> *</type>
          <declname>credentials</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Reads a single byte which must be nul (an error occurs otherwise), and reads unix credentials if available. </para>        </briefdescription>
        <detaileddescription>
<para>Clears the credentials object, then adds pid/uid if available, so any previous credentials stored in the object are lost.</para><para><ref refid="structDBusServer" kindref="compound">DBusServer</ref> makes the security assumption that the credentials returned by this method are the credentials that were active at the time the socket was opened. Do not add APIs to this method that would break that assumption.</para><para>In particular, it is incorrect to use any API of the form &quot;get the process ID at the other end of the connection, then
determine its uid, gid, or other credentials from the pid&quot; (e.g. looking in /proc on Linux). If we did that, we would be vulnerable to several attacks. A malicious process could queue up the rest of the authentication handshake and a malicious message that it should not be allowed to send, then race with the <ref refid="structDBusServer" kindref="compound">DBusServer</ref> to exec() a more privileged (e.g. setuid) binary that would have been allowed to send that message; or it could exit, and arrange for enough setuid processes to be started that its pid would be recycled for one of those processes with high probability; or it could fd-pass the connection to a more privileged process.</para><para>Return value indicates whether a byte was read, not whether we got valid credentials. On some systems, such as Linux, reading/writing the byte isn&apos;t actually required, but we do it anyway just to avoid multiple codepaths.</para><para>Fails if no byte is available, so you must select() first.</para><para>The point of the byte is that on some systems we have to use sendmsg()/recvmsg() to transmit credentials.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client_fd</parametername>
</parameternamelist>
<parameterdescription>
<para>the client file descriptor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>credentials</parametername>
</parameternamelist>
<parameterdescription>
<para>object to add client credentials to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>location to store error code </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success</para></simplesect>
Fills in pid/uid/gid with -1 if no credentials are available. Return value indicates whether a byte was read, not whether we got valid credentials. On some systems, such as Linux, reading/writing the byte isn&apos;t actually required, but we do it anyway just to avoid multiple codepaths.</para><para>Fails if no byte is available, so you must select() first.</para><para>The point of the byte is that on some systems we have to use sendmsg()/recvmsg() to transmit credentials.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>the client file descriptor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>credentials</parametername>
</parameternamelist>
<parameterdescription>
<para>struct to fill with credentials of client </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>location to store error code </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="185" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="1701" bodyend="1988"/>
        <references refid="group__DBusCredentials_1gab26eb5cb8d05139806cf06e99c4ec5b0" compoundref="dbus-credentials_8c" startline="204" endline="218">_dbus_credentials_add_adt_audit_data</references>
        <references refid="group__DBusCredentials_1gaad133a8d06af2a447307266a8425a9f8" compoundref="dbus-credentials_8c" startline="149" endline="154">_dbus_credentials_add_pid</references>
        <references refid="group__DBusCredentials_1ga9cec6da43e4be233d44f5bd60b071624" compoundref="dbus-credentials_8c" startline="164" endline="170">_dbus_credentials_add_unix_uid</references>
        <references refid="group__DBusCredentials_1ga9d2186a4cfa8a421c552ae4592b400f5" compoundref="dbus-credentials_8c" startline="180" endline="193">_dbus_credentials_add_windows_sid</references>
        <references refid="group__DBusCredentials_1ga40a5c7e37b10419e233a473dc7173f3c" compoundref="dbus-credentials_8c" startline="446" endline="455">_dbus_credentials_clear</references>
        <references refid="group__DBusInternalsUtils_1ga2212aa0e5732257598a6597748c658e4" compoundref="dbus-sysdeps_8c" startline="614" endline="698">_dbus_error_from_errno</references>
        <references refid="group__DBusSysdeps_1ga6fe72fa1c0484ac5594b08145ea19530" compoundref="dbus-sysdeps-win_8c" startline="379" endline="436">_dbus_read_socket</references>
        <references refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" compoundref="dbus-string_8c" startline="259" endline="277">_dbus_string_free</references>
        <references refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" compoundref="dbus-string_8c" startline="175" endline="178">_dbus_string_init</references>
        <references refid="group__DBusInternalsUtils_1gaec42589166158b1385d5f5439318cda2" compoundref="dbus-internals_8h" startline="179">_DBUS_ZERO</references>
        <references refid="group__DBusProtocol_1gabb62fd6340d0787fbd56ff8dd2f326c7" compoundref="dbus-protocol_8h" startline="355">DBUS_ERROR_FAILED</references>
        <references refid="group__DBusSysdeps_1gaf4553a43e3b8c0e43d9148a00dcc3fa4" compoundref="dbus-sysdeps_8h" startline="110">DBUS_PID_FORMAT</references>
        <references refid="group__DBusSysdeps_1ga4eb5f05dd6ad89caa4b0340e1cf0b8d9" compoundref="dbus-sysdeps_8h" startline="103">DBUS_PID_UNSET</references>
        <references refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="419">dbus_set_error</references>
        <references refid="group__DBusSysdeps_1gab657f0434f01b463891942f373f7b4a1" compoundref="dbus-sysdeps_8h" startline="112">DBUS_UID_FORMAT</references>
        <references refid="group__DBusSysdeps_1ga3d2f3fb32bb759cabe362ca2de383f7d" compoundref="dbus-sysdeps_8h" startline="105">DBUS_UID_UNSET</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga6cc9916aa1dde4d44072ee85b5691b5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_send_credentials_socket</definition>
        <argsstring>(int server_fd, DBusError *error)</argsstring>
        <name>_dbus_send_credentials_socket</name>
        <param>
          <type>int</type>
          <declname>server_fd</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Sends a single nul byte with our UNIX credentials as ancillary data. </para>        </briefdescription>
        <detaileddescription>
<para>Returns <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the data was successfully written. On systems that don&apos;t support sending credentials, just writes a byte, doesn&apos;t send any credentials. On some systems, such as Linux, reading/writing the byte isn&apos;t actually required, but we do it anyway just to avoid multiple codepaths.</para><para>Fails if no byte can be written, so you must select() first.</para><para>The point of the byte is that on some systems we have to use sendmsg()/recvmsg() to transmit credentials.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>server_fd</parametername>
</parameternamelist>
<parameterdescription>
<para>file descriptor for connection to server </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for error code </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the byte was sent </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="188" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="2008" bodyend="2017"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusInternalsUtils_1ga2212aa0e5732257598a6597748c658e4" compoundref="dbus-sysdeps_8c" startline="614" endline="698">_dbus_error_from_errno</references>
        <references refid="group__DBusInternalsUtils_1ga56de84795d6df4162ad79b3be7af7588" compoundref="dbus-sysdeps_8c" startline="773" endline="776">_dbus_strerror_from_errno</references>
        <references refid="group__DBusString_1ga6792a5c1725faa9d635d95f7a3b5bfae" compoundref="dbus-string_8c" startline="210" endline="234">_dbus_string_init_const_len</references>
        <references refid="group__DBusSysdeps_1ga346cadd9b0f7d0ae1cd19007b2e4c2de" compoundref="dbus-sysdeps-win_8c" startline="449" endline="482">_dbus_write_socket</references>
        <references refid="group__DBusProtocol_1ga445d7ad73da94c796ef441df2dcc3cc8" compoundref="dbus-protocol_8h" startline="365">DBUS_ERROR_IO_ERROR</references>
        <references refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="419">dbus_set_error</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gacecdbb00a3c8b63e821edae537ae3c7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_credentials_add_from_user</definition>
        <argsstring>(DBusCredentials *credentials, const DBusString *username)</argsstring>
        <name>_dbus_credentials_add_from_user</name>
        <param>
          <type><ref refid="structDBusCredentials" kindref="compound">DBusCredentials</ref> *</type>
          <declname>credentials</declname>
        </param>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>username</declname>
        </param>
        <briefdescription>
<para>Adds the credentials corresponding to the given username. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>credentials</parametername>
</parameternamelist>
<parameterdescription>
<para>credentials to fill in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>the username </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the username existed and we got some credentials</para></simplesect>
Used among other purposes to parses a desired identity provided from a client in the auth protocol. On UNIX this means parsing a UID, on Windows probably parsing an SID string.</para><para><xrefsect id="todo_1_todo000067"><xreftitle>Todo</xreftitle><xrefdescription><para>this is broken because it treats OOM and parse error the same way. Needs a <ref refid="structDBusError" kindref="compound">DBusError</ref>.</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>credentials</parametername>
</parameternamelist>
<parameterdescription>
<para>credentials to fill in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>the username </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the username existed and we got some credentials </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="191" column="1" bodyfile="dbus/dbus-sysdeps-win.c" bodystart="2049" bodyend="2054"/>
        <references refid="group__DBusCredentials_1ga9cec6da43e4be233d44f5bd60b071624" compoundref="dbus-credentials_8c" startline="164" endline="170">_dbus_credentials_add_unix_uid</references>
        <references refid="group__DBusCredentials_1ga9d2186a4cfa8a421c552ae4592b400f5" compoundref="dbus-credentials_8c" startline="180" endline="193">_dbus_credentials_add_windows_sid</references>
        <references refid="group__DBusInternalsUtils_1ga79b6c3cf0d735622b6af2795840f9d21" compoundref="dbus-userdb_8c" startline="336" endline="343">_dbus_user_database_get_system</references>
        <references refid="group__DBusInternalsUtils_1gaccf1d5b330707a1835dcf4ce49a29c8c" compoundref="dbus-userdb_8c" startline="676" endline="683">_dbus_user_database_get_username</references>
        <references refid="group__DBusInternalsUtils_1ga15df3b3fdaa4946f69ff87f3a9a03fe7" compoundref="dbus-userdb_8c" startline="306" endline="317">_dbus_user_database_lock_system</references>
        <references refid="group__DBusInternalsUtils_1ga468e1d62e1df24bb699c4a37fdfa274c" compoundref="dbus-userdb_8c" startline="323" endline="327">_dbus_user_database_unlock_system</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <references refid="structDBusUserInfo_1a2d9c74d29f371e391a79b81162050b2e" compoundref="dbus-sysdeps-unix_8h" startline="100">DBusUserInfo::uid</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga9d5493f8bd1c5577060c8c6dce44d09f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_credentials_add_from_current_process</definition>
        <argsstring>(DBusCredentials *credentials)</argsstring>
        <name>_dbus_credentials_add_from_current_process</name>
        <param>
          <type><ref refid="structDBusCredentials" kindref="compound">DBusCredentials</ref> *</type>
          <declname>credentials</declname>
        </param>
        <briefdescription>
<para>Adds the credentials of the current process to the passed-in credentials object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>credentials</parametername>
</parameternamelist>
<parameterdescription>
<para>credentials to add to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if no memory; does not properly roll back on failure, so only some credentials may have been added </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="193" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="2430" bodyend="2446"/>
        <references refid="group__DBusCredentials_1gaad133a8d06af2a447307266a8425a9f8" compoundref="dbus-credentials_8c" startline="149" endline="154">_dbus_credentials_add_pid</references>
        <references refid="group__DBusCredentials_1ga9cec6da43e4be233d44f5bd60b071624" compoundref="dbus-credentials_8c" startline="164" endline="170">_dbus_credentials_add_unix_uid</references>
        <references refid="group__DBusCredentials_1ga9d2186a4cfa8a421c552ae4592b400f5" compoundref="dbus-credentials_8c" startline="180" endline="193">_dbus_credentials_add_windows_sid</references>
        <references refid="group__DBusSysdepsUnix_1ga50438942c6e9f4027ea555a09d758ca3" compoundref="dbus-sysdeps-unix_8c" startline="2489" endline="2492">_dbus_geteuid</references>
        <references refid="group__DBusSysdeps_1ga870807b07f3b1c1a725eb9408edad147" compoundref="dbus-sysdeps-unix_8c" startline="2471" endline="2474">_dbus_getpid</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusCredentials_1ga63b2f88e91962510ed947bae98270818" compoundref="dbus-credentials_8c" startline="93" endline="108">_dbus_credentials_new_from_current_process</referencedby>
        <referencedby refid="group__DBusKeyring_1ga6dad1720cf97ca6017c39330bec8d09f" compoundref="dbus-keyring_8c" startline="709" endline="838">_dbus_keyring_new_for_credentials</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga095c54de3974c6d04c29ef86c6e06e35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_append_user_from_current_process</definition>
        <argsstring>(DBusString *str)</argsstring>
        <name>_dbus_append_user_from_current_process</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Append to the string the identity we would like to have when we authenticate, on UNIX this is the current process UID and on Windows something else, probably a Windows SID string. </para>        </briefdescription>
        <detaileddescription>
<para>No escaping is required, that is done in <ref refid="dbus-auth_8c_source" kindref="compound">dbus-auth.c</ref>. The username here need not be anything human-readable, it can be the machine-readable form i.e. a user id.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to append to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on no memory</para></simplesect>
No escaping is required, that is done in <ref refid="dbus-auth_8c_source" kindref="compound">dbus-auth.c</ref>. The username here need not be anything human-readable, it can be the machine-readable form i.e. a user id.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to append to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on no memory </para></simplesect>
<xrefsect id="todo_1_todo000060"><xreftitle>Todo</xreftitle><xrefdescription><para>to which class belongs this </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="194" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="2460" bodyend="2464"/>
        <references refid="group__DBusSysdepsUnix_1ga50438942c6e9f4027ea555a09d758ca3" compoundref="dbus-sysdeps-unix_8c" startline="2489" endline="2492">_dbus_geteuid</references>
        <references refid="group__DBusSysdeps_1ga870807b07f3b1c1a725eb9408edad147" compoundref="dbus-sysdeps-win_8c" startline="2122" endline="2125">_dbus_getpid</references>
        <references refid="group__DBusString_1ga100c5ce0696822c5a4cfbdfaba674d96" compoundref="dbus-string_8c" startline="935" endline="948">_dbus_string_append</references>
        <references refid="group__DBusString_1gaa63064881001085159c78204f70acde8" compoundref="dbus-sysdeps_8c" startline="392" endline="420">_dbus_string_append_uint</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusSysdeps_1ga3f073afc8ef8397471531baf513e1bb5" compoundref="dbus-sysdeps-win_8c" startline="2670" endline="2739">_dbus_read_local_machine_uuid</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga437470fc327b0169fc14a0b66a6e5278" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_parse_unix_user_from_config</definition>
        <argsstring>(const DBusString *username, dbus_uid_t *uid_p)</argsstring>
        <name>_dbus_parse_unix_user_from_config</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>username</declname>
        </param>
        <param>
          <type><ref refid="group__DBusSysdeps_1ga186e987b700f9ddc6cea8aa0db82b151" kindref="member">dbus_uid_t</ref> *</type>
          <declname>uid_p</declname>
        </param>
        <briefdescription>
<para>Parse a UNIX user from the bus config file. </para>        </briefdescription>
        <detaileddescription>
<para>On Windows, this should simply always fail (just return <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>the username text </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uid_p</parametername>
</parameternamelist>
<parameterdescription>
<para>place to return the uid </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="196" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="1035" bodyend="1040"/>
        <references refid="group__DBusInternalsUtils_1gaf07ee24eddcb3b0f85fa54196bc44fe1" compoundref="dbus-userdb-util_8c" startline="146" endline="150">_dbus_get_user_id</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga96da816095ec7fec07136a6019745bcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_parse_unix_group_from_config</definition>
        <argsstring>(const DBusString *groupname, dbus_gid_t *gid_p)</argsstring>
        <name>_dbus_parse_unix_group_from_config</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>groupname</declname>
        </param>
        <param>
          <type><ref refid="group__DBusSysdeps_1ga2f5c2e418b81ec2a86594f56ec6d7627" kindref="member">dbus_gid_t</ref> *</type>
          <declname>gid_p</declname>
        </param>
        <briefdescription>
<para>Parse a UNIX group from the bus config file. </para>        </briefdescription>
        <detaileddescription>
<para>On Windows, this should simply always fail (just return <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>groupname</parametername>
</parameternamelist>
<parameterdescription>
<para>the groupname text </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gid_p</parametername>
</parameternamelist>
<parameterdescription>
<para>place to return the gid </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="198" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="1051" bodyend="1055"/>
        <references refid="group__DBusInternalsUtils_1ga90657adefa9bbac9b35eee63dd46a854" compoundref="dbus-userdb-util_8c" startline="160" endline="188">_dbus_get_group_id</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga79647ec21c7edccd1510808ea0ca3779" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_unix_groups_from_uid</definition>
        <argsstring>(dbus_uid_t uid, dbus_gid_t **group_ids, int *n_group_ids)</argsstring>
        <name>_dbus_unix_groups_from_uid</name>
        <param>
          <type><ref refid="group__DBusSysdeps_1ga186e987b700f9ddc6cea8aa0db82b151" kindref="member">dbus_uid_t</ref></type>
          <declname>uid</declname>
        </param>
        <param>
          <type><ref refid="group__DBusSysdeps_1ga2f5c2e418b81ec2a86594f56ec6d7627" kindref="member">dbus_gid_t</ref> **</type>
          <declname>group_ids</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n_group_ids</declname>
        </param>
        <briefdescription>
<para>Gets all groups corresponding to the given UNIX user ID. </para>        </briefdescription>
        <detaileddescription>
<para>On UNIX, just calls <ref refid="group__DBusInternalsUtils_1gae9408936869314101f8ea13dfa5ba968" kindref="member">_dbus_groups_from_uid()</ref>. On Windows, should always fail since we don&apos;t know any UNIX groups.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uid</parametername>
</parameternamelist>
<parameterdescription>
<para>the UID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for array of group IDs </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_group_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for length of returned array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the UID existed and we got some credentials </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="200" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="1068" bodyend="1073"/>
        <references refid="group__DBusInternalsUtils_1gae9408936869314101f8ea13dfa5ba968" compoundref="dbus-userdb-util_8c" startline="388" endline="433">_dbus_groups_from_uid</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gaed2e025454364fbe31cd9b6538c9a936" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_unix_user_is_at_console</definition>
        <argsstring>(dbus_uid_t uid, DBusError *error)</argsstring>
        <name>_dbus_unix_user_is_at_console</name>
        <param>
          <type><ref refid="group__DBusSysdeps_1ga186e987b700f9ddc6cea8aa0db82b151" kindref="member">dbus_uid_t</ref></type>
          <declname>uid</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Checks to see if the UNIX user ID is at the console. </para>        </briefdescription>
        <detaileddescription>
<para>Should always fail on Windows (set the error to <ref refid="group__DBusProtocol_1ga33122bcaf8f5896ec222c755b6effb40" kindref="member">DBUS_ERROR_NOT_SUPPORTED</ref>).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uid</parametername>
</parameternamelist>
<parameterdescription>
<para>UID of person to check </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for errors </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if the UID is the same as the console user and there are no errors </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="203" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="1085" bodyend="1090"/>
        <references refid="group__DBusInternalsUtils_1gaa504db352a939909051a494d06c5b607" compoundref="dbus-userdb-util_8c" startline="49" endline="136">_dbus_is_console_user</references>
        <references refid="group__DBusProtocol_1ga33122bcaf8f5896ec222c755b6effb40" compoundref="dbus-protocol_8h" startline="369">DBUS_ERROR_NOT_SUPPORTED</references>
        <references refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="419">dbus_set_error</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga849177164bc5e73435104f57c631ed7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_unix_user_is_process_owner</definition>
        <argsstring>(dbus_uid_t uid)</argsstring>
        <name>_dbus_unix_user_is_process_owner</name>
        <param>
          <type><ref refid="group__DBusSysdeps_1ga186e987b700f9ddc6cea8aa0db82b151" kindref="member">dbus_uid_t</ref></type>
          <declname>uid</declname>
        </param>
        <briefdescription>
<para>Checks to see if the UNIX user ID matches the UID of the process. </para>        </briefdescription>
        <detaileddescription>
<para>Should always return <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on Windows.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uid</parametername>
</parameternamelist>
<parameterdescription>
<para>the UNIX user ID </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if this uid owns the process. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="205" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="1100" bodyend="1103"/>
        <references refid="group__DBusSysdepsUnix_1ga50438942c6e9f4027ea555a09d758ca3" compoundref="dbus-sysdeps-unix_8c" startline="2489" endline="2492">_dbus_geteuid</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga912d34a7e40b3a57864972e6d6ab65ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_windows_user_is_process_owner</definition>
        <argsstring>(const char *windows_sid)</argsstring>
        <name>_dbus_windows_user_is_process_owner</name>
        <param>
          <type>const char *</type>
          <declname>windows_sid</declname>
        </param>
        <briefdescription>
<para>Checks to see if the Windows user SID matches the owner of the process. </para>        </briefdescription>
        <detaileddescription>
<para>Should always return <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on UNIX.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>windows_sid</parametername>
</parameternamelist>
<parameterdescription>
<para>the Windows user SID </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if this user owns the process. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="206" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="1113" bodyend="1116"/>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga3cc5a5734416858fa58f3166ed181a64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_append_keyring_directory_for_credentials</definition>
        <argsstring>(DBusString *directory, DBusCredentials *credentials)</argsstring>
        <name>_dbus_append_keyring_directory_for_credentials</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>directory</declname>
        </param>
        <param>
          <type><ref refid="structDBusCredentials" kindref="compound">DBusCredentials</ref> *</type>
          <declname>credentials</declname>
        </param>
        <briefdescription>
<para>Appends the directory in which a keyring for the given credentials should be stored. </para>        </briefdescription>
        <detaileddescription>
<para>The credentials should have either a Windows or UNIX user in them. The directory should be an absolute path.</para><para>On UNIX the directory is ~/.dbus-keyrings while on Windows it should probably be something else, since the dotfile convention is not normal on Windows.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>directory</parametername>
</parameternamelist>
<parameterdescription>
<para>string to append directory to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>credentials</parametername>
</parameternamelist>
<parameterdescription>
<para>credentials the directory should be for</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on no memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="208" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="3900" bodyend="3963"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusSysdeps_1gae3a3fdc0c6001e367584bb016aca495d" compoundref="dbus-sysdeps-unix_8c" startline="2825" endline="2852">_dbus_concat_dir_and_file</references>
        <references refid="group__DBusCredentials_1gabfd7a1f681a91b45ba2f4e7461131827" compoundref="dbus-credentials_8c" startline="361" endline="366">_dbus_credentials_are_anonymous</references>
        <references refid="group__DBusCredentials_1ga462892f995f2932bf0eb3b843407e6d5" compoundref="dbus-credentials_8c" startline="268" endline="271">_dbus_credentials_get_unix_uid</references>
        <references refid="group__DBusSysdeps_1gab846071a4de54cb7e518654f9375313a" compoundref="dbus-sysdeps_8c" startline="185" endline="193">_dbus_getenv</references>
        <references refid="group__DBusInternalsUtils_1gabdd1dc47f44e3d6702c86c68da9a0173" compoundref="dbus-userdb_8c" startline="461" endline="493">_dbus_homedir_from_uid</references>
        <references refid="group__DBusString_1ga100c5ce0696822c5a4cfbdfaba674d96" compoundref="dbus-string_8c" startline="935" endline="948">_dbus_string_append</references>
        <references refid="group__DBusString_1ga3c10f0d1bcaa3b450025b9c6a8b901d7" compoundref="dbus-string_8c" startline="1282" endline="1293">_dbus_string_copy</references>
        <references refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" compoundref="dbus-string_8c" startline="259" endline="277">_dbus_string_free</references>
        <references refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" compoundref="dbus-string_8c" startline="175" endline="178">_dbus_string_init</references>
        <references refid="group__DBusString_1ga374640ddfa2f0b27a8356e2379ba8043" compoundref="dbus-string_8c" startline="190" endline="197">_dbus_string_init_const</references>
        <references refid="group__DBusString_1ga08c423b93c28dd746dcb93e0461ab95c" compoundref="dbus-string_8c" startline="802" endline="809">_dbus_string_set_length</references>
        <references refid="group__DBusInternalsUtils_1gabea2c16d6d3fe7c4eb5b9496fc877f84" compoundref="dbus-internals_8c" startline="230" endline="247">_dbus_warn</references>
        <references refid="group__DBusSysdeps_1ga3d2f3fb32bb759cabe362ca2de383f7d" compoundref="dbus-sysdeps_8h" startline="105">DBUS_UID_UNSET</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusKeyring_1ga6dad1720cf97ca6017c39330bec8d09f" compoundref="dbus-keyring_8c" startline="709" endline="838">_dbus_keyring_new_for_credentials</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gaa9d1f52c60fdbbfade50fe0136400890" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_daemon_is_session_bus_address_published</definition>
        <argsstring>(const char *scope)</argsstring>
        <name>_dbus_daemon_is_session_bus_address_published</name>
        <param>
          <type>const char *</type>
          <declname>scope</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="211" column="1" bodyfile="dbus/dbus-sysdeps-win.c" bodystart="2865" bodyend="2906"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gafa00b8cf76d8ede8ed0bd56440ca7285" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_daemon_publish_session_bus_address</definition>
        <argsstring>(const char *address, const char *shm_name)</argsstring>
        <name>_dbus_daemon_publish_session_bus_address</name>
        <param>
          <type>const char *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>shm_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="213" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="3967" bodyend="3971"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga7e2e5b6f5c628c850bc566a4345ebd15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_daemon_unpublish_session_bus_address</definition>
        <argsstring>(void)</argsstring>
        <name>_dbus_daemon_unpublish_session_bus_address</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="215" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="3975" bodyend="3978"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga06183453a52a6919619e85dc1812c9b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_socket_can_pass_unix_fd</definition>
        <argsstring>(int fd)</argsstring>
        <name>_dbus_socket_can_pass_unix_fd</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
<para>Checks whether file descriptors may be passed via the socket. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>the socket </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE when fd passing over this socket is supported </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="217" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="4028" bodyend="4050"/>
        <references refid="group__DBusInternalsUtils_1gaec42589166158b1385d5f5439318cda2" compoundref="dbus-internals_8h" startline="179">_DBUS_ZERO</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <referencedby refid="group__DBusTransportSocket_1gac714eaa33ff4ab5c01be1304b23339a7" compoundref="dbus-transport-socket_8c" startline="1273" endline="1334">_dbus_transport_new_for_socket</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gae74c3fcf12acaeccdb152ef907de951c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1gab18afa60e9b17b6e322735bda3d863d8" kindref="member">dbus_int32_t</ref></type>
        <definition>dbus_int32_t _dbus_atomic_inc</definition>
        <argsstring>(DBusAtomic *atomic)</argsstring>
        <name>_dbus_atomic_inc</name>
        <param>
          <type><ref refid="structDBusAtomic" kindref="compound">DBusAtomic</ref> *</type>
          <declname>atomic</declname>
        </param>
        <briefdescription>
<para>Atomically increments an integer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>atomic</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the integer to increment </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value before incrementing </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="246" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="2562" bodyend="2576"/>
        <references refid="structDBusAtomic_1aef100f17856a635a9d0f3cae7a7f6bf8" compoundref="dbus-sysdeps_8h" startline="232">DBusAtomic::value</references>
        <referencedby refid="group__DBusConnectionInternals_1ga2cdffe9215251b69cb39ff36b9f50e6c" compoundref="dbus-connection_8c" startline="1249" endline="1409">_dbus_connection_new_for_transport</referencedby>
        <referencedby refid="group__DBusConnectionInternals_1ga7151f75b5d2308ec80cfe893aba72aa1" compoundref="dbus-connection_8c" startline="1419" endline="1433">_dbus_connection_ref_unlocked</referencedby>
        <referencedby refid="group__DBusObjectTree_1ga4cf5a5f35d2bd18b6fa8aa58ba6b5de4" compoundref="dbus-object-tree_8c" startline="1075" endline="1094">_dbus_object_tree_get_user_data_unlocked</referencedby>
        <referencedby refid="group__DBusPendingCallInternals_1ga3f2300d7a768783bc2fae0991bcc55df" compoundref="dbus-pending-call_8c" startline="109" endline="161">_dbus_pending_call_new_unlocked</referencedby>
        <referencedby refid="group__DBusPendingCallInternals_1ga9d8987da3747604d370ffec2c5e1e10a" compoundref="dbus-pending-call_8c" startline="394" endline="403">_dbus_pending_call_ref_unlocked</referencedby>
        <referencedby refid="group__DBusServerInternals_1gaacfb3d29553f205b362c850cfda02fd9" compoundref="dbus-server_8c" startline="111" endline="184">_dbus_server_init_base</referencedby>
        <referencedby refid="group__DBusServerInternals_1ga987e9bf42ab4e4cededa8e8f65c54e2e" compoundref="dbus-server_8c" startline="448" endline="459">_dbus_server_ref_unlocked</referencedby>
        <referencedby refid="group__DBusConnection_1gae00f581e5487408cb294bf71826aff86" compoundref="dbus-connection_8c" startline="5511" endline="5548">dbus_connection_add_filter</referencedby>
        <referencedby refid="group__DBusConnection_1gae34751e15f114217e5ad10c663e2ef2e" compoundref="dbus-connection_8c" startline="2681" endline="2692">dbus_connection_ref</referencedby>
        <referencedby refid="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" compoundref="dbus-memory_8c" startline="461" endline="516">dbus_malloc</referencedby>
        <referencedby refid="group__DBusMemory_1gaa02722b030a091f6c14c4cb11a593623" compoundref="dbus-memory_8c" startline="531" endline="588">dbus_malloc0</referencedby>
        <referencedby refid="group__DBusMessage_1ga4bed3858b3b48ec7c86d9fc56a6ce372" compoundref="dbus-message_8c" startline="1587" endline="1656">dbus_message_copy</referencedby>
        <referencedby refid="group__DBusMessage_1ga94c43b2b237d842a6b91da6f94818d47" compoundref="dbus-message_8c" startline="1163" endline="1176">dbus_message_get_reply_serial</referencedby>
        <referencedby refid="group__DBusMessage_1ga834035e4817acd64adc8ca584bdf3982" compoundref="dbus-message_8c" startline="1667" endline="1680">dbus_message_ref</referencedby>
        <referencedby refid="group__DBusPendingCall_1ga334f6c6621583e15fdaf1a3f93dd2221" compoundref="dbus-pending-call_8c" startline="577" endline="588">dbus_pending_call_ref</referencedby>
        <referencedby refid="group__DBusMemory_1ga2d505f2960ccf343042d363170b27f9c" compoundref="dbus-memory_8c" startline="601" endline="692">dbus_realloc</referencedby>
        <referencedby refid="group__DBusServer_1gabe1c14264ef6bf3e5fe446ab9bf8b913" compoundref="dbus-server_8c" startline="687" endline="709">dbus_server_ref</referencedby>
        <referencedby refid="group__DBusServer_1ga95d0b6cb9795b4919aa08f667807c555" compoundref="dbus-server_8c" startline="720" endline="759">dbus_server_unref</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga3c50a069f795dceeb9172fe2b517bbdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1gab18afa60e9b17b6e322735bda3d863d8" kindref="member">dbus_int32_t</ref></type>
        <definition>dbus_int32_t _dbus_atomic_dec</definition>
        <argsstring>(DBusAtomic *atomic)</argsstring>
        <name>_dbus_atomic_dec</name>
        <param>
          <type><ref refid="structDBusAtomic" kindref="compound">DBusAtomic</ref> *</type>
          <declname>atomic</declname>
        </param>
        <briefdescription>
<para>Atomically decrement an integer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>atomic</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the integer to decrement </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value before decrementing </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="247" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="2585" bodyend="2599"/>
        <references refid="structDBusAtomic_1aef100f17856a635a9d0f3cae7a7f6bf8" compoundref="dbus-sysdeps_8h" startline="232">DBusAtomic::value</references>
        <referencedby refid="group__DBusConnectionInternals_1ga9ffbd9aa4f07cb30d92887e956a9fd43" compoundref="dbus-connection_8c" startline="1442" endline="1457">_dbus_connection_unref_unlocked</referencedby>
        <referencedby refid="group__DBusObjectTree_1ga4cf5a5f35d2bd18b6fa8aa58ba6b5de4" compoundref="dbus-object-tree_8c" startline="1075" endline="1094">_dbus_object_tree_get_user_data_unlocked</referencedby>
        <referencedby refid="group__DBusPendingCallInternals_1ga26f09beed0dd6323cca0452abf344567" compoundref="dbus-pending-call_8c" startline="457" endline="470">_dbus_pending_call_unref_and_unlock</referencedby>
        <referencedby refid="group__DBusServerInternals_1ga6e1d0b379c98b0d59ebd19dc9b8a2dbe" compoundref="dbus-server_8c" startline="467" endline="493">_dbus_server_unref_unlocked</referencedby>
        <referencedby refid="group__DBusConnection_1ga6385ff09bc108238c4429e7c195dab25" compoundref="dbus-connection_8c" startline="2817" endline="2843">dbus_connection_unref</referencedby>
        <referencedby refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" compoundref="dbus-memory_8c" startline="701" endline="740">dbus_free</referencedby>
        <referencedby refid="group__DBusMessage_1gab69441efe683918f6a82469c8763f464" compoundref="dbus-message_8c" startline="1690" endline="1709">dbus_message_unref</referencedby>
        <referencedby refid="group__DBusPendingCall_1gadaba15a74ba4925cdef52d4791cd3147" compoundref="dbus-pending-call_8c" startline="597" endline="609">dbus_pending_call_unref</referencedby>
        <referencedby refid="group__DBusServer_1gabe1c14264ef6bf3e5fe446ab9bf8b913" compoundref="dbus-server_8c" startline="687" endline="709">dbus_server_ref</referencedby>
        <referencedby refid="group__DBusServer_1ga95d0b6cb9795b4919aa08f667807c555" compoundref="dbus-server_8c" startline="720" endline="759">dbus_server_unref</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga626c810359ba0e362367ce2ec6691aca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1gab18afa60e9b17b6e322735bda3d863d8" kindref="member">dbus_int32_t</ref></type>
        <definition>dbus_int32_t _dbus_atomic_get</definition>
        <argsstring>(DBusAtomic *atomic)</argsstring>
        <name>_dbus_atomic_get</name>
        <param>
          <type><ref refid="structDBusAtomic" kindref="compound">DBusAtomic</ref> *</type>
          <declname>atomic</declname>
        </param>
        <briefdescription>
<para>Atomically get the value of an integer. </para>        </briefdescription>
        <detaileddescription>
<para>It may change at any time thereafter, so this is mostly only useful for assertions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>atomic</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the integer to get </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value at this moment </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="248" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="2609" bodyend="2623"/>
        <references refid="structDBusAtomic_1aef100f17856a635a9d0f3cae7a7f6bf8" compoundref="dbus-sysdeps_8h" startline="232">DBusAtomic::value</references>
        <referencedby refid="group__DBusConnectionInternals_1ga9f9665902c763bd1ddf9d9bc57d7a7ba" compoundref="dbus-connection_8c" startline="2146" endline="2160">_dbus_connection_close_if_only_one_ref</referencedby>
        <referencedby refid="group__DBusConnection_1gae34751e15f114217e5ad10c663e2ef2e" compoundref="dbus-connection_8c" startline="2681" endline="2692">dbus_connection_ref</referencedby>
        <referencedby refid="group__DBusMessage_1ga94c43b2b237d842a6b91da6f94818d47" compoundref="dbus-message_8c" startline="1163" endline="1176">dbus_message_get_reply_serial</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gac1cdb5995dcef6dd54399ab610ae689a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int _dbus_poll</definition>
        <argsstring>(DBusPollFD *fds, int n_fds, int timeout_milliseconds)</argsstring>
        <name>_dbus_poll</name>
        <param>
          <type><ref refid="structDBusPollFD" kindref="compound">DBusPollFD</ref> *</type>
          <declname>fds</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_fds</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout_milliseconds</declname>
        </param>
        <briefdescription>
<para>Wrapper for poll(). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fds</parametername>
</parameternamelist>
<parameterdescription>
<para>the file descriptors to poll </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_fds</parametername>
</parameternamelist>
<parameterdescription>
<para>number of descriptors in the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_milliseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>timeout or -1 for infinite </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>numbers of fds with revents, or &lt;0 on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="317" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="2634" bodyend="2728"/>
        <references refid="group__DBusInternalsUtils_1ga0c4961ec784874f1b1f3aeccea8d3da1" compoundref="dbus-internals_8h" startline="145">_dbus_assert_not_reached</references>
        <references refid="group__DBusSysdeps_1ga231164196ff407eccb732452a2d36468" compoundref="dbus-sysdeps_8h" startline="300">_DBUS_POLLERR</references>
        <references refid="group__DBusSysdeps_1ga6f08232c1f943313e3eefd7de8f3592f" compoundref="dbus-sysdeps_8h" startline="302">_DBUS_POLLHUP</references>
        <references refid="group__DBusSysdeps_1ga96b5ba58b9939d789bfece0d9bb82f41" compoundref="dbus-sysdeps_8h" startline="294">_DBUS_POLLIN</references>
        <references refid="group__DBusSysdeps_1ga83bf3d24f3a1a853dda794835c39fc6f" compoundref="dbus-sysdeps_8h" startline="304">_DBUS_POLLNVAL</references>
        <references refid="group__DBusSysdeps_1ga0cb1ace07be145e0b908687e99b5f161" compoundref="dbus-sysdeps_8h" startline="298">_DBUS_POLLOUT</references>
        <references refid="group__DBusSysdeps_1ga1db7d09a41912c10978c6a4955d9a9d2" compoundref="dbus-sysdeps_8h" startline="296">_DBUS_POLLPRI</references>
        <references refid="group__DBusInternalsUtils_1ga56de84795d6df4162ad79b3be7af7588" compoundref="dbus-sysdeps_8c" startline="773" endline="776">_dbus_strerror_from_errno</references>
        <references refid="group__DBusInternalsUtils_1gabea2c16d6d3fe7c4eb5b9496fc877f84" compoundref="dbus-internals_8c" startline="230" endline="247">_dbus_warn</references>
        <references refid="structDBusPollFD_1a10e65e6721451e92361497b2efaa758f" compoundref="dbus-sysdeps_8h" startline="313">DBusPollFD::events</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusPollFD_1a10b23977d2f696abfd276b9077f8c97e" compoundref="dbus-sysdeps_8h" startline="312">DBusPollFD::fd</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusPollFD_1a24bc29c766b8bbddc5da052e7a46bc9e" compoundref="dbus-sysdeps_8h" startline="314">DBusPollFD::revents</references>
        <referencedby refid="group__DBusInternalsUtils_1ga3205e9f8672271794aeb9d451e2fcc4a" compoundref="dbus-spawn_8c" startline="324" endline="402">_dbus_babysitter_unref</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga1153b4669819148af6b3f6f2b7c9183a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_sleep_milliseconds</definition>
        <argsstring>(int milliseconds)</argsstring>
        <name>_dbus_sleep_milliseconds</name>
        <param>
          <type>int</type>
          <declname>milliseconds</declname>
        </param>
        <briefdescription>
<para>Sleeps the given number of milliseconds. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>milliseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>number of milliseconds </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="321" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="2870" bodyend="2888"/>
        <references refid="group__DBusInternalsUtils_1gafb4454c18ee8e5bcc20dbccd93e1d9ba" compoundref="dbus-sysdeps_8c" startline="508" endline="534">_dbus_generate_pseudorandom_bytes_buffer</references>
        <references refid="group__DBusString_1ga7a73fb373398606e6e1d0a86c4587a3c" compoundref="dbus-string_8c" startline="490" endline="501">_dbus_string_get_data_len</references>
        <references refid="group__DBusString_1ga8f13997d90ceed2f437706e6b7804d9b" compoundref="dbus-string_8c" startline="760" endline="771">_dbus_string_lengthen</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusSysdeps_1ga83c51771d3c4e612522bd5ad72e6ad7a" compoundref="dbus-sysdeps_8c" startline="77" endline="93">_dbus_abort</referencedby>
        <referencedby refid="group__DBusConnectionInternals_1ga9f9665902c763bd1ddf9d9bc57d7a7ba" compoundref="dbus-connection_8c" startline="2146" endline="2160">_dbus_connection_close_if_only_one_ref</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gab9951a7fd8c33188bf86314e7fd56300" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_get_monotonic_time</definition>
        <argsstring>(long *tv_sec, long *tv_usec)</argsstring>
        <name>_dbus_get_monotonic_time</name>
        <param>
          <type>long *</type>
          <declname>tv_sec</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>tv_usec</declname>
        </param>
        <briefdescription>
<para>Get current time, as in gettimeofday(). </para>        </briefdescription>
        <detaileddescription>
<para>Use the monotonic clock if available, to avoid problems when the system time changes.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tv_sec</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for number of seconds </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tv_usec</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for number of microseconds </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="323" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="2738" bodyend="2759"/>
        <references refid="group__DBusSysdeps_1gae10ee21ab353beadbe2493728065f600" compoundref="dbus-sysdeps-win_8c" startline="2157" endline="2178">_dbus_get_real_time</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusConnectionInternals_1gad5e725e66dc16a411544e25675fb9fba" compoundref="dbus-connection_8c" startline="2379" endline="2550">_dbus_connection_block_pending_call</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gae10ee21ab353beadbe2493728065f600" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_get_real_time</definition>
        <argsstring>(long *tv_sec, long *tv_usec)</argsstring>
        <name>_dbus_get_real_time</name>
        <param>
          <type>long *</type>
          <declname>tv_sec</declname>
        </param>
        <param>
          <type>long *</type>
          <declname>tv_usec</declname>
        </param>
        <briefdescription>
<para>Get current time, as in gettimeofday(). </para>        </briefdescription>
        <detaileddescription>
<para>Never uses the monotonic clock.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tv_sec</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for number of seconds </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tv_usec</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for number of microseconds </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="326" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="2769" bodyend="2780"/>
        <references refid="group__DBusTypes_1ga8deac39e1bf9fcca44854afeaaaf6199">DBUS_INT64_CONSTANT</references>
        <references refid="group__DBusTypes_1ga0a7c275002dbafa34536a76db079a950" compoundref="dbus-arch-deps_8h" startline="37">dbus_uint64_t</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusSysdeps_1gafb4454c18ee8e5bcc20dbccd93e1d9ba" compoundref="dbus-sysdeps_8c" startline="508" endline="534">_dbus_generate_pseudorandom_bytes_buffer</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1ga08c2922335845e5c857e88399436b9ba" compoundref="dbus-internals_8c" startline="641" endline="653">_dbus_generate_uuid</referencedby>
        <referencedby refid="group__DBusSysdeps_1gab9951a7fd8c33188bf86314e7fd56300" compoundref="dbus-sysdeps-win_8c" startline="2188" endline="2193">_dbus_get_monotonic_time</referencedby>
        <referencedby refid="group__DBusKeyring_1ga5bbeeef1ba831a89d7f0f211e886e7c2" compoundref="dbus-keyring_8c" startline="853" endline="910">_dbus_keyring_validate_context</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gaa47156dedbe573ee9b213d1fd3f7bb79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_create_directory</definition>
        <argsstring>(const DBusString *filename, DBusError *error)</argsstring>
        <name>_dbus_create_directory</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>directory interface </para>        </briefdescription>
        <detaileddescription>
<para>directory interface</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>directory filename </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>initialized error object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="332" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="2791" bodyend="2812"/>
        <references refid="group__DBusInternalsUtils_1ga56de84795d6df4162ad79b3be7af7588" compoundref="dbus-sysdeps_8c" startline="773" endline="776">_dbus_strerror_from_errno</references>
        <references refid="group__DBusProtocol_1gabb62fd6340d0787fbd56ff8dd2f326c7" compoundref="dbus-protocol_8h" startline="355">DBUS_ERROR_FAILED</references>
        <references refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="419">dbus_set_error</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusKeyring_1ga6dad1720cf97ca6017c39330bec8d09f" compoundref="dbus-keyring_8c" startline="709" endline="838">_dbus_keyring_new_for_credentials</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga3bc1512aef42cea17a2aaacc7d8e7211" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_delete_directory</definition>
        <argsstring>(const DBusString *filename, DBusError *error)</argsstring>
        <name>_dbus_delete_directory</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Removes a directory; Directory must be empty. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>directory filename </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>initialized error object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="334" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="4000" bodyend="4018"/>
        <references refid="group__DBusProtocol_1gabb62fd6340d0787fbd56ff8dd2f326c7" compoundref="dbus-protocol_8h" startline="355">DBUS_ERROR_FAILED</references>
        <references refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="419">dbus_set_error</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gae3a3fdc0c6001e367584bb016aca495d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_concat_dir_and_file</definition>
        <argsstring>(DBusString *dir, const DBusString *next_component)</argsstring>
        <name>_dbus_concat_dir_and_file</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>next_component</declname>
        </param>
        <briefdescription>
<para>Appends the given filename to the given directory. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000058"><xreftitle>Todo</xreftitle><xrefdescription><para>it might be cute to collapse multiple &apos;/&apos; such as &quot;foo//&quot; concat &quot;//bar&quot;</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>the directory name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>next_component</parametername>
</parameternamelist>
<parameterdescription>
<para>the filename </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success</para></simplesect>
<xrefsect id="todo_1_todo000059"><xreftitle>Todo</xreftitle><xrefdescription><para>it might be cute to collapse multiple &apos;/&apos; such as &quot;foo//&quot; concat &quot;//bar&quot;</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>the directory name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>next_component</parametername>
</parameternamelist>
<parameterdescription>
<para>the filename </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="337" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="2825" bodyend="2852"/>
        <references refid="group__DBusString_1gaa6ecf36e70263659f921a4ef0335db12" compoundref="dbus-string_8c" startline="1156" endline="1167">_dbus_string_append_byte</references>
        <references refid="group__DBusString_1ga3c10f0d1bcaa3b450025b9c6a8b901d7" compoundref="dbus-string_8c" startline="1282" endline="1293">_dbus_string_copy</references>
        <references refid="group__DBusString_1ga7af1cbfa905f26d972ab644d890548b8" compoundref="dbus-string_8c" startline="780" endline="789">_dbus_string_shorten</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusSysdeps_1ga3cc5a5734416858fa58f3166ed181a64" compoundref="dbus-sysdeps-unix_8c" startline="3900" endline="3963">_dbus_append_keyring_directory_for_credentials</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga079d34a9d90759e6b3ebebab424c696e" compoundref="dbus-sysdeps-util-unix_8c" startline="1309" endline="1379">_dbus_get_standard_session_servicedirs</referencedby>
        <referencedby refid="group__DBusKeyring_1ga6dad1720cf97ca6017c39330bec8d09f" compoundref="dbus-keyring_8c" startline="709" endline="838">_dbus_keyring_new_for_credentials</referencedby>
        <referencedby refid="group__DBusServerUnix_1gaec00cdf4977b9bd33621df684406a779" compoundref="dbus-server-unix_8c" startline="54" endline="226">_dbus_server_listen_platform_specific</referencedby>
        <referencedby refid="group__DBusSHA_1ga4278fb9df967943834c4ad6332f2c28b" compoundref="dbus-sha_8c" startline="483" endline="510">_dbus_sha_compute</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga9393ded03e3b9812e4ba99b437ea992d" compoundref="dbus-sysdeps_8c" startline="226" endline="337">_dbus_split_paths_and_append</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga31ec42cef2d15ca358e737bb5f19c5cf" compoundref="dbus-sysdeps-util-unix_8c" startline="645" endline="679">_dbus_user_at_console</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gafa79c1113fa75419dcc5ee4290e06608" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_string_get_dirname</definition>
        <argsstring>(const DBusString *filename, DBusString *dirname)</argsstring>
        <name>_dbus_string_get_dirname</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>dirname</declname>
        </param>
        <briefdescription>
<para>Get the directory name from a complete filename. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the filename </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dirname</parametername>
</parameternamelist>
<parameterdescription>
<para>string to append directory name to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if no memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="339" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="1132" bodyend="1171"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusString_1ga100c5ce0696822c5a4cfbdfaba674d96" compoundref="dbus-string_8c" startline="935" endline="948">_dbus_string_append</references>
        <references refid="group__DBusString_1gaf5f13bc7ac7a623516930d26ae2589bf" compoundref="dbus-string_8c" startline="1374" endline="1388">_dbus_string_copy_len</references>
        <references refid="group__DBusString_1ga89d458f4f530ee82dbb45f9dcbc9c637" compoundref="dbus-string-util_8c" startline="90" endline="114">_dbus_string_find_byte_backward</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusSysdeps_1ga1821b64302fe8e12278fa227eb11d393" compoundref="dbus-sysdeps-util-win_8c" startline="616" endline="622">_dbus_directory_close</referencedby>
        <referencedby refid="group__DBusSysdeps_1gaae48868ce818ad287cdae113aabcc858" compoundref="dbus-sysdeps-util_8c" startline="49" endline="81">_dbus_get_environment</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga6d80876bcae54f47cde79d0bce20321d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_path_is_absolute</definition>
        <argsstring>(const DBusString *filename)</argsstring>
        <name>_dbus_path_is_absolute</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Checks whether the filename is an absolute path. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the filename </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if an absolute path </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="341" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="689" bodyend="695"/>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <referencedby refid="group__DBusSysdeps_1gaae48868ce818ad287cdae113aabcc858" compoundref="dbus-sysdeps-util_8c" startline="49" endline="81">_dbus_get_environment</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga079d34a9d90759e6b3ebebab424c696e" compoundref="dbus-sysdeps-util-win_8c" startline="1553" endline="1624">_dbus_get_standard_session_servicedirs</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga079d34a9d90759e6b3ebebab424c696e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_get_standard_session_servicedirs</definition>
        <argsstring>(DBusList **dirs)</argsstring>
        <name>_dbus_get_standard_session_servicedirs</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>dirs</declname>
        </param>
        <briefdescription>
<para>Returns the standard directories for a session bus to look for service activation files. </para>        </briefdescription>
        <detaileddescription>
<para>On UNIX this should be the standard xdg freedesktop.org data directories:</para><para>XDG_DATA_HOME=${XDG_DATA_HOME-$HOME/.local/share} XDG_DATA_DIRS=${XDG_DATA_DIRS-/usr/local/share:/usr/share}</para><para>and</para><para>DBUS_DATADIR</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dirs</parametername>
</parameternamelist>
<parameterdescription>
<para>the directory list we are returning </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on OOM</para></simplesect>
On Windows this should be data directories:</para><para>CommonProgramFiles%/dbus</para><para>and</para><para>relocated DBUS_DATADIR</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dirs</parametername>
</parameternamelist>
<parameterdescription>
<para>the directory list we are returning </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on OOM </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="343" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="1309" bodyend="1379"/>
        <references refid="group__DBusSysdeps_1gae3a3fdc0c6001e367584bb016aca495d" compoundref="dbus-sysdeps-unix_8c" startline="2825" endline="2852">_dbus_concat_dir_and_file</references>
        <references refid="group__DBusSysdeps_1gab846071a4de54cb7e518654f9375313a" compoundref="dbus-sysdeps_8c" startline="185" endline="193">_dbus_getenv</references>
        <references refid="group__DBusInternalsUtils_1ga17ce3ab061a3ae2441cd33ece34f5e7a" compoundref="dbus-userdb_8c" startline="395" endline="409">_dbus_homedir_from_current_process</references>
        <references refid="group__DBusInternalsUtils_1ga6d80876bcae54f47cde79d0bce20321d" compoundref="dbus-sysdeps-util-unix_8c" startline="689" endline="695">_dbus_path_is_absolute</references>
        <references refid="group__DBusSysdeps_1ga9393ded03e3b9812e4ba99b437ea992d" compoundref="dbus-sysdeps_8c" startline="226" endline="337">_dbus_split_paths_and_append</references>
        <references refid="group__DBusString_1ga100c5ce0696822c5a4cfbdfaba674d96" compoundref="dbus-string_8c" startline="935" endline="948">_dbus_string_append</references>
        <references refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" compoundref="dbus-string_8c" startline="259" endline="277">_dbus_string_free</references>
        <references refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" compoundref="dbus-string_8c" startline="175" endline="178">_dbus_string_init</references>
        <references refid="group__DBusString_1ga374640ddfa2f0b27a8356e2379ba8043" compoundref="dbus-string_8c" startline="190" endline="197">_dbus_string_init_const</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga5193160c3dc144af34b250cfb5b0a61e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_get_standard_system_servicedirs</definition>
        <argsstring>(DBusList **dirs)</argsstring>
        <name>_dbus_get_standard_system_servicedirs</name>
        <param>
          <type><ref refid="structDBusList" kindref="compound">DBusList</ref> **</type>
          <declname>dirs</declname>
        </param>
        <briefdescription>
<para>Returns the standard directories for a system bus to look for service activation files. </para>        </briefdescription>
        <detaileddescription>
<para>On UNIX this should be the standard xdg freedesktop.org data directories:</para><para>XDG_DATA_DIRS=${XDG_DATA_DIRS-/usr/local/share:/usr/share}</para><para>and</para><para>DBUS_DATADIR</para><para>On Windows there is no system bus and this function can return nothing.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dirs</parametername>
</parameternamelist>
<parameterdescription>
<para>the directory list we are returning </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on OOM </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="344" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="1401" bodyend="1424"/>
        <references refid="group__DBusSysdeps_1ga9393ded03e3b9812e4ba99b437ea992d" compoundref="dbus-sysdeps_8c" startline="226" endline="337">_dbus_split_paths_and_append</references>
        <references refid="group__DBusString_1ga374640ddfa2f0b27a8356e2379ba8043" compoundref="dbus-string_8c" startline="190" endline="197">_dbus_string_init_const</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga6a9478a21745b128750df87ac557c7d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_append_system_config_file</definition>
        <argsstring>(DBusString *str)</argsstring>
        <name>_dbus_append_system_config_file</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Append the absolute path of the system.conf file (there is no system bus on Windows so this can just return FALSE and print a warning or something) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to append to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if no memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="346" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="1435" bodyend="1438"/>
        <references refid="group__DBusString_1ga100c5ce0696822c5a4cfbdfaba674d96" compoundref="dbus-string_8c" startline="935" endline="948">_dbus_string_append</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gacc062b5f20f4a355ea78afccb0abd5f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_append_session_config_file</definition>
        <argsstring>(DBusString *str)</argsstring>
        <name>_dbus_append_session_config_file</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Append the absolute path of the session.conf file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to append to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if no memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="347" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="1447" bodyend="1450"/>
        <references refid="group__DBusString_1ga100c5ce0696822c5a4cfbdfaba674d96" compoundref="dbus-string_8c" startline="935" endline="948">_dbus_string_append</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gaaf6eb8179fb6ea2175ed9742a0c8be68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structDBusDirIter" kindref="compound">DBusDirIter</ref> *</type>
        <definition>DBusDirIter* _dbus_directory_open</definition>
        <argsstring>(const DBusString *filename, DBusError *error)</argsstring>
        <name>_dbus_directory_open</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Open a directory to iterate over. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the directory name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>exception return object or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new iterator, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="352" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="754" bodyend="786"/>
        <references refid="group__DBusInternalsUtils_1ga2212aa0e5732257598a6597748c658e4" compoundref="dbus-sysdeps_8c" startline="614" endline="698">_dbus_error_from_errno</references>
        <references refid="group__DBusString_1ga100c5ce0696822c5a4cfbdfaba674d96" compoundref="dbus-string_8c" startline="935" endline="948">_dbus_string_append</references>
        <references refid="group__DBusString_1ga4701fa3fabccad3ba64b7bf17c4ae14c" compoundref="dbus-string-util_8c" startline="46" endline="77">_dbus_string_ends_with_c_str</references>
        <references refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" compoundref="dbus-string_8c" startline="259" endline="277">_dbus_string_free</references>
        <references refid="group__DBusString_1ga5c5faea5fac79aad0de9fb1cf6da0393" compoundref="dbus-string_8c" startline="245" endline="251">_dbus_string_init_from_string</references>
        <references refid="structDBusDirIter_1a9b713ab1d8b9b0b621e7555a33def70f" compoundref="dbus-sysdeps-util-unix_8c" startline="742">DBusDirIter::d</references>
        <references refid="group__DBusProtocol_1gac32eaf0b92f798307853cd4fe0cf11c2" compoundref="dbus-protocol_8h" startline="357">DBUS_ERROR_NO_MEMORY</references>
        <references refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" compoundref="dbus-memory_8c" startline="701" endline="740">dbus_free</references>
        <references refid="group__DBusMemory_1gaba9d823abda7f4cadbaf5177d3b8b793" compoundref="dbus-memory_8h" startline="59">dbus_new0</references>
        <references refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="419">dbus_set_error</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gab9a2ddb130da035d6186f2d96bf37cb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_directory_get_next_file</definition>
        <argsstring>(DBusDirIter *iter, DBusString *filename, DBusError *error)</argsstring>
        <name>_dbus_directory_get_next_file</name>
        <param>
          <type><ref refid="structDBusDirIter" kindref="compound">DBusDirIter</ref> *</type>
          <declname>iter</declname>
        </param>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Get next file in the directory. </para>        </briefdescription>
        <detaileddescription>
<para>Will not return &quot;.&quot; or &quot;..&quot; on UNIX. If an error occurs, the contents of &quot;filename&quot; are undefined. The error is never set if the function succeeds.</para><para>This function is not re-entrant, and not necessarily thread-safe. Only use it for test code or single-threaded utilities.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iter</parametername>
</parameternamelist>
<parameterdescription>
<para>the iterator </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>string to be set to the next file in the dir </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for error </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if filename was filled in with a new filename</para></simplesect>
Will not return &quot;.&quot; or &quot;..&quot; on UNIX. If an error occurs, the contents of &quot;filename&quot; are undefined. The error is never set if the function succeeds.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iter</parametername>
</parameternamelist>
<parameterdescription>
<para>the iterator </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>string to be set to the next file in the dir </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for error </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if filename was filled in with a new filename </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="354" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="802" bodyend="844"/>
        <references refid="group__DBusInternalsUtils_1ga2212aa0e5732257598a6597748c658e4" compoundref="dbus-sysdeps_8c" startline="614" endline="698">_dbus_error_from_errno</references>
        <references refid="group__DBusString_1ga100c5ce0696822c5a4cfbdfaba674d96" compoundref="dbus-string_8c" startline="935" endline="948">_dbus_string_append</references>
        <references refid="group__DBusString_1ga08c423b93c28dd746dcb93e0461ab95c" compoundref="dbus-string_8c" startline="802" endline="809">_dbus_string_set_length</references>
        <references refid="structDBusDirIter_1a9b713ab1d8b9b0b621e7555a33def70f" compoundref="dbus-sysdeps-util-unix_8c" startline="742">DBusDirIter::d</references>
        <references refid="group__DBusProtocol_1gac32eaf0b92f798307853cd4fe0cf11c2" compoundref="dbus-protocol_8h" startline="357">DBUS_ERROR_NO_MEMORY</references>
        <references refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="419">dbus_set_error</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga1821b64302fe8e12278fa227eb11d393" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_directory_close</definition>
        <argsstring>(DBusDirIter *iter)</argsstring>
        <name>_dbus_directory_close</name>
        <param>
          <type><ref refid="structDBusDirIter" kindref="compound">DBusDirIter</ref> *</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
<para>Closes a directory iteration. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="357" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="850" bodyend="854"/>
        <references refid="structDBusDirIter_1a9b713ab1d8b9b0b621e7555a33def70f" compoundref="dbus-sysdeps-util-unix_8c" startline="742">DBusDirIter::d</references>
        <references refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" compoundref="dbus-memory_8c" startline="701" endline="740">dbus_free</references>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusGroupInfo_1a583e8d6d421fa85fb1d43789efae4b75" compoundref="dbus-sysdeps-unix_8h" startline="113">DBusGroupInfo::gid</references>
        <references refid="structDBusGroupInfo_1af1a4b925663336f64c62cfcab40571c6" compoundref="dbus-sysdeps-unix_8h" startline="114">DBusGroupInfo::groupname</references>
        <references refid="group__DBusInternalsUtils_1ga9d00d77f6595b9d7ac1baf59d44bf58c" compoundref="dbus-internals_8c" startline="527" endline="544">_dbus_strdup</references>
        <references refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="419">dbus_set_error</references>
        <references refid="group__DBusProtocol_1gac32eaf0b92f798307853cd4fe0cf11c2" compoundref="dbus-protocol_8h" startline="357">DBUS_ERROR_NO_MEMORY</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <references refid="group__DBusSysdeps_1ga768a080926a119a6131083facc0bd42b" compoundref="dbus-sysdeps_8h" startline="107">DBUS_GID_UNSET</references>
        <references refid="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" compoundref="dbus-memory_8c" startline="461" endline="516">dbus_malloc</references>
        <references refid="group__DBusInternalsUtils_1ga2212aa0e5732257598a6597748c658e4" compoundref="dbus-sysdeps_8c" startline="614" endline="698">_dbus_error_from_errno</references>
        <references refid="group__DBusString_1gafa79c1113fa75419dcc5ee4290e06608" compoundref="dbus-sysdeps-util-unix_8c" startline="1132" endline="1171">_dbus_string_get_dirname</references>
        <references refid="group__DBusString_1ga100c5ce0696822c5a4cfbdfaba674d96" compoundref="dbus-string_8c" startline="935" endline="948">_dbus_string_append</references>
        <references refid="group__DBusString_1gaf5f13bc7ac7a623516930d26ae2589bf" compoundref="dbus-string_8c" startline="1374" endline="1388">_dbus_string_copy_len</references>
        <references refid="group__DBusString_1ga89d458f4f530ee82dbb45f9dcbc9c637" compoundref="dbus-string-util_8c" startline="90" endline="114">_dbus_string_find_byte_backward</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga8e16f75e361d9fed43223f69baf0e2a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_check_dir_is_private_to_user</definition>
        <argsstring>(DBusString *dir, DBusError *error)</argsstring>
        <name>_dbus_check_dir_is_private_to_user</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Checks to make sure the given directory is private to the user. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the directory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>error return </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="359" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="2084" bodyend="2120"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusInternalsUtils_1ga2212aa0e5732257598a6597748c658e4" compoundref="dbus-sysdeps_8c" startline="614" endline="698">_dbus_error_from_errno</references>
        <references refid="group__DBusInternalsUtils_1ga9d00d77f6595b9d7ac1baf59d44bf58c" compoundref="dbus-internals_8c" startline="527" endline="544">_dbus_strdup</references>
        <references refid="group__DBusInternalsUtils_1gabea2c16d6d3fe7c4eb5b9496fc877f84" compoundref="dbus-internals_8c" startline="230" endline="247">_dbus_warn</references>
        <references refid="group__DBusProtocol_1gabb62fd6340d0787fbd56ff8dd2f326c7" compoundref="dbus-protocol_8h" startline="355">DBUS_ERROR_FAILED</references>
        <references refid="group__DBusProtocol_1gac32eaf0b92f798307853cd4fe0cf11c2" compoundref="dbus-protocol_8h" startline="357">DBUS_ERROR_NO_MEMORY</references>
        <references refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" compoundref="dbus-memory_8c" startline="701" endline="740">dbus_free</references>
        <references refid="group__DBusSysdeps_1gaaab5918b2ae57886d9783df09bd61c7e" compoundref="dbus-sysdeps_8h" startline="114">DBUS_GID_FORMAT</references>
        <references refid="group__DBusSysdeps_1ga768a080926a119a6131083facc0bd42b" compoundref="dbus-sysdeps_8h" startline="107">DBUS_GID_UNSET</references>
        <references refid="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" compoundref="dbus-memory_8c" startline="461" endline="516">dbus_malloc</references>
        <references refid="group__DBusMemory_1ga54ccb556e7964112a825a7f46c156ca0" compoundref="dbus-memory_8h" startline="58">dbus_new</references>
        <references refid="group__DBusMemory_1ga2d505f2960ccf343042d363170b27f9c" compoundref="dbus-memory_8c" startline="601" endline="692">dbus_realloc</references>
        <references refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="419">dbus_set_error</references>
        <references refid="group__DBusSysdeps_1ga3d2f3fb32bb759cabe362ca2de383f7d" compoundref="dbus-sysdeps_8h" startline="105">DBUS_UID_UNSET</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusUserInfo_1a902af9e0fb7d37c14eefb7d2b016ab11" compoundref="dbus-sysdeps-unix_8h" startline="102">DBusUserInfo::group_ids</references>
        <references refid="structDBusUserInfo_1a5235d4d021cd134e1130e1e8e912bc0c" compoundref="dbus-sysdeps-unix_8h" startline="105">DBusUserInfo::homedir</references>
        <references refid="structDBusUserInfo_1a21c07867fbffb1854a97aed265d87c89" compoundref="dbus-sysdeps-unix_8h" startline="103">DBusUserInfo::n_group_ids</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusUserInfo_1ac970de2fac9ea4ba91485e6c37c3bf93" compoundref="dbus-sysdeps-unix_8h" startline="101">DBusUserInfo::primary_gid</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <references refid="structDBusUserInfo_1a2d9c74d29f371e391a79b81162050b2e" compoundref="dbus-sysdeps-unix_8h" startline="100">DBusUserInfo::uid</references>
        <references refid="structDBusUserInfo_1ac6b57db1dc8315eee3f532f4e77912d1" compoundref="dbus-sysdeps-unix_8h" startline="104">DBusUserInfo::username</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga3ecdae905f2d9e95fd35891b20f06532" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* _dbus_get_tmpdir</definition>
        <argsstring>(void)</argsstring>
        <name>_dbus_get_tmpdir</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the temporary files directory by inspecting the environment variables TMPDIR, TMP, and TEMP in that order. </para>        </briefdescription>
        <detaileddescription>
<para>If none of those are set &quot;/tmp&quot; is returned</para><para><simplesect kind="return"><para>location of temp directory, or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> if no memory for locking </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="362" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="3320" bodyend="3355"/>
        <references refid="group__DBusSysdeps_1ga83c51771d3c4e612522bd5ad72e6ad7a" compoundref="dbus-sysdeps_8c" startline="77" endline="93">_dbus_abort</references>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusSysdepsUnix_1gae63f6bdc70a1dd5c9ba0a6a1be57e320" compoundref="dbus-sysdeps-unix_8c" startline="4057" endline="4115">_dbus_close_all</references>
        <references refid="group__DBusInternalsUtils_1ga2212aa0e5732257598a6597748c658e4" compoundref="dbus-sysdeps_8c" startline="614" endline="698">_dbus_error_from_errno</references>
        <references refid="group__DBusInternalsUtils_1ga3b56fdb9df58277ee69d9f56a73bf383" compoundref="dbus-internals_8h" startline="329">_DBUS_LOCK</references>
        <references refid="group__DBusSysdepsUnix_1gaf52cb1d5b9fc5611808ce32eff898c28" compoundref="dbus-sysdeps-unix_8c" startline="628" endline="675">_dbus_read</references>
        <references refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" compoundref="dbus-string_8c" startline="175" endline="178">_dbus_string_init</references>
        <references refid="group__DBusString_1ga08c423b93c28dd746dcb93e0461ab95c" compoundref="dbus-string_8c" startline="802" endline="809">_dbus_string_set_length</references>
        <references refid="group__DBusInternalsUtils_1ga1b7db80a2ea11235768ec8aa698df0a5" compoundref="dbus-internals_8h" startline="330">_DBUS_UNLOCK</references>
        <references refid="group__DBusInternalsUtils_1gabea2c16d6d3fe7c4eb5b9496fc877f84" compoundref="dbus-internals_8c" startline="230" endline="247">_dbus_warn</references>
        <references refid="group__DBusProtocol_1gac04bc3bebee1674e93ef96aaa2b34b40" compoundref="dbus-protocol_8h" startline="416">DBUS_ERROR_SPAWN_EXEC_FAILED</references>
        <references refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="419">dbus_set_error</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusInternalsUtils_1ga2469c53816dc077f9deefb187ffcabf3" compoundref="dbus-spawn_8c" startline="873">READ_END</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <references refid="group__DBusInternalsUtils_1ga2efd706d915e621e5e18b3f0803c4ed2" compoundref="dbus-spawn_8c" startline="875">WRITE_END</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gafb4454c18ee8e5bcc20dbccd93e1d9ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_generate_pseudorandom_bytes_buffer</definition>
        <argsstring>(char *buffer, int n_bytes)</argsstring>
        <name>_dbus_generate_pseudorandom_bytes_buffer</name>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_bytes</declname>
        </param>
        <briefdescription>
<para>Random numbers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="367" column="1" bodyfile="dbus/dbus-sysdeps.c" bodystart="508" bodyend="534"/>
        <references refid="group__DBusSysdeps_1gae10ee21ab353beadbe2493728065f600" compoundref="dbus-sysdeps-unix_8c" startline="2769" endline="2780">_dbus_get_real_time</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusSysdeps_1ga1153b4669819148af6b3f6f2b7c9183a" compoundref="dbus-sysdeps-unix_8c" startline="2870" endline="2888">_dbus_sleep_milliseconds</referencedby>
        <referencedby refid="group__DBusSysdeps_1gaa32f87746e9264b2425736043d02fad4" compoundref="dbus-sysdeps_8c" startline="543" endline="564">_dbus_generate_random_bytes_buffer</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gaa32f87746e9264b2425736043d02fad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_generate_random_bytes_buffer</definition>
        <argsstring>(char *buffer, int n_bytes)</argsstring>
        <name>_dbus_generate_random_bytes_buffer</name>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_bytes</declname>
        </param>
        <briefdescription>
<para>Fills n_bytes of the given buffer with random bytes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>an allocated buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes in buffer to write to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="369" column="1" bodyfile="dbus/dbus-sysdeps.c" bodystart="543" bodyend="564"/>
        <references refid="group__DBusInternalsUtils_1gafb4454c18ee8e5bcc20dbccd93e1d9ba" compoundref="dbus-sysdeps_8c" startline="508" endline="534">_dbus_generate_pseudorandom_bytes_buffer</references>
        <references refid="group__DBusSysdeps_1gac9fd08af5e54c0e9b3db108b48a65778" compoundref="dbus-sysdeps-unix_8c" startline="2918" endline="2953">_dbus_generate_random_bytes</references>
        <references refid="group__DBusString_1gaf97b18e419678dbf967d9b9ad1112ca6" compoundref="dbus-string_8c" startline="697" endline="707">_dbus_string_copy_to_buffer</references>
        <references refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" compoundref="dbus-string_8c" startline="259" endline="277">_dbus_string_free</references>
        <references refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" compoundref="dbus-string_8c" startline="175" endline="178">_dbus_string_init</references>
        <referencedby refid="group__DBusInternalsUtils_1ga08c2922335845e5c857e88399436b9ba" compoundref="dbus-internals_8c" startline="641" endline="653">_dbus_generate_uuid</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gac9fd08af5e54c0e9b3db108b48a65778" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_generate_random_bytes</definition>
        <argsstring>(DBusString *str, int n_bytes)</argsstring>
        <name>_dbus_generate_random_bytes</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_bytes</declname>
        </param>
        <briefdescription>
<para>Generates the given number of random bytes, using the best mechanism we can come up with. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of random bytes to append to string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success, <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if no memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="371" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="2918" bodyend="2953"/>
        <references refid="group__DBusSysdepsUnix_1gac448479a1674e3b86cee9a4bdc7eba03" compoundref="dbus-sysdeps-unix_8c" startline="3025" endline="3042">_dbus_close</references>
        <references refid="group__DBusSysdepsUnix_1gaf52cb1d5b9fc5611808ce32eff898c28" compoundref="dbus-sysdeps-unix_8c" startline="628" endline="675">_dbus_read</references>
        <references refid="group__DBusString_1ga7a73fb373398606e6e1d0a86c4587a3c" compoundref="dbus-string_8c" startline="490" endline="501">_dbus_string_get_data_len</references>
        <references refid="group__DBusString_1ga8f13997d90ceed2f437706e6b7804d9b" compoundref="dbus-string_8c" startline="760" endline="771">_dbus_string_lengthen</references>
        <references refid="group__DBusString_1ga08c423b93c28dd746dcb93e0461ab95c" compoundref="dbus-string_8c" startline="802" endline="809">_dbus_string_set_length</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusSysdeps_1ga709ce349c6ee05263850444fb4e0177d" compoundref="dbus-sysdeps_8c" startline="575" endline="601">_dbus_generate_random_ascii</referencedby>
        <referencedby refid="group__DBusSysdeps_1gaa32f87746e9264b2425736043d02fad4" compoundref="dbus-sysdeps_8c" startline="543" endline="564">_dbus_generate_random_bytes_buffer</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga709ce349c6ee05263850444fb4e0177d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_generate_random_ascii</definition>
        <argsstring>(DBusString *str, int n_bytes)</argsstring>
        <name>_dbus_generate_random_ascii</name>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_bytes</declname>
        </param>
        <briefdescription>
<para>Generates the given number of random bytes, where the bytes are chosen from the alphanumeric ASCII subset. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of random ASCII bytes to append to string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success, <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if no memory or other failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="373" column="1" bodyfile="dbus/dbus-sysdeps.c" bodystart="575" bodyend="601"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusSysdeps_1gac9fd08af5e54c0e9b3db108b48a65778" compoundref="dbus-sysdeps-unix_8c" startline="2918" endline="2953">_dbus_generate_random_bytes</references>
        <references refid="group__DBusString_1gaa4324cd667e21beb31a5481cb0c12b6d" compoundref="dbus-string_8c" startline="2449" endline="2474">_dbus_string_validate_ascii</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusServerUnix_1gaec00cdf4977b9bd33621df684406a779" compoundref="dbus-server-unix_8c" startline="54" endline="226">_dbus_server_listen_platform_specific</referencedby>
        <referencedby refid="group__DBusFile_1ga2adba123fde18c9d1d9eaf1347980d57" compoundref="dbus-file-unix_8c" startline="164" endline="317">_dbus_string_save_to_file</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga2212aa0e5732257598a6597748c658e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* _dbus_error_from_errno</definition>
        <argsstring>(int error_number)</argsstring>
        <name>_dbus_error_from_errno</name>
        <param>
          <type>int</type>
          <declname>error_number</declname>
        </param>
        <briefdescription>
<para>Converts a UNIX errno, or Windows errno or WinSock error value into a <ref refid="structDBusError" kindref="compound">DBusError</ref> name. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000061"><xreftitle>Todo</xreftitle><xrefdescription><para>should cover more errnos, specifically those from open().</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error_number</parametername>
</parameternamelist>
<parameterdescription>
<para>the errno. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an error name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="376" column="1" bodyfile="dbus/dbus-sysdeps.c" bodystart="614" bodyend="698"/>
        <references refid="group__DBusProtocol_1ga6d3940075c1fbd1bfe06626b59723a16" compoundref="dbus-protocol_8h" startline="373">DBUS_ERROR_ACCESS_DENIED</references>
        <references refid="group__DBusProtocol_1ga3d13424a19bb774cf3481216bf4ba366" compoundref="dbus-protocol_8h" startline="387">DBUS_ERROR_ADDRESS_IN_USE</references>
        <references refid="group__DBusProtocol_1gabb62fd6340d0787fbd56ff8dd2f326c7" compoundref="dbus-protocol_8h" startline="355">DBUS_ERROR_FAILED</references>
        <references refid="group__DBusProtocol_1ga7c65e9730331eb19b7d6b128a79361ef" compoundref="dbus-protocol_8h" startline="395">DBUS_ERROR_FILE_EXISTS</references>
        <references refid="group__DBusProtocol_1gaf5ad9572cc5935d4655635003073c21a" compoundref="dbus-protocol_8h" startline="393">DBUS_ERROR_FILE_NOT_FOUND</references>
        <references refid="group__DBusProtocol_1ga7c96d165c4ebee51e939969934d18027" compoundref="dbus-protocol_8h" startline="371">DBUS_ERROR_LIMITS_EXCEEDED</references>
        <references refid="group__DBusProtocol_1gac32eaf0b92f798307853cd4fe0cf11c2" compoundref="dbus-protocol_8h" startline="357">DBUS_ERROR_NO_MEMORY</references>
        <references refid="group__DBusProtocol_1gab18c0e4eee0936dc042319803730b62e" compoundref="dbus-protocol_8h" startline="385">DBUS_ERROR_NO_NETWORK</references>
        <references refid="group__DBusProtocol_1ga72b375fab2486ee165e1cca2bd145695" compoundref="dbus-protocol_8h" startline="377">DBUS_ERROR_NO_SERVER</references>
        <references refid="group__DBusProtocol_1ga33122bcaf8f5896ec222c755b6effb40" compoundref="dbus-protocol_8h" startline="369">DBUS_ERROR_NOT_SUPPORTED</references>
        <references refid="group__DBusProtocol_1ga0e4674c42373ee449ddf08aab8bce9ce" compoundref="dbus-protocol_8h" startline="383">DBUS_ERROR_TIMEOUT</references>
        <referencedby refid="group__DBusSysdepsUnix_1ga974b137fa165ce2e0ace041b20883fe6" compoundref="dbus-sysdeps-unix_8c" startline="4180" endline="4244">_dbus_append_address_from_socket</referencedby>
        <referencedby refid="group__DBusSysdeps_1gaca61af8681a48862835ea8cfd263f5ab" compoundref="dbus-sysdeps-util-unix_8c" startline="85" endline="165">_dbus_become_daemon</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga82c920a8c3b5958ba1ecf8e5f5d6373b" compoundref="dbus-sysdeps-util-unix_8c" startline="332" endline="380">_dbus_change_to_daemon_user</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga8e16f75e361d9fed43223f69baf0e2a5" compoundref="dbus-sysdeps-unix_8c" startline="2084" endline="2120">_dbus_check_dir_is_private_to_user</referencedby>
        <referencedby refid="group__DBusSysdepsUnix_1gac448479a1674e3b86cee9a4bdc7eba03" compoundref="dbus-sysdeps-unix_8c" startline="3025" endline="3042">_dbus_close</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga701f9b3087c196404f66ff95b4ace0b8" compoundref="dbus-sysdeps-win_8c" startline="493" endline="514">_dbus_close_socket</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga3551d425aba3d92e652b8809fdfe9339" compoundref="dbus-sysdeps-util-unix_8c" startline="1208" endline="1273">_dbus_command_for_pid</referencedby>
        <referencedby refid="group__DBusSysdepsUnix_1gab9a5fd9662ae1ee18598d1736def70ea" compoundref="dbus-sysdeps-unix_8c" startline="929" endline="1015">_dbus_connect_exec</referencedby>
        <referencedby refid="group__DBusSysdeps_1gaa3adf90f6e47d30eeacf0a27d1a09ee5" compoundref="dbus-sysdeps-unix_8c" startline="1262" endline="1268">_dbus_connect_tcp_socket</referencedby>
        <referencedby refid="group__DBusSysdepsUnix_1ga0228009923a105d50a0849b24acbc31e" compoundref="dbus-sysdeps-unix_8c" startline="833" endline="914">_dbus_connect_unix_socket</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga1821b64302fe8e12278fa227eb11d393" compoundref="dbus-sysdeps-util-unix_8c" startline="850" endline="854">_dbus_directory_close</referencedby>
        <referencedby refid="group__DBusSysdeps_1gab9a2ddb130da035d6186f2d96bf37cb4" compoundref="dbus-sysdeps-util-unix_8c" startline="802" endline="844">_dbus_directory_get_next_file</referencedby>
        <referencedby refid="group__DBusSysdeps_1gaaf6eb8179fb6ea2175ed9742a0c8be68" compoundref="dbus-sysdeps-util-unix_8c" startline="754" endline="786">_dbus_directory_open</referencedby>
        <referencedby refid="group__DBusSysdepsUnix_1gad79d20e59fb519233004208988851cf1" compoundref="dbus-sysdeps-unix_8c" startline="3053" endline="3085">_dbus_dup</referencedby>
        <referencedby refid="group__DBusSysdeps_1gaf4f1db48d66dcb310b9771beb955578e" compoundref="dbus-sysdeps_8c" startline="706" endline="709">_dbus_error_from_system_errno</referencedby>
        <referencedby refid="group__DBusFile_1gad22d468e789139c87f7f4bb97cadf448" compoundref="dbus-file-unix_8c" startline="55" endline="151">_dbus_file_get_contents</referencedby>
        <referencedby refid="group__DBusSysdeps_1gae96a3f400324b065f78a865a86454d09" compoundref="dbus-sysdeps-unix_8c" startline="3175" endline="3239">_dbus_full_duplex_pipe</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga3ecdae905f2d9e95fd35891b20f06532" compoundref="dbus-sysdeps-unix_8c" startline="3320" endline="3355">_dbus_get_tmpdir</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1gaa504db352a939909051a494d06c5b607" compoundref="dbus-userdb-util_8c" startline="49" endline="136">_dbus_is_console_user</referencedby>
        <referencedby refid="group__DBusSysdepsUnix_1ga71aa508a7790c6d1c9c0159defcdd4a6" compoundref="dbus-sysdeps-unix_8c" startline="1162" endline="1246">_dbus_listen_systemd_sockets</referencedby>
        <referencedby refid="group__DBusSysdeps_1gafdae31b3b61299dbaaccfcb1205a6f30" compoundref="dbus-sysdeps-unix_8c" startline="1386" endline="1582">_dbus_listen_tcp_socket</referencedby>
        <referencedby refid="group__DBusSysdepsUnix_1ga2cd48fe3d7aa14d0d3c7813cdddb3f74" compoundref="dbus-sysdeps-unix_8c" startline="1035" endline="1149">_dbus_listen_unix_socket</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga9906c86bebb51358f0d8df6a42af30f6" compoundref="dbus-sysdeps-unix_8c" startline="1701" endline="1988">_dbus_read_credentials_socket</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga6cc9916aa1dde4d44072ee85b5691b5b" compoundref="dbus-sysdeps-win_8c" startline="1859" endline="1915">_dbus_send_credentials_socket</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga04e98ad0e3a181f0a5921a4cbc49cf08" compoundref="dbus-sysdeps-util-unix_8c" startline="706" endline="734">_dbus_stat</referencedby>
        <referencedby refid="group__DBusFile_1ga2adba123fde18c9d1d9eaf1347980d57" compoundref="dbus-file-unix_8c" startline="164" endline="317">_dbus_string_save_to_file</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gaf4f1db48d66dcb310b9771beb955578e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* _dbus_error_from_system_errno</definition>
        <argsstring>(void)</argsstring>
        <name>_dbus_error_from_system_errno</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts the current system errno value into a <ref refid="structDBusError" kindref="compound">DBusError</ref> name. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>an error name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="377" column="1" bodyfile="dbus/dbus-sysdeps.c" bodystart="706" bodyend="709"/>
        <references refid="group__DBusInternalsUtils_1ga2212aa0e5732257598a6597748c658e4" compoundref="dbus-sysdeps_8c" startline="614" endline="698">_dbus_error_from_errno</references>
        <referencedby refid="group__DBusSysdeps_1gaca61af8681a48862835ea8cfd263f5ab" compoundref="dbus-sysdeps-util-win_8c" startline="63" endline="71">_dbus_become_daemon</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gaf80b18a5eff6d59c15f66029be352c8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int _dbus_save_socket_errno</definition>
        <argsstring>(void)</argsstring>
        <name>_dbus_save_socket_errno</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="379" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="4247" bodyend="4250"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga618db839cc75653ba05d6b5871049007" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_restore_socket_errno</definition>
        <argsstring>(int saved_errno)</argsstring>
        <name>_dbus_restore_socket_errno</name>
        <param>
          <type>int</type>
          <declname>saved_errno</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="380" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="4253" bodyend="4256"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gaf0f4cb7f145fe1f48f5302277560407a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_set_errno_to_zero</definition>
        <argsstring>(void)</argsstring>
        <name>_dbus_set_errno_to_zero</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Assign 0 to the global errno variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="381" column="1" bodyfile="dbus/dbus-sysdeps.c" bodystart="715" bodyend="722"/>
        <referencedby refid="group__DBusString_1ga93e22894a5e2e0d65c179c7d36a8b1c8" compoundref="dbus-sysdeps_8c" startline="435" endline="459">_dbus_string_parse_int</referencedby>
        <referencedby refid="group__DBusString_1ga84cc8d08bb48b7915d673f7cc7886f97" compoundref="dbus-sysdeps_8c" startline="474" endline="498">_dbus_string_parse_uint</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga1895e860a4a9993cea584ec7e30dd71d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_get_is_errno_eagain_or_ewouldblock</definition>
        <argsstring>(int e)</argsstring>
        <name>_dbus_get_is_errno_eagain_or_ewouldblock</name>
        <param>
          <type>int</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>See if errno is EAGAIN or EWOULDBLOCK (this has to be done differently for Winsock so is abstracted) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if e == EAGAIN or e == EWOULDBLOCK </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="382" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="3987" bodyend="3990"/>
        <references refid="group__DBusFile_1ga13a527e32c05b63e8b32a63d728e20e8" compoundref="dbus-sysdeps-win_8c" startline="3483" endline="3491">_dbus_file_exists</references>
        <references refid="group__DBusString_1ga100c5ce0696822c5a4cfbdfaba674d96" compoundref="dbus-string_8c" startline="935" endline="948">_dbus_string_append</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gaf8962f4044a2a8689eb95a0ffd08b837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_get_is_errno_enomem</definition>
        <argsstring>(int e)</argsstring>
        <name>_dbus_get_is_errno_enomem</name>
        <param>
          <type>int</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>See if errno is ENOMEM. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if e == ENOMEM </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="383" column="1" bodyfile="dbus/dbus-sysdeps.c" bodystart="729" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gae638e92d9bbeef287421a0f2d5837b9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_get_is_errno_eintr</definition>
        <argsstring>(int e)</argsstring>
        <name>_dbus_get_is_errno_eintr</name>
        <param>
          <type>int</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>See if errno is EINTR. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if e == EINTR </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="384" column="1" bodyfile="dbus/dbus-sysdeps.c" bodystart="739" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga07d3d26556b75d728fd1755baddb0792" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_get_is_errno_epipe</definition>
        <argsstring>(int e)</argsstring>
        <name>_dbus_get_is_errno_epipe</name>
        <param>
          <type>int</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>See if errno is EPIPE. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if errno == EPIPE </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="385" column="1" bodyfile="dbus/dbus-sysdeps.c" bodystart="749" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga0e84d22f6cc293eef3c4f4f465ef1d9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_get_is_errno_etoomanyrefs</definition>
        <argsstring>(int e)</argsstring>
        <name>_dbus_get_is_errno_etoomanyrefs</name>
        <param>
          <type>int</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>See if errno is ETOOMANYREFS. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if errno == ETOOMANYREFS </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="386" column="1" bodyfile="dbus/dbus-sysdeps.c" bodystart="759" bodyend="766"/>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga56de84795d6df4162ad79b3be7af7588" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* _dbus_strerror_from_errno</definition>
        <argsstring>(void)</argsstring>
        <name>_dbus_strerror_from_errno</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get error message from errno. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>_dbus_strerror(errno) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="387" column="1" bodyfile="dbus/dbus-sysdeps.c" bodystart="773" bodyend="776"/>
        <referencedby refid="group__DBusSysdeps_1gaca61af8681a48862835ea8cfd263f5ab" compoundref="dbus-sysdeps-util-win_8c" startline="63" endline="71">_dbus_become_daemon</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga701f9b3087c196404f66ff95b4ace0b8" compoundref="dbus-sysdeps-win_8c" startline="493" endline="514">_dbus_close_socket</referencedby>
        <referencedby refid="group__DBusSysdeps_1gaa3adf90f6e47d30eeacf0a27d1a09ee5" compoundref="dbus-sysdeps-win_8c" startline="1489" endline="1495">_dbus_connect_tcp_socket</referencedby>
        <referencedby refid="group__DBusSysdeps_1gaa47156dedbe573ee9b213d1fd3f7bb79" compoundref="dbus-sysdeps-win_8c" startline="2212" endline="2233">_dbus_create_directory</referencedby>
        <referencedby refid="group__DBusFile_1ga4d4936493cddac47b6e7e4ab3f390627" compoundref="dbus-sysdeps-win_8c" startline="2327" endline="2345">_dbus_delete_file</referencedby>
        <referencedby refid="group__DBusSysdeps_1gae96a3f400324b065f78a865a86454d09" compoundref="dbus-sysdeps-win_8c" startline="1052" endline="1158">_dbus_full_duplex_pipe</referencedby>
        <referencedby refid="group__DBusSysdeps_1gafdae31b3b61299dbaaccfcb1205a6f30" compoundref="dbus-sysdeps-win_8c" startline="1636" endline="1825">_dbus_listen_tcp_socket</referencedby>
        <referencedby refid="group__DBusSysdeps_1gac1cdb5995dcef6dd54399ab610ae689a" compoundref="dbus-sysdeps-win_8c" startline="1169" endline="1430">_dbus_poll</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga6cc9916aa1dde4d44072ee85b5691b5b" compoundref="dbus-sysdeps-win_8c" startline="1859" endline="1915">_dbus_send_credentials_socket</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga346cadd9b0f7d0ae1cd19007b2e4c2de" compoundref="dbus-sysdeps-win_8c" startline="449" endline="482">_dbus_write_socket</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga02da720105c2a2397b7c687c5ca81174" compoundref="dbus-sysdeps-win_8c" startline="583" endline="644">_dbus_write_socket_two</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga6890d4cde3afec0bf274ca2af8c9e204" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_disable_sigpipe</definition>
        <argsstring>(void)</argsstring>
        <name>_dbus_disable_sigpipe</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>signal (SIGPIPE, SIG_IGN); </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="389" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="2990" bodyend="2993"/>
        <referencedby refid="group__DBusConnectionInternals_1ga2cdffe9215251b69cb39ff36b9f50e6c" compoundref="dbus-connection_8c" startline="1249" endline="1409">_dbus_connection_new_for_transport</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga203e3257b50597a8fe7757c920474a20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_exit</definition>
        <argsstring>(int code) _DBUS_GNUC_NORETURN</argsstring>
        <name>_dbus_exit</name>
        <param>
          <type>int</type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Exit the process, returning the given value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>the exit code </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="392" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="2961" bodyend="2964"/>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <referencedby refid="group__DBusSysdeps_1ga83c51771d3c4e612522bd5ad72e6ad7a" compoundref="dbus-sysdeps_8c" startline="77" endline="93">_dbus_abort</referencedby>
        <referencedby refid="group__DBusConnection_1ga1e40d994ea162ce767e78de1c4988566" compoundref="dbus-connection_8c" startline="4091" endline="4119">dbus_connection_pop_message</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gaffaf8b5bb832c20a8ccb10f012920776" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int _dbus_printf_string_upper_bound</definition>
        <argsstring>(const char *format, va_list args)</argsstring>
        <name>_dbus_printf_string_upper_bound</name>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Measure the length of the given format string and arguments, not including the terminating nul. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>a printf-style format string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments for the format string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>length of the given format string and args, or -1 if no memory</para></simplesect>
Measure the length of the given format string and arguments, not including the terminating nul. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="394" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="3250" bodyend="3311"/>
        <references refid="group__DBusString_1ga374640ddfa2f0b27a8356e2379ba8043" compoundref="dbus-string_8c" startline="190" endline="197">_dbus_string_init_const</references>
        <references refid="group__DBusString_1ga65f0f04b7c9371406fc87343f691e8da" compoundref="dbus-string_8c" startline="2554" endline="2636">_dbus_string_validate_utf8</references>
        <references refid="group__DBusProtocol_1gabb62fd6340d0787fbd56ff8dd2f326c7" compoundref="dbus-protocol_8h" startline="355">DBUS_ERROR_FAILED</references>
        <references refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" compoundref="dbus-memory_8c" startline="701" endline="740">dbus_free</references>
        <references refid="group__DBusMemory_1gaf6e588659067a854c3cca7ebe8ae5084" compoundref="dbus-memory_8c" startline="461" endline="516">dbus_malloc</references>
        <references refid="group__DBusMemory_1ga54ccb556e7964112a825a7f46c156ca0" compoundref="dbus-memory_8h" startline="58">dbus_new</references>
        <references refid="group__DBusErrors_1ga3cc15cc37bcd3aaca87aa4d791c124f5" compoundref="dbus-errors_8c" startline="243" endline="266">dbus_set_error_const</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusString_1ga8d794f292831d1a7edeb971b13a2c641" compoundref="dbus-string_8c" startline="1072" endline="1102">_dbus_string_append_printf_valist</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga04e98ad0e3a181f0a5921a4cbc49cf08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_stat</definition>
        <argsstring>(const DBusString *filename, DBusStat *statbuf, DBusError *error)</argsstring>
        <name>_dbus_stat</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="structDBusStat" kindref="compound">DBusStat</ref> *</type>
          <declname>statbuf</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>stat() wrapper. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the filename to stat </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>statbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>the stat info to fill in </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for error </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if error was set </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="413" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="706" bodyend="734"/>
        <references refid="group__DBusInternalsUtils_1ga2212aa0e5732257598a6597748c658e4" compoundref="dbus-sysdeps_8c" startline="614" endline="698">_dbus_error_from_errno</references>
        <references refid="structDBusStat_1a9c68f29816af750a47d80177a23d6cf1" compoundref="dbus-sysdeps_8h" startline="408">DBusStat::atime</references>
        <references refid="structDBusStat_1aceb3c4a3230d1a9063baee27c140fbb3" compoundref="dbus-sysdeps_8h" startline="410">DBusStat::ctime</references>
        <references refid="group__DBusSysdeps_1ga768a080926a119a6131083facc0bd42b" compoundref="dbus-sysdeps_8h" startline="107">DBUS_GID_UNSET</references>
        <references refid="group__DBusTypes_1ga8deac39e1bf9fcca44854afeaaaf6199">DBUS_INT64_CONSTANT</references>
        <references refid="group__DBusTypes_1gab650989bbedae260527d7ca663a2ad9f" compoundref="dbus-arch-deps_8h" startline="36">dbus_int64_t</references>
        <references refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="419">dbus_set_error</references>
        <references refid="group__DBusSysdeps_1ga3d2f3fb32bb759cabe362ca2de383f7d" compoundref="dbus-sysdeps_8h" startline="105">DBUS_UID_UNSET</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusStat_1a98dd4c45ffc8488b399cb3feb57ef48c" compoundref="dbus-sysdeps_8h" startline="406">DBusStat::gid</references>
        <references refid="structDBusStat_1a722ec64f90cf29e0b8bafaea55b90d27" compoundref="dbus-sysdeps_8h" startline="403">DBusStat::mode</references>
        <references refid="structDBusStat_1acf4750b66ccb06b49c7eaf2405d8c417" compoundref="dbus-sysdeps_8h" startline="409">DBusStat::mtime</references>
        <references refid="structDBusStat_1a1b5ef4ce7f46c798d4b222c61f8912f7" compoundref="dbus-sysdeps_8h" startline="404">DBusStat::nlink</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="structDBusStat_1a1b8b518248d41601766ae955bdca0de2" compoundref="dbus-sysdeps_8h" startline="407">DBusStat::size</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <references refid="structDBusStat_1a300fac914534803bcfacdd87b15e1a8d" compoundref="dbus-sysdeps_8h" startline="405">DBusStat::uid</references>
        <referencedby refid="group__DBusInternalsUtils_1gaa504db352a939909051a494d06c5b607" compoundref="dbus-userdb-util_8c" startline="49" endline="136">_dbus_is_console_user</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gae96a3f400324b065f78a865a86454d09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_full_duplex_pipe</definition>
        <argsstring>(int *fd1, int *fd2, dbus_bool_t blocking, DBusError *error)</argsstring>
        <name>_dbus_full_duplex_pipe</name>
        <param>
          <type>int *</type>
          <declname>fd1</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>fd2</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
          <declname>blocking</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Creates a full-duplex pipe (as in socketpair()). </para>        </briefdescription>
        <detaileddescription>
<para>Sets both ends of the pipe nonblocking.</para><para>Marks both file descriptors as close-on-exec</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd1</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for one end </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd2</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for the other end </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blocking</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if pipe should be blocking </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>error return </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on failure (if error is set)</para></simplesect>
Sets both ends of the pipe nonblocking.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd1</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for one end </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd2</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for the other end </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blocking</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if pipe should be blocking </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>error return </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on failure (if error is set) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="416" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="3175" bodyend="3239"/>
        <references refid="group__DBusSysdepsUnix_1gac448479a1674e3b86cee9a4bdc7eba03" compoundref="dbus-sysdeps-unix_8c" startline="3025" endline="3042">_dbus_close</references>
        <references refid="group__DBusInternalsUtils_1ga2212aa0e5732257598a6597748c658e4" compoundref="dbus-sysdeps_8c" startline="614" endline="698">_dbus_error_from_errno</references>
        <references refid="group__DBusSysdepsUnix_1ga000b1d83b0188e2db82d766b6665bb83" compoundref="dbus-sysdeps-unix_8c" startline="3003" endline="3015">_dbus_fd_set_close_on_exec</references>
        <references refid="group__DBusInternalsUtils_1ga56de84795d6df4162ad79b3be7af7588" compoundref="dbus-sysdeps_8c" startline="773" endline="776">_dbus_strerror_from_errno</references>
        <references refid="group__DBusInternalsUtils_1gabea2c16d6d3fe7c4eb5b9496fc877f84" compoundref="dbus-internals_8c" startline="230" endline="247">_dbus_warn</references>
        <references refid="group__DBusInternalsUtils_1gaec42589166158b1385d5f5439318cda2" compoundref="dbus-internals_8h" startline="179">_DBUS_ZERO</references>
        <references refid="group__DBusProtocol_1gabb62fd6340d0787fbd56ff8dd2f326c7" compoundref="dbus-protocol_8h" startline="355">DBUS_ERROR_FAILED</references>
        <references refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="419">dbus_set_error</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusInternalsUtils_1gaed0b5af565252185dedf99df5da8efc5" compoundref="dbus-spawn-win_8c" startline="644" endline="756">_dbus_spawn_async_with_babysitter</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga8646ab2ef727fcc862c7904113c88a8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_print_backtrace</definition>
        <argsstring>(void)</argsstring>
        <name>_dbus_print_backtrace</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>On GNU libc systems, print a crude backtrace to stderr. </para>        </briefdescription>
        <detaileddescription>
<para>On other systems, print &quot;no backtrace support&quot; and block for possible gdb attachment if an appropriate environment variable is set. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="421" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="3133" bodyend="3160"/>
        <referencedby refid="group__DBusSysdeps_1ga83c51771d3c4e612522bd5ad72e6ad7a" compoundref="dbus-sysdeps_8c" startline="77" endline="93">_dbus_abort</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gaca61af8681a48862835ea8cfd263f5ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_become_daemon</definition>
        <argsstring>(const DBusString *pidfile, DBusPipe *print_pid_pipe, DBusError *error, dbus_bool_t keep_umask)</argsstring>
        <name>_dbus_become_daemon</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>pidfile</declname>
        </param>
        <param>
          <type><ref refid="structDBusPipe" kindref="compound">DBusPipe</ref> *</type>
          <declname>print_pid_pipe</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
          <declname>keep_umask</declname>
        </param>
        <briefdescription>
<para>Does the chdir, fork, setsid, etc. </para>        </briefdescription>
        <detaileddescription>
<para>to become a daemon process.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pidfile</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>, or pidfile to create </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>print_pid_pipe</parametername>
</parameternamelist>
<parameterdescription>
<para>pipe to print daemon&apos;s pid to, or -1 for none </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for errors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keep_umask</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> to keep the original umask </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on failure</para></simplesect>
to become a daemon process.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pidfile</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>, or pidfile to create </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>print_pid_pipe</parametername>
</parameternamelist>
<parameterdescription>
<para>file descriptor to print daemon&apos;s pid to, or -1 for none </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for errors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keep_umask</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> to keep the original umask </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="423" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="85" bodyend="165"/>
        <references refid="group__DBusInternalsUtils_1ga0c4961ec784874f1b1f3aeccea8d3da1" compoundref="dbus-internals_8h" startline="145">_dbus_assert_not_reached</references>
        <references refid="group__DBusSysdepsUnix_1gac448479a1674e3b86cee9a4bdc7eba03" compoundref="dbus-sysdeps-unix_8c" startline="3025" endline="3042">_dbus_close</references>
        <references refid="group__DBusInternalsUtils_1ga2212aa0e5732257598a6597748c658e4" compoundref="dbus-sysdeps_8c" startline="614" endline="698">_dbus_error_from_errno</references>
        <references refid="group__DBusInternalsUtils_1gaf4f1db48d66dcb310b9771beb955578e" compoundref="dbus-sysdeps_8c" startline="706" endline="709">_dbus_error_from_system_errno</references>
        <references refid="group__DBusSysdeps_1gab846071a4de54cb7e518654f9375313a" compoundref="dbus-sysdeps_8c" startline="185" endline="193">_dbus_getenv</references>
        <references refid="group__DBusInternalsUtils_1ga56de84795d6df4162ad79b3be7af7588" compoundref="dbus-sysdeps_8c" startline="773" endline="776">_dbus_strerror_from_errno</references>
        <references refid="group__DBusInternalsUtils_1ga123620ec5ce2b881786588121d6a03fd" compoundref="dbus-sysdeps-util-unix_8c" startline="238" endline="303">_dbus_write_pid_to_file_and_pipe</references>
        <references refid="group__DBusProtocol_1gabb62fd6340d0787fbd56ff8dd2f326c7" compoundref="dbus-protocol_8h" startline="355">DBUS_ERROR_FAILED</references>
        <references refid="group__DBusProtocol_1ga33122bcaf8f5896ec222c755b6effb40" compoundref="dbus-protocol_8h" startline="369">DBUS_ERROR_NOT_SUPPORTED</references>
        <references refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="419">dbus_set_error</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="structDBusError_1afb559175326de5b6b340e26204e92d72" compoundref="dbus-errors_8h" startline="51">DBusError::message</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga45f661c5a089ed45233a1acabaf31964" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_verify_daemon_user</definition>
        <argsstring>(const char *user)</argsstring>
        <name>_dbus_verify_daemon_user</name>
        <param>
          <type>const char *</type>
          <declname>user</declname>
        </param>
        <briefdescription>
<para>Verify that after the fork we can successfully change to this user. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user</parametername>
</parameternamelist>
<parameterdescription>
<para>the username given in the daemon configuration </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> if username is valid </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="428" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="312" bodyend="319"/>
        <references refid="group__DBusInternalsUtils_1gac82f42ff83fabbde717cc08569265e6e" compoundref="dbus-userdb-util_8c" startline="199" endline="231">_dbus_get_user_id_and_primary_group</references>
        <references refid="group__DBusString_1ga374640ddfa2f0b27a8356e2379ba8043" compoundref="dbus-string_8c" startline="190" endline="197">_dbus_string_init_const</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga82c920a8c3b5958ba1ecf8e5f5d6373b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_change_to_daemon_user</definition>
        <argsstring>(const char *user, DBusError *error)</argsstring>
        <name>_dbus_change_to_daemon_user</name>
        <param>
          <type>const char *</type>
          <declname>user</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Changes the user and group the bus is running as. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user</parametername>
</parameternamelist>
<parameterdescription>
<para>the user to become </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for errors </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="429" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="332" bodyend="380"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusInternalsUtils_1ga2212aa0e5732257598a6597748c658e4" compoundref="dbus-sysdeps_8c" startline="614" endline="698">_dbus_error_from_errno</references>
        <references refid="group__DBusInternalsUtils_1gac82f42ff83fabbde717cc08569265e6e" compoundref="dbus-userdb-util_8c" startline="199" endline="231">_dbus_get_user_id_and_primary_group</references>
        <references refid="group__DBusString_1ga374640ddfa2f0b27a8356e2379ba8043" compoundref="dbus-string_8c" startline="190" endline="197">_dbus_string_init_const</references>
        <references refid="group__DBusInternalsUtils_1gabea2c16d6d3fe7c4eb5b9496fc877f84" compoundref="dbus-internals_8c" startline="230" endline="247">_dbus_warn</references>
        <references refid="group__DBusProtocol_1gabb62fd6340d0787fbd56ff8dd2f326c7" compoundref="dbus-protocol_8h" startline="355">DBUS_ERROR_FAILED</references>
        <references refid="group__DBusProtocol_1ga33122bcaf8f5896ec222c755b6effb40" compoundref="dbus-protocol_8h" startline="369">DBUS_ERROR_NOT_SUPPORTED</references>
        <references refid="group__DBusMemory_1ga34e666b19b015035a9a31e53da84b39a" compoundref="dbus-memory_8c" startline="701" endline="740">dbus_free</references>
        <references refid="group__DBusMemory_1gaba9d823abda7f4cadbaf5177d3b8b793" compoundref="dbus-memory_8h" startline="59">dbus_new0</references>
        <references refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="419">dbus_set_error</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga123620ec5ce2b881786588121d6a03fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_write_pid_to_file_and_pipe</definition>
        <argsstring>(const DBusString *pidfile, DBusPipe *print_pid_pipe, dbus_pid_t pid_to_write, DBusError *error)</argsstring>
        <name>_dbus_write_pid_to_file_and_pipe</name>
        <param>
          <type>const <ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>pidfile</declname>
        </param>
        <param>
          <type><ref refid="structDBusPipe" kindref="compound">DBusPipe</ref> *</type>
          <declname>print_pid_pipe</declname>
        </param>
        <param>
          <type><ref refid="group__DBusSysdeps_1ga1eff6303266888ec466cddba6c03aa40" kindref="member">dbus_pid_t</ref></type>
          <declname>pid_to_write</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Writes the given pid_to_write to a pidfile (if non-NULL) and/or to a pipe (if non-NULL). </para>        </briefdescription>
        <detaileddescription>
<para>Does nothing if pidfile and print_pid_pipe are both NULL.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pidfile</parametername>
</parameternamelist>
<parameterdescription>
<para>the file to write to or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>print_pid_pipe</parametername>
</parameternamelist>
<parameterdescription>
<para>the pipe to write to or <ref refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pid_to_write</parametername>
</parameternamelist>
<parameterdescription>
<para>the pid to write out </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>error on failure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>FALSE if error is set </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="432" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="238" bodyend="303"/>
        <references refid="group__DBusString_1ga100c5ce0696822c5a4cfbdfaba674d96" compoundref="dbus-string_8c" startline="935" endline="948">_dbus_string_append</references>
        <references refid="group__DBusString_1ga41141ca36c361f92b6029530ff83fa66" compoundref="dbus-sysdeps_8c" startline="354" endline="382">_dbus_string_append_int</references>
        <references refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" compoundref="dbus-string_8c" startline="259" endline="277">_dbus_string_free</references>
        <references refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" compoundref="dbus-string_8c" startline="175" endline="178">_dbus_string_init</references>
        <references refid="group__DBusProtocol_1gabb62fd6340d0787fbd56ff8dd2f326c7" compoundref="dbus-protocol_8h" startline="355">DBUS_ERROR_FAILED</references>
        <references refid="group__DBusErrors_1gab0ed62e9fc2685897eb2d41467c89405" compoundref="dbus-errors_8c" startline="329" endline="335">dbus_error_is_set</references>
        <references refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="419">dbus_set_error</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusSysdeps_1gaca61af8681a48862835ea8cfd263f5ab" compoundref="dbus-sysdeps-util-unix_8c" startline="85" endline="165">_dbus_become_daemon</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga3551d425aba3d92e652b8809fdfe9339" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_command_for_pid</definition>
        <argsstring>(unsigned long pid, DBusString *str, int max_len, DBusError *error)</argsstring>
        <name>_dbus_command_for_pid</name>
        <param>
          <type>unsigned long</type>
          <declname>pid</declname>
        </param>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_len</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Get a printable string describing the command used to execute the process with pid. </para>        </briefdescription>
        <detaileddescription>
<para>This string should only be used for informative purposes such as logging; it may not be trusted.</para><para>The command is guaranteed to be printable ASCII and no longer than max_len.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pid</parametername>
</parameternamelist>
<parameterdescription>
<para>Process id </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Append command to this string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum length of returned command </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for errors </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="437" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="1208" bodyend="1273"/>
        <references refid="group__DBusSysdepsUnix_1gac448479a1674e3b86cee9a4bdc7eba03" compoundref="dbus-sysdeps-unix_8c" startline="3025" endline="3042">_dbus_close</references>
        <references refid="group__DBusInternalsUtils_1ga2212aa0e5732257598a6597748c658e4" compoundref="dbus-sysdeps_8c" startline="614" endline="698">_dbus_error_from_errno</references>
        <references refid="group__DBusSysdepsUnix_1gaf52cb1d5b9fc5611808ce32eff898c28" compoundref="dbus-sysdeps-unix_8c" startline="628" endline="675">_dbus_read</references>
        <references refid="group__DBusString_1gab0078cf7e0e5bd784ec6d6e0cc3923a2" compoundref="dbus-string_8c" startline="1113" endline="1125">_dbus_string_append_printf</references>
        <references refid="group__DBusString_1ga3c10f0d1bcaa3b450025b9c6a8b901d7" compoundref="dbus-string_8c" startline="1282" endline="1293">_dbus_string_copy</references>
        <references refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" compoundref="dbus-string_8c" startline="259" endline="277">_dbus_string_free</references>
        <references refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" compoundref="dbus-string_8c" startline="175" endline="178">_dbus_string_init</references>
        <references refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="419">dbus_set_error</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga4aa7500366dad2dd6d3fa97b3aa7165b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_set_signal_handler</definition>
        <argsstring>(int sig, DBusSignalHandler handler)</argsstring>
        <name>_dbus_set_signal_handler</name>
        <param>
          <type>int</type>
          <declname>sig</declname>
        </param>
        <param>
          <type><ref refid="group__DBusSysdeps_1gad53562d2dfbcd5b0132140a958d9efe6" kindref="member">DBusSignalHandler</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Installs a UNIX signal handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>the signal to handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler</para></parameterdescription>
</parameteritem>
</parameterlist>
Installs a UNIX signal handler.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>the signal to handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>the handler </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="445" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="614" bodyend="625"/>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga31ec42cef2d15ca358e737bb5f19c5cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_user_at_console</definition>
        <argsstring>(const char *username, DBusError *error)</argsstring>
        <name>_dbus_user_at_console</name>
        <param>
          <type>const char *</type>
          <declname>username</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Checks if user is at the console. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>username</parametername>
</parameternamelist>
<parameterdescription>
<para>user to check </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>return location for errors </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> is the user is at the consolei and there are no errors </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="448" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="645" bodyend="679"/>
        <references refid="group__DBusSysdeps_1gae3a3fdc0c6001e367584bb016aca495d" compoundref="dbus-sysdeps-unix_8c" startline="2825" endline="2852">_dbus_concat_dir_and_file</references>
        <references refid="group__DBusInternalsUtils_1ga13a527e32c05b63e8b32a63d728e20e8" compoundref="dbus-sysdeps-util-unix_8c" startline="633" endline="636">_dbus_file_exists</references>
        <references refid="group__DBusString_1ga100c5ce0696822c5a4cfbdfaba674d96" compoundref="dbus-string_8c" startline="935" endline="948">_dbus_string_append</references>
        <references refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" compoundref="dbus-string_8c" startline="259" endline="277">_dbus_string_free</references>
        <references refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" compoundref="dbus-string_8c" startline="175" endline="178">_dbus_string_init</references>
        <references refid="group__DBusString_1ga374640ddfa2f0b27a8356e2379ba8043" compoundref="dbus-string_8c" startline="190" endline="197">_dbus_string_init_const</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <referencedby refid="group__DBusInternalsUtils_1gaa504db352a939909051a494d06c5b607" compoundref="dbus-userdb-util_8c" startline="49" endline="136">_dbus_is_console_user</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga2459d60bd0dac4119a118191b091b967" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_init_system_log</definition>
        <argsstring>(dbus_bool_t is_daemon)</argsstring>
        <name>_dbus_init_system_log</name>
        <param>
          <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
          <declname>is_daemon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="451" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="520" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga73a19aaac889c47ba5f6caa5107a47a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_system_log</definition>
        <argsstring>(DBusSystemLogSeverity severity, const char *msg,...)</argsstring>
        <name>_dbus_system_log</name>
        <param>
          <type>DBusSystemLogSeverity</type>
          <declname>severity</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Log a message to the system log file (e.g. </para>        </briefdescription>
        <detaileddescription>
<para>syslog on Unix).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>severity</parametername>
</parameternamelist>
<parameterdescription>
<para>a severity value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>a printf-style format string </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="460" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="543" bodyend="552"/>
        <references refid="group__DBusInternalsUtils_1ga82cb5dfe162480ad15faddcf74ea0617" compoundref="dbus-sysdeps-util-unix_8c" startline="565" endline="606">_dbus_system_logv</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga82cb5dfe162480ad15faddcf74ea0617" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_system_logv</definition>
        <argsstring>(DBusSystemLogSeverity severity, const char *msg, va_list args)</argsstring>
        <name>_dbus_system_logv</name>
        <param>
          <type>DBusSystemLogSeverity</type>
          <declname>severity</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Log a message to the system log file (e.g. </para>        </briefdescription>
        <detaileddescription>
<para>syslog on Unix).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>severity</parametername>
</parameternamelist>
<parameterdescription>
<para>a severity value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>a printf-style format string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments for the format string</para></parameterdescription>
</parameteritem>
</parameterlist>
If the FATAL severity is given, this function will terminate the program with an error code. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="461" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="565" bodyend="606"/>
        <references refid="group__DBusSysdeps_1ga870807b07f3b1c1a725eb9408edad147" compoundref="dbus-sysdeps-unix_8c" startline="2471" endline="2474">_dbus_getpid</references>
        <references refid="group__DBusSysdeps_1gaf4553a43e3b8c0e43d9148a00dcc3fa4" compoundref="dbus-sysdeps_8h" startline="110">DBUS_PID_FORMAT</references>
        <referencedby refid="group__DBusSysdeps_1ga73a19aaac889c47ba5f6caa5107a47a5" compoundref="dbus-sysdeps-util-unix_8c" startline="543" endline="552">_dbus_system_log</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gabc4712c0db91f11854cdd933027355af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_get_autolaunch_address</definition>
        <argsstring>(const char *scope, DBusString *address, DBusError *error)</argsstring>
        <name>_dbus_get_autolaunch_address</name>
        <param>
          <type>const char *</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>address</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Returns the address of a new session bus. </para>        </briefdescription>
        <detaileddescription>
<para>If successful, returns <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> and appends the address to <computeroutput>address</computeroutput>. If a failure happens, returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> and sets an error in <computeroutput>error</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>scope of autolaunch (Windows only) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="structDBusString" kindref="compound">DBusString</ref> where the address can be stored </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="structDBusError" kindref="compound">DBusError</ref> to store the error in case of failure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success, <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if an error happened </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="498" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="3574" bodyend="3663"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusSysdeps_1ga6c14c6bf4dd98b3fe3a114e9f5630148" compoundref="dbus-sysdeps-unix_8c" startline="4127" endline="4170">_dbus_check_setuid</references>
        <references refid="group__DBusInternalsUtils_1ga49ba67405d677af6cde9329ed87ea91f" compoundref="dbus-internals_8c" startline="854" endline="889">_dbus_get_local_machine_uuid_encoded</references>
        <references refid="group__DBusSysdeps_1gab846071a4de54cb7e518654f9375313a" compoundref="dbus-sysdeps_8c" startline="185" endline="193">_dbus_getenv</references>
        <references refid="group__DBusInternalsUtils_1gac153abad46f4eb80999a2b340d29d1f0" compoundref="dbus-internals_8h" startline="174">_DBUS_N_ELEMENTS</references>
        <references refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" compoundref="dbus-string_8c" startline="259" endline="277">_dbus_string_free</references>
        <references refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" compoundref="dbus-string_8c" startline="175" endline="178">_dbus_string_init</references>
        <references refid="group__DBusProtocol_1gabb62fd6340d0787fbd56ff8dd2f326c7" compoundref="dbus-protocol_8h" startline="355">DBUS_ERROR_FAILED</references>
        <references refid="group__DBusProtocol_1ga33122bcaf8f5896ec222c755b6effb40" compoundref="dbus-protocol_8h" startline="369">DBUS_ERROR_NOT_SUPPORTED</references>
        <references refid="group__DBusErrors_1ga3cc15cc37bcd3aaca87aa4d791c124f5" compoundref="dbus-errors_8c" startline="243" endline="266">dbus_set_error_const</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusTransport_1gaf27a2aceb062921f3915acb1491a646a" compoundref="dbus-transport_8c" startline="216" endline="236">_dbus_transport_finalize_base</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gade479f90c1083346d74bc21af178d856" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_lookup_session_address</definition>
        <argsstring>(dbus_bool_t *supported, DBusString *address, DBusError *error)</argsstring>
        <name>_dbus_lookup_session_address</name>
        <param>
          <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref> *</type>
          <declname>supported</declname>
        </param>
        <param>
          <type><ref refid="structDBusString" kindref="compound">DBusString</ref> *</type>
          <declname>address</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Determines the address of the session bus by querying a platform-specific method. </para>        </briefdescription>
        <detaileddescription>
<para>The first parameter will be a boolean specifying whether or not a dynamic session lookup is supported on this platform.</para><para>If supported is TRUE and the return value is <ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref>, the address will be appended to <computeroutput>address</computeroutput>. If a failure happens, returns <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> and sets an error in <computeroutput>error</computeroutput>.</para><para>If supported is FALSE, ignore the return value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>supported</parametername>
</parameternamelist>
<parameterdescription>
<para>returns whether this method is supported </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="structDBusString" kindref="compound">DBusString</ref> where the address can be stored </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="structDBusError" kindref="compound">DBusError</ref> to store the error in case of failure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d" kindref="member">TRUE</ref> on success, <ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if an error happened </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="502" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="3856" bodyend="3871"/>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga3f073afc8ef8397471531baf513e1bb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_read_local_machine_uuid</definition>
        <argsstring>(DBusGUID *machine_id, dbus_bool_t create_if_not_found, DBusError *error)</argsstring>
        <name>_dbus_read_local_machine_uuid</name>
        <param>
          <type><ref refid="unionDBusGUID" kindref="compound">DBusGUID</ref> *</type>
          <declname>machine_id</declname>
        </param>
        <param>
          <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
          <declname>create_if_not_found</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Reads the uuid of the machine we&apos;re running on from the dbus configuration. </para>        </briefdescription>
        <detaileddescription>
<para>Optionally try to create it (only root can do this usually).</para><para>On UNIX, reads a file that gets created by dbus-uuidgen in a post-install script. On Windows, if there&apos;s a standard machine uuid we could just use that, but I can&apos;t find one with the right properties (the hardware profile guid can change without rebooting I believe). If there&apos;s no standard one we might want to use the registry instead of a file for this, and I&apos;m not sure how we&apos;d ensure the uuid gets created.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>machine_id</parametername>
</parameternamelist>
<parameterdescription>
<para>guid to init with the machine&apos;s uuid </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>create_if_not_found</parametername>
</parameternamelist>
<parameterdescription>
<para>try to create the uuid if it doesn&apos;t exist </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>the error return </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if the error is set </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="511" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="3684" bodyend="3721"/>
        <references refid="group__DBusSysdeps_1ga095c54de3974c6d04c29ef86c6e06e35" compoundref="dbus-sysdeps-win_8c" startline="2103" endline="2115">_dbus_append_user_from_current_process</references>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <references refid="group__DBusInternalsUtils_1ga08c2922335845e5c857e88399436b9ba" compoundref="dbus-internals_8c" startline="641" endline="653">_dbus_generate_uuid</references>
        <references refid="group__DBusInternalsUtils_1ga709fd30e6b940a5952af38efaf24ad51" compoundref="dbus-internals_8c" startline="806" endline="837">_dbus_read_uuid_file</references>
        <references refid="group__DBusSHA_1ga4278fb9df967943834c4ad6332f2c28b" compoundref="dbus-sha_8c" startline="483" endline="510">_dbus_sha_compute</references>
        <references refid="group__DBusString_1ga100c5ce0696822c5a4cfbdfaba674d96" compoundref="dbus-string_8c" startline="935" endline="948">_dbus_string_append</references>
        <references refid="group__DBusString_1ga781ca91acda49a834dce7d0ed0eef212" compoundref="dbus-string_8c" startline="259" endline="277">_dbus_string_free</references>
        <references refid="group__DBusString_1ga348252317f7bb8ac43529972945830ae" compoundref="dbus-string_8c" startline="175" endline="178">_dbus_string_init</references>
        <references refid="group__DBusString_1ga374640ddfa2f0b27a8356e2379ba8043" compoundref="dbus-string_8c" startline="190" endline="197">_dbus_string_init_const</references>
        <references refid="group__DBusString_1ga698f4b0299e6c6a707fd7e9c14915f00" compoundref="dbus-string_8c" startline="2484" endline="2505">_dbus_string_tolower_ascii</references>
        <references refid="group__DBusInternalsUtils_1gaa16de06b33c56323fa33dd96eaab3829" compoundref="dbus-internals_8c" startline="757" endline="793">_dbus_write_uuid_file</references>
        <references refid="unionDBusGUID_1a3db114d87644fab561564504a8653e72" compoundref="dbus-internals_8h" startline="352">DBusGUID::as_uint32s</references>
        <references refid="group__DBusErrors_1gaac6c14ead14829ee4e090f39de6a7568" compoundref="dbus-errors_8c" startline="211" endline="226">dbus_error_free</references>
        <references refid="group__DBusProtocol_1gac32eaf0b92f798307853cd4fe0cf11c2" compoundref="dbus-protocol_8h" startline="357">DBUS_ERROR_NO_MEMORY</references>
        <references refid="group__DBusErrors_1ga89d2ad4bde21f9e0057fac07a79885e3" compoundref="dbus-errors_8c" startline="354" endline="419">dbus_set_error</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusInternalsUtils_1ga49ba67405d677af6cde9329ed87ea91f" compoundref="dbus-internals_8c" startline="854" endline="889">_dbus_get_local_machine_uuid_encoded</referencedby>
        <referencedby refid="group__DBusInternalsUuidgen_1ga1af5f50499f4c9b7dcaa1b36140b8f9c" compoundref="dbus-uuidgen_8c" startline="83" endline="111">dbus_internal_do_not_use_get_uuid</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gae7be34dbffb6458578e86c59a26d4fad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_threads_init_platform_specific</definition>
        <argsstring>(void)</argsstring>
        <name>_dbus_threads_init_platform_specific</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize threads as in <ref refid="group__DBusThreads_1ga33b6cf3b8f1e41bad5508f84758818a7" kindref="member">dbus_threads_init_default()</ref>, appropriately for the platform. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref> if no memory </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="520" column="1" bodyfile="dbus/dbus-sysdeps-pthread.c" bodystart="278" bodyend="288"/>
        <references refid="group__DBusSysdeps_1ga6c14c6bf4dd98b3fe3a114e9f5630148" compoundref="dbus-sysdeps-unix_8c" startline="4127" endline="4170">_dbus_check_setuid</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" compoundref="dbus-threads_8c" startline="391" endline="412">dbus_threads_init</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga65d32daf6d876dd39b7410f3fa35b591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_threads_lock_platform_specific</definition>
        <argsstring>(void)</argsstring>
        <name>_dbus_threads_lock_platform_specific</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Lock a static mutex used to protect <ref refid="group__DBusSysdeps_1gae7be34dbffb6458578e86c59a26d4fad" kindref="member">_dbus_threads_init_platform_specific()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="525" column="1" bodyfile="dbus/dbus-sysdeps-pthread.c" bodystart="293" bodyend="296"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <referencedby refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" compoundref="dbus-memory_8c" startline="897" endline="918">dbus_shutdown</referencedby>
        <referencedby refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" compoundref="dbus-threads_8c" startline="391" endline="412">dbus_threads_init</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga99c22b80d17ef18fa0a11f3a2a415403" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_threads_unlock_platform_specific</definition>
        <argsstring>(void)</argsstring>
        <name>_dbus_threads_unlock_platform_specific</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Undo <ref refid="group__DBusSysdeps_1ga65d32daf6d876dd39b7410f3fa35b591" kindref="member">_dbus_threads_lock_platform_specific()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="530" column="1" bodyfile="dbus/dbus-sysdeps-pthread.c" bodystart="299" bodyend="302"/>
        <references refid="group__DBusInternalsUtils_1ga129c6c03f011cdc171934d5d386cc797" compoundref="dbus-internals_8h" startline="135">_dbus_assert</references>
        <referencedby refid="group__DBusMemory_1ga01912903e39428872920d861ef565bac" compoundref="dbus-memory_8c" startline="897" endline="918">dbus_shutdown</referencedby>
        <referencedby refid="group__DBusThreads_1gac7b8a7001befc3eaa8c6b043151008dc" compoundref="dbus-threads_8c" startline="391" endline="412">dbus_threads_init</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga1b30aa55e8758ed6e1b62e0f86866543" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long _dbus_pid_for_log</definition>
        <argsstring>(void)</argsstring>
        <name>_dbus_pid_for_log</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>The only reason this is separate from <ref refid="group__DBusSysdeps_1ga870807b07f3b1c1a725eb9408edad147" kindref="member">_dbus_getpid()</ref> is to allow it on Windows for logging but not for other purposes. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>process ID to put in log messages </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="536" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="2501" bodyend="2504"/>
        <references refid="group__DBusSysdeps_1ga870807b07f3b1c1a725eb9408edad147" compoundref="dbus-sysdeps-win_8c" startline="2122" endline="2125">_dbus_getpid</references>
        <references refid="group__DBusMacros_1gaa93f0eb578d23995850d61f7d61c55c1">FALSE</references>
        <references refid="group__DBusMacros_1ga070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</references>
        <references refid="group__DBusMacros_1gaa8cecfc5c5c054d2875c03e77b7be15d">TRUE</references>
        <referencedby refid="group__DBusSysdeps_1ga83c51771d3c4e612522bd5ad72e6ad7a" compoundref="dbus-sysdeps_8c" startline="77" endline="93">_dbus_abort</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1ga9912f2c86e49357eb9729729dd46f50d" compoundref="dbus-internals_8c" startline="912" endline="924">_dbus_real_assert</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1ga3de125028afc39ab16e6585add8ad181" compoundref="dbus-internals_8c" startline="937" endline="944">_dbus_real_assert_not_reached</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1ga63f2f8a068454b781f214ba596e313b4" compoundref="dbus-internals_8c" startline="258" endline="277">_dbus_warn_check_failed</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga870807b07f3b1c1a725eb9408edad147" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusSysdeps_1ga1eff6303266888ec466cddba6c03aa40" kindref="member">dbus_pid_t</ref></type>
        <definition>dbus_pid_t _dbus_getpid</definition>
        <argsstring>(void)</argsstring>
        <name>_dbus_getpid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets our process ID. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>process ID </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="542" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="2471" bodyend="2474"/>
        <referencedby refid="group__DBusSysdeps_1ga095c54de3974c6d04c29ef86c6e06e35" compoundref="dbus-sysdeps-win_8c" startline="2103" endline="2115">_dbus_append_user_from_current_process</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga9d5493f8bd1c5577060c8c6dce44d09f" compoundref="dbus-sysdeps-unix_8c" startline="2430" endline="2446">_dbus_credentials_add_from_current_process</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga1b30aa55e8758ed6e1b62e0f86866543" compoundref="dbus-sysdeps-win_8c" startline="944" endline="947">_dbus_pid_for_log</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga82cb5dfe162480ad15faddcf74ea0617" compoundref="dbus-sysdeps-util-unix_8c" startline="565" endline="606">_dbus_system_logv</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga184b42c4b42b91ef73e9ee50a1fa12c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_flush_caches</definition>
        <argsstring>(void)</argsstring>
        <name>_dbus_flush_caches</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Called when the bus daemon is signaled to reload its configuration; any caches should be nuked. </para>        </briefdescription>
        <detaileddescription>
<para>Of course any caches that need explicit reload are probably broken, but c&apos;est la vie. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="547" column="1" bodyfile="dbus/dbus-sysdeps-unix.c" bodystart="3881" bodyend="3884"/>
        <references refid="group__DBusInternalsUtils_1ga788ce7775d7f812d28d931e8b87ddfde" compoundref="dbus-userdb_8c" startline="349" endline="361">_dbus_user_database_flush_system</references>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga36cf9544881e68c162e9d9ba6697e6ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* _dbus_replace_install_prefix</definition>
        <argsstring>(const char *configure_time_path)</argsstring>
        <name>_dbus_replace_install_prefix</name>
        <param>
          <type>const char *</type>
          <declname>configure_time_path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="557" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="1283" bodyend="1286"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga7c32ae74e6ebbb28ab28853237be034e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DBusRLimit *</type>
        <definition>DBusRLimit* _dbus_rlimit_save_fd_limit</definition>
        <argsstring>(DBusError *error)</argsstring>
        <name>_dbus_rlimit_save_fd_limit</name>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="569" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="489" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga72b9aeaedfccd2143bdd889b6e98d0cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_rlimit_raise_fd_limit_if_privileged</definition>
        <argsstring>(unsigned int desired, DBusError *error)</argsstring>
        <name>_dbus_rlimit_raise_fd_limit_if_privileged</name>
        <param>
          <type>unsigned int</type>
          <declname>desired</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="570" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="496" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1gab87dbd966b0051b7ff916e06e43fcf2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__DBusTypes_1ga39c9cb0f3a2a8ad6f55cc4855d035349" kindref="member">dbus_bool_t</ref></type>
        <definition>dbus_bool_t _dbus_rlimit_restore_fd_limit</definition>
        <argsstring>(DBusRLimit *saved, DBusError *error)</argsstring>
        <name>_dbus_rlimit_restore_fd_limit</name>
        <param>
          <type>DBusRLimit *</type>
          <declname>saved</declname>
        </param>
        <param>
          <type><ref refid="structDBusError" kindref="compound">DBusError</ref> *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="572" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="504" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="group__DBusSysdeps_1ga53db90ef9ed40073f1b0821d1589a024" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _dbus_rlimit_free</definition>
        <argsstring>(DBusRLimit *lim)</argsstring>
        <name>_dbus_rlimit_free</name>
        <param>
          <type>DBusRLimit *</type>
          <declname>lim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="574" column="1" bodyfile="dbus/dbus-sysdeps-util-unix.c" bodystart="514" bodyend="517"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__DBusSysdeps_1ga4eb5f05dd6ad89caa4b0340e1cf0b8d9" prot="public" static="no">
        <name>DBUS_PID_UNSET</name>
        <initializer>((<ref refid="group__DBusSysdeps_1ga1eff6303266888ec466cddba6c03aa40" kindref="member">dbus_pid_t</ref>) -1)</initializer>
        <briefdescription>
<para>an invalid PID used to represent an uninitialized dbus_pid_t field </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="103" column="9" bodyfile="dbus/dbus-sysdeps.h" bodystart="103" bodyend="-1"/>
        <referencedby refid="group__DBusCredentials_1ga749dd398d725f37a7943d60074785844" compoundref="dbus-credentials_8c" startline="70" endline="86">_dbus_credentials_new</referencedby>
        <referencedby refid="group__DBusCredentials_1ga0fb8d13878e126ccc243c4a30fd8598c" compoundref="dbus-credentials_8c" startline="228" endline="245">_dbus_credentials_include</referencedby>
        <referencedby refid="group__DBusCredentials_1ga1c6090c76e5151ae8a1efe9e84382934" compoundref="dbus-credentials_8c" startline="321" endline="336">_dbus_credentials_are_superset</referencedby>
        <referencedby refid="group__DBusCredentials_1ga9aea1a288097b0820d1cd05c2448501d" compoundref="dbus-credentials_8c" startline="345" endline="352">_dbus_credentials_are_empty</referencedby>
        <referencedby refid="group__DBusCredentials_1gabd5a6d038f1d35fd23af8b2e73bb7ef8" compoundref="dbus-credentials_8c" startline="408" endline="438">_dbus_credentials_add_credential</referencedby>
        <referencedby refid="group__DBusCredentials_1ga40a5c7e37b10419e233a473dc7173f3c" compoundref="dbus-credentials_8c" startline="446" endline="455">_dbus_credentials_clear</referencedby>
        <referencedby refid="group__DBusCredentials_1ga50047ecf44c85ecb0878a370592c1576" compoundref="dbus-credentials_8c" startline="514" endline="546">_dbus_credentials_to_string_append</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga9906c86bebb51358f0d8df6a42af30f6" compoundref="dbus-sysdeps-unix_8c" startline="1701" endline="1988">_dbus_read_credentials_socket</referencedby>
        <referencedby refid="group__DBusTransport_1gae66bc81abe904a4b3ab32d8920c8fe1e" compoundref="dbus-transport_8c" startline="1343" endline="1366">_dbus_transport_get_unix_process_id</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__DBusSysdeps_1ga3d2f3fb32bb759cabe362ca2de383f7d" prot="public" static="no">
        <name>DBUS_UID_UNSET</name>
        <initializer>((<ref refid="group__DBusSysdeps_1ga186e987b700f9ddc6cea8aa0db82b151" kindref="member">dbus_uid_t</ref>) -1)</initializer>
        <briefdescription>
<para>an invalid UID used to represent an uninitialized dbus_uid_t field </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="105" column="9" bodyfile="dbus/dbus-sysdeps.h" bodystart="105" bodyend="-1"/>
        <referencedby refid="group__DBusBus_1ga24d782c710f3d82caf1b1ed582dcf474" compoundref="dbus-bus_8c" startline="865" endline="927">dbus_bus_get_unix_user</referencedby>
        <referencedby refid="group__DBusCredentials_1ga749dd398d725f37a7943d60074785844" compoundref="dbus-credentials_8c" startline="70" endline="86">_dbus_credentials_new</referencedby>
        <referencedby refid="group__DBusCredentials_1ga0fb8d13878e126ccc243c4a30fd8598c" compoundref="dbus-credentials_8c" startline="228" endline="245">_dbus_credentials_include</referencedby>
        <referencedby refid="group__DBusCredentials_1ga1c6090c76e5151ae8a1efe9e84382934" compoundref="dbus-credentials_8c" startline="321" endline="336">_dbus_credentials_are_superset</referencedby>
        <referencedby refid="group__DBusCredentials_1ga9aea1a288097b0820d1cd05c2448501d" compoundref="dbus-credentials_8c" startline="345" endline="352">_dbus_credentials_are_empty</referencedby>
        <referencedby refid="group__DBusCredentials_1gabfd7a1f681a91b45ba2f4e7461131827" compoundref="dbus-credentials_8c" startline="361" endline="366">_dbus_credentials_are_anonymous</referencedby>
        <referencedby refid="group__DBusCredentials_1gabd5a6d038f1d35fd23af8b2e73bb7ef8" compoundref="dbus-credentials_8c" startline="408" endline="438">_dbus_credentials_add_credential</referencedby>
        <referencedby refid="group__DBusCredentials_1ga40a5c7e37b10419e233a473dc7173f3c" compoundref="dbus-credentials_8c" startline="446" endline="455">_dbus_credentials_clear</referencedby>
        <referencedby refid="group__DBusCredentials_1ga50047ecf44c85ecb0878a370592c1576" compoundref="dbus-credentials_8c" startline="514" endline="546">_dbus_credentials_to_string_append</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga9906c86bebb51358f0d8df6a42af30f6" compoundref="dbus-sysdeps-unix_8c" startline="1701" endline="1988">_dbus_read_credentials_socket</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga8e16f75e361d9fed43223f69baf0e2a5" compoundref="dbus-sysdeps-unix_8c" startline="2084" endline="2120">_dbus_check_dir_is_private_to_user</referencedby>
        <referencedby refid="group__DBusSysdepsUnix_1ga95e9deb9dd2d76aa3a64fdac555d956d" compoundref="dbus-sysdeps-unix_8c" startline="2397" endline="2403">_dbus_user_info_fill</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga3cc5a5734416858fa58f3166ed181a64" compoundref="dbus-sysdeps-unix_8c" startline="3900" endline="3963">_dbus_append_keyring_directory_for_credentials</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga04e98ad0e3a181f0a5921a4cbc49cf08" compoundref="dbus-sysdeps-util-win_8c" startline="376" endline="459">_dbus_stat</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1gaf6b7452691c0c7d11fec4b9214137052" compoundref="dbus-userdb-util_8c" startline="246" endline="333">_dbus_user_database_lookup_group</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1ga959372f7d7cdea35ffbac3b78e29a1b0" compoundref="dbus-userdb_8c" startline="128" endline="216">_dbus_user_database_lookup</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1gaccf1d5b330707a1835dcf4ce49a29c8c" compoundref="dbus-userdb_8c" startline="676" endline="683">_dbus_user_database_get_username</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__DBusSysdeps_1ga768a080926a119a6131083facc0bd42b" prot="public" static="no">
        <name>DBUS_GID_UNSET</name>
        <initializer>((<ref refid="group__DBusSysdeps_1ga2f5c2e418b81ec2a86594f56ec6d7627" kindref="member">dbus_gid_t</ref>) -1)</initializer>
        <briefdescription>
<para>an invalid GID used to represent an uninitialized dbus_gid_t field </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="107" column="9" bodyfile="dbus/dbus-sysdeps.h" bodystart="107" bodyend="-1"/>
        <referencedby refid="group__DBusSysdeps_1ga8e16f75e361d9fed43223f69baf0e2a5" compoundref="dbus-sysdeps-unix_8c" startline="2084" endline="2120">_dbus_check_dir_is_private_to_user</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga1821b64302fe8e12278fa227eb11d393" compoundref="dbus-sysdeps-util-unix_8c" startline="850" endline="854">_dbus_directory_close</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1ga23814bdf1859c6aa52da1feab8f1aed4" compoundref="dbus-sysdeps-util-unix_8c" startline="1000" endline="1007">_dbus_group_info_fill</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga04e98ad0e3a181f0a5921a4cbc49cf08" compoundref="dbus-sysdeps-util-win_8c" startline="376" endline="459">_dbus_stat</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1gaf6b7452691c0c7d11fec4b9214137052" compoundref="dbus-userdb-util_8c" startline="246" endline="333">_dbus_user_database_lookup_group</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1gad370299b907799440331c47e8d2357e0" compoundref="dbus-userdb-util_8c" startline="347" endline="354">_dbus_user_database_get_groupname</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__DBusSysdeps_1gaf4553a43e3b8c0e43d9148a00dcc3fa4" prot="public" static="no">
        <name>DBUS_PID_FORMAT</name>
        <initializer>&quot;%lu&quot;</initializer>
        <briefdescription>
<para>an appropriate printf format for dbus_pid_t </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="110" column="9" bodyfile="dbus/dbus-sysdeps.h" bodystart="110" bodyend="-1"/>
        <referencedby refid="group__DBusCredentials_1ga50047ecf44c85ecb0878a370592c1576" compoundref="dbus-credentials_8c" startline="514" endline="546">_dbus_credentials_to_string_append</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga9906c86bebb51358f0d8df6a42af30f6" compoundref="dbus-sysdeps-unix_8c" startline="1701" endline="1988">_dbus_read_credentials_socket</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga82cb5dfe162480ad15faddcf74ea0617" compoundref="dbus-sysdeps-util-unix_8c" startline="565" endline="606">_dbus_system_logv</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__DBusSysdeps_1gab657f0434f01b463891942f373f7b4a1" prot="public" static="no">
        <name>DBUS_UID_FORMAT</name>
        <initializer>&quot;%lu&quot;</initializer>
        <briefdescription>
<para>an appropriate printf format for dbus_uid_t </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="112" column="9" bodyfile="dbus/dbus-sysdeps.h" bodystart="112" bodyend="-1"/>
        <referencedby refid="group__DBusCredentials_1ga50047ecf44c85ecb0878a370592c1576" compoundref="dbus-credentials_8c" startline="514" endline="546">_dbus_credentials_to_string_append</referencedby>
        <referencedby refid="group__DBusSysdeps_1ga9906c86bebb51358f0d8df6a42af30f6" compoundref="dbus-sysdeps-unix_8c" startline="1701" endline="1988">_dbus_read_credentials_socket</referencedby>
        <referencedby refid="group__DBusTransport_1gaceee4b098b0177870ad934daad90a9c6" compoundref="dbus-transport_8c" startline="527" endline="530">_dbus_transport_get_is_connected</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1gaa504db352a939909051a494d06c5b607" compoundref="dbus-userdb-util_8c" startline="49" endline="136">_dbus_is_console_user</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1ga959372f7d7cdea35ffbac3b78e29a1b0" compoundref="dbus-userdb_8c" startline="128" endline="216">_dbus_user_database_lookup</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__DBusSysdeps_1gaaab5918b2ae57886d9783df09bd61c7e" prot="public" static="no">
        <name>DBUS_GID_FORMAT</name>
        <initializer>&quot;%lu&quot;</initializer>
        <briefdescription>
<para>an appropriate printf format for dbus_gid_t </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="114" column="9" bodyfile="dbus/dbus-sysdeps.h" bodystart="114" bodyend="-1"/>
        <referencedby refid="group__DBusSysdeps_1ga8e16f75e361d9fed43223f69baf0e2a5" compoundref="dbus-sysdeps-unix_8c" startline="2084" endline="2120">_dbus_check_dir_is_private_to_user</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1gaf6b7452691c0c7d11fec4b9214137052" compoundref="dbus-userdb-util_8c" startline="246" endline="333">_dbus_user_database_lookup_group</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__DBusSysdeps_1ga96b5ba58b9939d789bfece0d9bb82f41" prot="public" static="no">
        <name>_DBUS_POLLIN</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>There is data to read. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="294" column="9" bodyfile="dbus/dbus-sysdeps.h" bodystart="294" bodyend="-1"/>
        <referencedby refid="group__DBusInternalsUtils_1ga3205e9f8672271794aeb9d451e2fcc4a" compoundref="dbus-spawn_8c" startline="324" endline="402">_dbus_babysitter_unref</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1ga5f467b14f0c2f667e46c4ba786808e5b" compoundref="dbus-spawn_8c" startline="813" endline="826">_dbus_babysitter_set_watch_functions</referencedby>
        <referencedby refid="group__DBusSysdeps_1gac1cdb5995dcef6dd54399ab610ae689a" compoundref="dbus-sysdeps-unix_8c" startline="2634" endline="2728">_dbus_poll</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__DBusSysdeps_1ga1db7d09a41912c10978c6a4955d9a9d2" prot="public" static="no">
        <name>_DBUS_POLLPRI</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>There is urgent data to read. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="296" column="9" bodyfile="dbus/dbus-sysdeps.h" bodystart="296" bodyend="-1"/>
        <referencedby refid="group__DBusSysdeps_1gac1cdb5995dcef6dd54399ab610ae689a" compoundref="dbus-sysdeps-unix_8c" startline="2634" endline="2728">_dbus_poll</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__DBusSysdeps_1ga0cb1ace07be145e0b908687e99b5f161" prot="public" static="no">
        <name>_DBUS_POLLOUT</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>Writing now will not block. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="298" column="9" bodyfile="dbus/dbus-sysdeps.h" bodystart="298" bodyend="-1"/>
        <referencedby refid="group__DBusSysdeps_1gac1cdb5995dcef6dd54399ab610ae689a" compoundref="dbus-sysdeps-unix_8c" startline="2634" endline="2728">_dbus_poll</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__DBusSysdeps_1ga231164196ff407eccb732452a2d36468" prot="public" static="no">
        <name>_DBUS_POLLERR</name>
        <initializer>0x0008</initializer>
        <briefdescription>
<para>Error condition. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="300" column="9" bodyfile="dbus/dbus-sysdeps.h" bodystart="300" bodyend="-1"/>
        <referencedby refid="group__DBusInternalsUtils_1ga3205e9f8672271794aeb9d451e2fcc4a" compoundref="dbus-spawn_8c" startline="324" endline="402">_dbus_babysitter_unref</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1ga5f467b14f0c2f667e46c4ba786808e5b" compoundref="dbus-spawn_8c" startline="813" endline="826">_dbus_babysitter_set_watch_functions</referencedby>
        <referencedby refid="group__DBusSysdeps_1gac1cdb5995dcef6dd54399ab610ae689a" compoundref="dbus-sysdeps-unix_8c" startline="2634" endline="2728">_dbus_poll</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__DBusSysdeps_1ga6f08232c1f943313e3eefd7de8f3592f" prot="public" static="no">
        <name>_DBUS_POLLHUP</name>
        <initializer>0x0010</initializer>
        <briefdescription>
<para>Hung up. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="302" column="9" bodyfile="dbus/dbus-sysdeps.h" bodystart="302" bodyend="-1"/>
        <referencedby refid="group__DBusInternalsUtils_1ga3205e9f8672271794aeb9d451e2fcc4a" compoundref="dbus-spawn_8c" startline="324" endline="402">_dbus_babysitter_unref</referencedby>
        <referencedby refid="group__DBusInternalsUtils_1ga5f467b14f0c2f667e46c4ba786808e5b" compoundref="dbus-spawn_8c" startline="813" endline="826">_dbus_babysitter_set_watch_functions</referencedby>
        <referencedby refid="group__DBusSysdeps_1gac1cdb5995dcef6dd54399ab610ae689a" compoundref="dbus-sysdeps-unix_8c" startline="2634" endline="2728">_dbus_poll</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__DBusSysdeps_1ga83bf3d24f3a1a853dda794835c39fc6f" prot="public" static="no">
        <name>_DBUS_POLLNVAL</name>
        <initializer>0x0020</initializer>
        <briefdescription>
<para>Invalid request: fd not open. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="304" column="9" bodyfile="dbus/dbus-sysdeps.h" bodystart="304" bodyend="-1"/>
        <referencedby refid="group__DBusSysdeps_1gac1cdb5995dcef6dd54399ab610ae689a" compoundref="dbus-sysdeps-unix_8c" startline="2634" endline="2728">_dbus_poll</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__DBusSysdeps_1ga19d519dc45ab7d8e7beb6d6b8c1624b4" prot="public" static="no">
        <name>DBUS_VA_COPY</name>
        <param><defname>ap1</defname></param>
        <param><defname>ap2</defname></param>
        <initializer>((ap1) = (ap2))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="472" column="13" bodyfile="dbus/dbus-sysdeps.h" bodystart="472" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__DBusSysdeps_1ga50e1eddfbce31548ca2c50ca7b9ebf35" prot="public" static="no">
        <name>_DBUS_BYTE_OF_PRIMITIVE</name>
        <param><defname>p</defname></param>
        <param><defname>i</defname></param>
        <initializer>(((const char*)&amp;(p))[(i)])</initializer>
        <briefdescription>
<para>Casts a primitive C type to a byte array and then indexes a particular byte of the array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="481" column="9" bodyfile="dbus/dbus-sysdeps.h" bodystart="481" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__DBusSysdeps_1gac8269b795461ee42004b65734ce89e0b" prot="public" static="no">
        <name>_DBUS_DOUBLES_BITWISE_EQUAL</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>(<ref refid="group__DBusSysdeps_1ga50e1eddfbce31548ca2c50ca7b9ebf35" kindref="member">_DBUS_BYTE_OF_PRIMITIVE</ref> (a, 0) == <ref refid="group__DBusSysdeps_1ga50e1eddfbce31548ca2c50ca7b9ebf35" kindref="member">_DBUS_BYTE_OF_PRIMITIVE</ref> (b, 0) &amp;&amp;       \
      <ref refid="group__DBusSysdeps_1ga50e1eddfbce31548ca2c50ca7b9ebf35" kindref="member">_DBUS_BYTE_OF_PRIMITIVE</ref> (a, 1) == <ref refid="group__DBusSysdeps_1ga50e1eddfbce31548ca2c50ca7b9ebf35" kindref="member">_DBUS_BYTE_OF_PRIMITIVE</ref> (b, 1) &amp;&amp;       \
      <ref refid="group__DBusSysdeps_1ga50e1eddfbce31548ca2c50ca7b9ebf35" kindref="member">_DBUS_BYTE_OF_PRIMITIVE</ref> (a, 2) == <ref refid="group__DBusSysdeps_1ga50e1eddfbce31548ca2c50ca7b9ebf35" kindref="member">_DBUS_BYTE_OF_PRIMITIVE</ref> (b, 2) &amp;&amp;       \
      <ref refid="group__DBusSysdeps_1ga50e1eddfbce31548ca2c50ca7b9ebf35" kindref="member">_DBUS_BYTE_OF_PRIMITIVE</ref> (a, 3) == <ref refid="group__DBusSysdeps_1ga50e1eddfbce31548ca2c50ca7b9ebf35" kindref="member">_DBUS_BYTE_OF_PRIMITIVE</ref> (b, 3) &amp;&amp;       \
      <ref refid="group__DBusSysdeps_1ga50e1eddfbce31548ca2c50ca7b9ebf35" kindref="member">_DBUS_BYTE_OF_PRIMITIVE</ref> (a, 4) == <ref refid="group__DBusSysdeps_1ga50e1eddfbce31548ca2c50ca7b9ebf35" kindref="member">_DBUS_BYTE_OF_PRIMITIVE</ref> (b, 4) &amp;&amp;       \
      <ref refid="group__DBusSysdeps_1ga50e1eddfbce31548ca2c50ca7b9ebf35" kindref="member">_DBUS_BYTE_OF_PRIMITIVE</ref> (a, 5) == <ref refid="group__DBusSysdeps_1ga50e1eddfbce31548ca2c50ca7b9ebf35" kindref="member">_DBUS_BYTE_OF_PRIMITIVE</ref> (b, 5) &amp;&amp;       \
      <ref refid="group__DBusSysdeps_1ga50e1eddfbce31548ca2c50ca7b9ebf35" kindref="member">_DBUS_BYTE_OF_PRIMITIVE</ref> (a, 6) == <ref refid="group__DBusSysdeps_1ga50e1eddfbce31548ca2c50ca7b9ebf35" kindref="member">_DBUS_BYTE_OF_PRIMITIVE</ref> (b, 6) &amp;&amp;       \
      <ref refid="group__DBusSysdeps_1ga50e1eddfbce31548ca2c50ca7b9ebf35" kindref="member">_DBUS_BYTE_OF_PRIMITIVE</ref> (a, 7) == <ref refid="group__DBusSysdeps_1ga50e1eddfbce31548ca2c50ca7b9ebf35" kindref="member">_DBUS_BYTE_OF_PRIMITIVE</ref> (b, 7))</initializer>
        <briefdescription>
<para>On x86 there is an 80-bit FPU, and if you do &quot;a == b&quot; it may have a or b in an 80-bit register, thus failing to compare the two 64-bit doubles for bitwise equality. </para>        </briefdescription>
        <detaileddescription>
<para>So this macro compares the two doubles bitwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="488" column="9" bodyfile="dbus/dbus-sysdeps.h" bodystart="488" bodyend="-1"/>
        <referencedby refid="group__DBusMarshal_1ga61cc8d9c4e4217be654455d8eb45544c" compoundref="dbus-marshal-basic_8c" startline="1431" endline="1435">_dbus_first_type_in_signature_c_str</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__DBusSysdeps_1gad11b2d894fce7ae647a9cb2d9ba70f81" prot="public" static="no">
        <name>DBUS_DEFAULT_MESSAGE_UNIX_FDS</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dbus/dbus-sysdeps.h" line="565" column="9" bodyfile="dbus/dbus-sysdeps.h" bodystart="565" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Internal system-dependent API available on UNIX and Windows. </para>    </briefdescription>
    <detaileddescription>
<para>The system-dependent API has a dual purpose. First, it encapsulates all usage of operating system APIs for ease of auditing and to avoid cluttering the rest of the code with bizarre OS quirks and headers. Second, it abstracts different operating system APIs for portability. </para>    </detaileddescription>
  </compounddef>
</doxygen>
