.TH "DBusShared" 3dbus "Fri Mar 5 2021" "Version 1.9.4" "D-Bus" \" -*- nroff -*-
.ad l
.nh
.SH NAME
DBusShared \- Shared constants
.PP
Shared header included by both libdbus and C/C++ bindings such as the GLib bindings\&.  

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBDBUS_SERVICE_DBUS\fP   'org\&.freedesktop\&.DBus'"
.br
.RI "\fIThe bus name used to talk to the bus itself\&. \fP"
.ti -1c
.RI "#define \fBDBUS_PATH_DBUS\fP   '/org/freedesktop/DBus'"
.br
.RI "\fIThe object path used to talk to the bus itself\&. \fP"
.ti -1c
.RI "#define \fBDBUS_PATH_LOCAL\fP   '/org/freedesktop/DBus/Local'"
.br
.RI "\fIThe object path used in local/in-process-generated messages\&. \fP"
.ti -1c
.RI "#define \fBDBUS_INTERFACE_DBUS\fP   'org\&.freedesktop\&.DBus'"
.br
.RI "\fIThe interface exported by the object with \fBDBUS_SERVICE_DBUS\fP and \fBDBUS_PATH_DBUS\fP\&. \fP"
.ti -1c
.RI "#define \fBDBUS_INTERFACE_INTROSPECTABLE\fP   'org\&.freedesktop\&.DBus\&.Introspectable'"
.br
.RI "\fIThe interface supported by introspectable objects\&. \fP"
.ti -1c
.RI "#define \fBDBUS_INTERFACE_PROPERTIES\fP   'org\&.freedesktop\&.DBus\&.Properties'"
.br
.RI "\fIThe interface supported by objects with properties\&. \fP"
.ti -1c
.RI "#define \fBDBUS_INTERFACE_PEER\fP   'org\&.freedesktop\&.DBus\&.Peer'"
.br
.RI "\fIThe interface supported by most dbus peers\&. \fP"
.ti -1c
.RI "#define \fBDBUS_INTERFACE_LOCAL\fP   'org\&.freedesktop\&.DBus\&.Local'"
.br
.RI "\fIThis is a special interface whose methods can only be invoked by the local implementation (messages from remote apps aren't allowed to specify this interface)\&. \fP"
.ti -1c
.RI "#define \fBDBUS_NAME_FLAG_ALLOW_REPLACEMENT\fP   0x1"
.br
.RI "\fIAllow another service to become the primary owner if requested\&. \fP"
.ti -1c
.RI "#define \fBDBUS_NAME_FLAG_REPLACE_EXISTING\fP   0x2"
.br
.RI "\fIRequest to replace the current primary owner\&. \fP"
.ti -1c
.RI "#define \fBDBUS_NAME_FLAG_DO_NOT_QUEUE\fP   0x4"
.br
.RI "\fIIf we can not become the primary owner do not place us in the queue\&. \fP"
.ti -1c
.RI "#define \fBDBUS_REQUEST_NAME_REPLY_PRIMARY_OWNER\fP   1"
.br
.RI "\fIService has become the primary owner of the requested name\&. \fP"
.ti -1c
.RI "#define \fBDBUS_REQUEST_NAME_REPLY_IN_QUEUE\fP   2"
.br
.RI "\fIService could not become the primary owner and has been placed in the queue\&. \fP"
.ti -1c
.RI "#define \fBDBUS_REQUEST_NAME_REPLY_EXISTS\fP   3"
.br
.RI "\fIService is already in the queue\&. \fP"
.ti -1c
.RI "#define \fBDBUS_REQUEST_NAME_REPLY_ALREADY_OWNER\fP   4"
.br
.RI "\fIService is already the primary owner\&. \fP"
.ti -1c
.RI "#define \fBDBUS_RELEASE_NAME_REPLY_RELEASED\fP   1"
.br
.RI "\fIService was released from the given name\&. \fP"
.ti -1c
.RI "#define \fBDBUS_RELEASE_NAME_REPLY_NON_EXISTENT\fP   2"
.br
.RI "\fIThe given name does not exist on the bus\&. \fP"
.ti -1c
.RI "#define \fBDBUS_RELEASE_NAME_REPLY_NOT_OWNER\fP   3"
.br
.RI "\fIService is not an owner of the given name\&. \fP"
.ti -1c
.RI "#define \fBDBUS_START_REPLY_SUCCESS\fP   1"
.br
.RI "\fIService was auto started\&. \fP"
.ti -1c
.RI "#define \fBDBUS_START_REPLY_ALREADY_RUNNING\fP   2"
.br
.RI "\fIService was already running\&. \fP"
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBDBusBusType\fP { \fBDBUS_BUS_SESSION\fP, \fBDBUS_BUS_SYSTEM\fP, \fBDBUS_BUS_STARTER\fP }
.RI "\fIWell-known bus types\&. \fP""
.br
.ti -1c
.RI "enum \fBDBusHandlerResult\fP { \fBDBUS_HANDLER_RESULT_HANDLED\fP, \fBDBUS_HANDLER_RESULT_NOT_YET_HANDLED\fP, \fBDBUS_HANDLER_RESULT_NEED_MEMORY\fP }
.RI "\fIResults that a message handler can return\&. \fP""
.br
.in -1c
.SH "Detailed Description"
.PP 
Shared header included by both libdbus and C/C++ bindings such as the GLib bindings\&. 

Usually a C/C++ binding such as the GLib or Qt binding won't want to include \fBdbus\&.h\fP in its public headers\&. However, a few constants and macros may be useful to include; those are found here and in \fBdbus-protocol\&.h\fP 
.SH "Macro Definition Documentation"
.PP 
.SS "#define DBUS_PATH_DBUS   '/org/freedesktop/DBus'"

.PP
The object path used to talk to the bus itself\&. 
.PP
Definition at line 80 of file dbus\-shared\&.h\&.
.PP
Referenced by dbus_bus_add_match(), dbus_bus_get_id(), dbus_bus_get_unix_user(), dbus_bus_name_has_owner(), dbus_bus_register(), dbus_bus_release_name(), dbus_bus_remove_match(), dbus_bus_request_name(), and dbus_bus_start_service_by_name()\&.
.SS "#define DBUS_PATH_LOCAL   '/org/freedesktop/DBus/Local'"

.PP
The object path used in local/in-process-generated messages\&. 
.PP
Definition at line 82 of file dbus\-shared\&.h\&.
.PP
Referenced by _dbus_connection_new_for_transport()\&.
.SS "#define DBUS_SERVICE_DBUS   'org\&.freedesktop\&.DBus'"

.PP
The bus name used to talk to the bus itself\&. 
.PP
Definition at line 76 of file dbus\-shared\&.h\&.
.PP
Referenced by dbus_bus_add_match(), dbus_bus_get_id(), dbus_bus_get_unix_user(), dbus_bus_name_has_owner(), dbus_bus_register(), dbus_bus_release_name(), dbus_bus_remove_match(), dbus_bus_request_name(), and dbus_bus_start_service_by_name()\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBDBusBusType\fP"

.PP
Well-known bus types\&. See \fBdbus_bus_get()\fP\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIDBUS_BUS_SESSION \fP\fP
The login session bus\&. 
.TP
\fB\fIDBUS_BUS_SYSTEM \fP\fP
The systemwide bus\&. 
.TP
\fB\fIDBUS_BUS_STARTER \fP\fP
The bus that started us, if any\&. 
.PP
Definition at line 56 of file dbus\-shared\&.h\&.
.SS "enum \fBDBusHandlerResult\fP"

.PP
Results that a message handler can return\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIDBUS_HANDLER_RESULT_HANDLED \fP\fP
Message has had its effect - no need to run more handlers\&. 
.TP
\fB\fIDBUS_HANDLER_RESULT_NOT_YET_HANDLED \fP\fP
Message has not had any effect - see if other handlers want it\&. 
.TP
\fB\fIDBUS_HANDLER_RESULT_NEED_MEMORY \fP\fP
Need more memory in order to return \fBDBUS_HANDLER_RESULT_HANDLED\fP or \fBDBUS_HANDLER_RESULT_NOT_YET_HANDLED\fP\&. Please try again later with more memory\&. 
.PP
Definition at line 66 of file dbus\-shared\&.h\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for D-Bus from the source code\&.
